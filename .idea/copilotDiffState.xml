<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/moneySmartz/game.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/moneySmartz/game.py" />
              <option name="originalContent" value="import random&#10;import time&#10;import os&#10;from moneySmartz.models import Player, BankAccount, Card, Loan, Asset&#10;from moneySmartz.screens.life_event_screens import HousingScreen, FamilyPlanningScreen&#10;from moneySmartz.screens.base_screens import EndGameScreen&#10;&#10;class Game:&#10;    &quot;&quot;&quot;&#10;    Main game class that manages the game state and logic.&#10;    &quot;&quot;&quot;&#10;    def __init__(self):&#10;        self.player = None&#10;        self.current_month = 1&#10;        self.current_year = 0&#10;        self.game_over = False&#10;        self.events = self.initialize_events()&#10;        self.gui_manager = None  # Will be set by the main script&#10;        self.paused = False  # Track the paused state&#10;&#10;    def initialize_events(self):&#10;        &quot;&quot;&quot;Initialize the random events that can occur during gameplay.&quot;&quot;&quot;&#10;        # Define possible random events&#10;        events = {&#10;            &quot;positive&quot;: [&#10;                {&quot;name&quot;: &quot;Tax Refund&quot;, &quot;description&quot;: &quot;You received a tax refund!&quot;, &quot;cash_effect&quot;: lambda: random.randint(100, 1000)},&#10;                {&quot;name&quot;: &quot;Birthday Gift&quot;, &quot;description&quot;: &quot;You received money as a birthday gift!&quot;, &quot;cash_effect&quot;: lambda: random.randint(20, 200)},&#10;                {&quot;name&quot;: &quot;Found Money&quot;, &quot;description&quot;: &quot;You found money on the ground!&quot;, &quot;cash_effect&quot;: lambda: random.randint(5, 50)},&#10;                {&quot;name&quot;: &quot;Bonus&quot;, &quot;description&quot;: &quot;You received a bonus at work!&quot;, &quot;cash_effect&quot;: lambda: int(self.player.salary * random.uniform(0.01, 0.1)) if self.player.salary &gt; 0 else 0},&#10;            ],&#10;            &quot;negative&quot;: [&#10;                {&quot;name&quot;: &quot;Car Repair&quot;, &quot;description&quot;: &quot;Your car needs repairs.&quot;, &quot;cash_effect&quot;: lambda: -random.randint(100, 2000) if any(a.asset_type == &quot;Car&quot; for a in self.player.assets) else 0},&#10;                {&quot;name&quot;: &quot;Medical Bill&quot;, &quot;description&quot;: &quot;You have unexpected medical expenses.&quot;, &quot;cash_effect&quot;: lambda: -random.randint(50, 5000)},&#10;                {&quot;name&quot;: &quot;Lost Wallet&quot;, &quot;description&quot;: &quot;You lost your wallet!&quot;, &quot;cash_effect&quot;: lambda: -min(50, self.player.cash)},&#10;                {&quot;name&quot;: &quot;Phone Repair&quot;, &quot;description&quot;: &quot;Your phone screen cracked.&quot;, &quot;cash_effect&quot;: lambda: -random.randint(50, 300)},&#10;            ]&#10;        }&#10;        return events&#10;&#10;    def start_game(self):&#10;        &quot;&quot;&quot;Start a new game in text mode (legacy).&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;WELCOME TO MONEY SMARTZ: THE FINANCIAL LIFE SIMULATOR&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nInspired by the classic Oregon Trail, this game will take you&quot;)&#10;        print(&quot;through the financial journey of life, from your first bank account&quot;)&#10;        print(&quot;to retirement, with all the ups and downs along the way.&quot;)&#10;        print(&quot;\nMake wise financial decisions and see how they affect your life!&quot;)&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;&#10;        name = input(&quot;\nEnter your name: &quot;)&#10;        self.player = Player(name)&#10;&#10;        print(f&quot;\nWelcome, {self.player.name}! You're a 16-year-old high school student.&quot;)&#10;        print(&quot;Your parents suggest that you should open your first bank account.&quot;)&#10;&#10;        choice = self.get_choice(&quot;Do you want to open a bank account?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;        if choice == &quot;Yes&quot;:&#10;            self.player.bank_account = BankAccount()&#10;            self.player.bank_account.deposit(50)  # Parents give you $50 to start&#10;            print(&quot;\nCongratulations! You've opened your first checking account.&quot;)&#10;            print(&quot;Your parents deposited $50 to get you started.&quot;)&#10;&#10;            choice = self.get_choice(&quot;Would you like a debit card with your account?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;            if choice == &quot;Yes&quot;:&#10;                self.player.debit_card = Card(&quot;Debit&quot;)&#10;                print(&quot;\nYou now have a debit card linked to your checking account.&quot;)&#10;        else:&#10;            print(&quot;\nYou decided not to open a bank account yet. You can do this later.&quot;)&#10;&#10;        input(&quot;\nPress Enter to begin your financial journey...&quot;)&#10;        self.game_loop()&#10;&#10;    def game_loop(self):&#10;        &quot;&quot;&quot;Main game loop for text mode (legacy).&quot;&quot;&quot;&#10;        while not self.game_over:&#10;            self.current_month += 1&#10;            if self.current_month &gt; 12:&#10;                self.current_month = 1&#10;                self.current_year += 1&#10;                self.player.age += 1&#10;&#10;                # Apply interest to savings&#10;                if self.player.bank_account and self.player.bank_account.account_type == &quot;Savings&quot;:&#10;                    self.player.bank_account.apply_interest()&#10;&#10;                # Age assets&#10;                for asset in self.player.assets:&#10;                    asset.age_asset()&#10;&#10;            # Process monthly income and expenses&#10;            self.process_monthly_finances()&#10;&#10;            # Random events&#10;            if random.random() &lt; 0.3:  # 30% chance of an event each month&#10;                self.trigger_random_event()&#10;&#10;            # Life stage events based on age&#10;            self.check_life_stage_events()&#10;&#10;            # Display status and get player action&#10;            self.display_status()&#10;            self.get_player_action()&#10;&#10;            # Check game over conditions&#10;            if self.player.age &gt;= 65:  # Retirement age&#10;                self.end_game(&quot;retirement&quot;)&#10;&#10;    def process_monthly_finances(self):&#10;        &quot;&quot;&quot;Process monthly income and expenses.&quot;&quot;&quot;&#10;        # Process income&#10;        if self.player.job:&#10;            monthly_income = self.player.salary / 12&#10;            self.player.cash += monthly_income&#10;&#10;            # Auto deposit to bank if account exists&#10;            if self.player.bank_account:&#10;                deposit_amount = monthly_income * 0.8  # 80% of income goes to bank&#10;                self.player.bank_account.deposit(deposit_amount)&#10;                self.player.cash -= deposit_amount&#10;&#10;        # Process loan payments&#10;        for loan in self.player.loans:&#10;            if self.player.cash &gt;= loan.monthly_payment:&#10;                self.player.cash -= loan.monthly_payment&#10;                loan.make_payment(loan.monthly_payment)&#10;            elif self.player.bank_account and self.player.bank_account.balance &gt;= loan.monthly_payment:&#10;                self.player.bank_account.withdraw(loan.monthly_payment)&#10;                loan.make_payment(loan.monthly_payment)&#10;            elif self.player.credit_card and (self.player.credit_card.balance + loan.monthly_payment) &lt;= self.player.credit_card.limit:&#10;                self.player.credit_card.charge(loan.monthly_payment)&#10;                loan.make_payment(loan.monthly_payment)&#10;            else:&#10;                # Missed payment - credit score impact&#10;                self.player.credit_score -= 30&#10;                print(f&quot;You missed a payment on your {loan.loan_type} loan. Your credit score has been affected.&quot;)&#10;&#10;        # Process credit card minimum payments (5% of balance)&#10;        if self.player.credit_card and self.player.credit_card.balance &gt; 0:&#10;            min_payment = max(25, self.player.credit_card.balance * 0.05)  # Minimum $25 or 5% of balance&#10;&#10;            if self.player.cash &gt;= min_payment:&#10;                self.player.cash -= min_payment&#10;                self.player.credit_card.pay(min_payment)&#10;            elif self.player.bank_account and self.player.bank_account.balance &gt;= min_payment:&#10;                self.player.bank_account.withdraw(min_payment)&#10;                self.player.credit_card.pay(min_payment)&#10;            else:&#10;                # Missed payment - credit score impact&#10;                self.player.credit_score -= 50&#10;                print(&quot;You missed your credit card payment. Your credit score has been severely affected.&quot;)&#10;&#10;        # Process living expenses&#10;        living_expenses = 1000  # Base living expenses&#10;&#10;        if any(a.asset_type == &quot;House&quot; for a in self.player.assets):&#10;            living_expenses += 500  # Additional expenses for homeowners&#10;&#10;        if any(a.asset_type == &quot;Car&quot; for a in self.player.assets):&#10;            living_expenses += 200  # Car maintenance and gas&#10;&#10;        if self.player.family:&#10;            living_expenses += 500 * len(self.player.family)  # Additional expenses per family member&#10;&#10;        # Adjust for inflation over time (2% per year)&#10;        inflation_factor = (1.02) ** self.current_year&#10;        living_expenses *= inflation_factor&#10;&#10;        # Pay living expenses&#10;        if self.player.cash &gt;= living_expenses:&#10;            self.player.cash -= living_expenses&#10;        elif self.player.bank_account and self.player.bank_account.balance &gt;= living_expenses:&#10;            self.player.bank_account.withdraw(living_expenses)&#10;        elif self.player.credit_card and (self.player.credit_card.balance + living_expenses) &lt;= self.player.credit_card.limit:&#10;            self.player.credit_card.charge(living_expenses)&#10;        else:&#10;            # Couldn't pay living expenses - game over?&#10;            print(&quot;You couldn't afford your living expenses this month!&quot;)&#10;            # For now, just reduce credit score&#10;            self.player.credit_score -= 20&#10;&#10;        # --- Process recurring bills (from items) ---&#10;        for bill in self.player.recurring_bills:&#10;            paid = False&#10;            # Try to pay from bank account or credit card if specified&#10;            if bill.get('source') == 'bank_or_credit':&#10;                if self.player.bank_account and self.player.bank_account.balance &gt;= bill['amount']:&#10;                    self.player.bank_account.withdraw(bill['amount'])&#10;                    paid = True&#10;                elif self.player.credit_card and (self.player.credit_card.balance + bill['amount']) &lt;= self.player.credit_card.limit:&#10;                    self.player.credit_card.charge(bill['amount'])&#10;                    paid = True&#10;            # Fallback to cash&#10;            if not paid and self.player.cash &gt;= bill['amount']:&#10;                self.player.cash -= bill['amount']&#10;                paid = True&#10;            if not paid:&#10;                self.player.credit_score -= 10  # Penalty for missed bill&#10;                print(f&quot;Missed recurring bill: {bill['name']}&quot;)&#10;&#10;        # --- Process utility bills ---&#10;        for util in self.player.utility_bills:&#10;            paid = False&#10;            if self.player.bank_account and self.player.bank_account.balance &gt;= util['amount']:&#10;                self.player.bank_account.withdraw(util['amount'])&#10;                paid = True&#10;            elif self.player.credit_card and (self.player.credit_card.balance + util['amount']) &lt;= self.player.credit_card.limit:&#10;                self.player.credit_card.charge(util['amount'])&#10;                paid = True&#10;            if not paid and self.player.cash &gt;= util['amount']:&#10;                self.player.cash -= util['amount']&#10;                paid = True&#10;            if not paid:&#10;                self.player.credit_score -= 5  # Penalty for missed utility&#10;                print(f&quot;Missed utility bill: {util['name']}&quot;)&#10;&#10;    def trigger_random_event(self):&#10;        &quot;&quot;&quot;Trigger a random financial event.&quot;&quot;&quot;&#10;        event_type = &quot;positive&quot; if random.random() &lt; 0.5 else &quot;negative&quot;&#10;        event = random.choice(self.events[event_type])&#10;        &#10;        cash_effect = event[&quot;cash_effect&quot;]()&#10;        &#10;        # Only show events that have an effect&#10;        if cash_effect == 0:&#10;            return&#10;        &#10;        # If in GUI mode, show the event screen&#10;        if self.gui_manager is not None:&#10;            from moneySmartz.screens.random_event_screens import RandomEventScreen&#10;            event_screen = RandomEventScreen(self, event, cash_effect)&#10;            self.gui_manager.set_screen(event_screen)&#10;            return&#10;        &#10;        # Otherwise, text mode&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;!&quot; * 60)&#10;        print(f&quot;LIFE EVENT: {event['name']}&quot;)&#10;        print(event[&quot;description&quot;])&#10;        &#10;        if cash_effect &gt; 0:&#10;            print(f&quot;You received ${cash_effect}!&quot;)&#10;            self.player.cash += cash_effect&#10;        else:&#10;            print(f&quot;This costs you ${abs(cash_effect)}.&quot;)&#10;            # ... rest of text mode processing ...&#10;        &#10;        print(&quot;!&quot; * 60)&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def check_life_stage_events(self):&#10;        &quot;&quot;&quot;Check for and trigger life stage events based on player age.&quot;&quot;&quot;&#10;        # High school graduation&#10;        if self.player.age == 18 and self.player.education == &quot;High School&quot;:&#10;            self.high_school_graduation_event()&#10;&#10;        # College graduation (if went to college)&#10;        if self.player.age == 22 and self.player.education == &quot;College (In Progress)&quot;:&#10;            self.college_graduation_event()&#10;&#10;        # First full-time job opportunity&#10;        if self.player.age == 22 and not self.player.job and self.player.education != &quot;College (In Progress)&quot;:&#10;            self.job_opportunity_event()&#10;&#10;        # Car purchase opportunity&#10;        if self.player.age == 20 and not any(a.asset_type == &quot;Car&quot; for a in self.player.assets):&#10;            self.car_purchase_opportunity()&#10;&#10;        # House purchase opportunity&#10;        if self.player.age == 30 and not any(a.asset_type == &quot;House&quot; for a in self.player.assets) and self.player.job:&#10;            self.house_purchase_opportunity()&#10;&#10;        # Family planning opportunity&#10;        if self.player.age &gt;= 28 and not self.player.family and self.player.job:&#10;            if random.random() &lt; 0.1:  # 10% chance each year after 28&#10;                self.family_planning_opportunity()&#10;&#10;    def high_school_graduation_event(self):&#10;        &quot;&quot;&quot;Handle the high school graduation event.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: HIGH SCHOOL GRADUATION&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nCongratulations! You've graduated from high school.&quot;)&#10;        print(&quot;It's time to make some important decisions about your future.&quot;)&#10;&#10;        choices = [&quot;Go to college (costs $20,000/year for 4 years)&quot;,&#10;                  &quot;Go to trade school (costs $10,000 for 2 years)&quot;,&#10;                  &quot;Start working full-time&quot;]&#10;&#10;        choice = self.get_choice(&quot;What would you like to do?&quot;, choices)&#10;&#10;        if choice == choices[0]:  # College&#10;            print(&quot;\nYou've decided to go to college. This is a significant investment&quot;)&#10;            print(&quot;in your future that could lead to higher-paying jobs.&quot;)&#10;&#10;            # Check if player can afford college&#10;            annual_cost = 20000&#10;            if self.player.cash &gt;= annual_cost:&#10;                print(f&quot;\nYou pay the first year's tuition of ${annual_cost} in cash.&quot;)&#10;                self.player.cash -= annual_cost&#10;            elif self.player.bank_account and self.player.bank_account.balance &gt;= annual_cost:&#10;                print(f&quot;\nYou pay the first year's tuition of ${annual_cost} from your bank account.&quot;)&#10;                self.player.bank_account.withdraw(annual_cost)&#10;            else:&#10;                # Need a student loan&#10;                print(&quot;\nYou don't have enough money to pay for college upfront.&quot;)&#10;                print(&quot;You'll need to take out student loans.&quot;)&#10;&#10;                loan_amount = 80000  # 4 years of college&#10;                loan = Loan(&quot;Student&quot;, loan_amount, 0.05, 20)  # 5% interest, 20-year term&#10;                self.player.loans.append(loan)&#10;&#10;                print(f&quot;\nYou've taken out a student loan for ${loan_amount}.&quot;)&#10;                print(f&quot;Your monthly payment will be ${loan.monthly_payment:.2f} for 20 years.&quot;)&#10;&#10;            self.player.education = &quot;College (In Progress)&quot;&#10;            print(&quot;\nYou're now a college student! Your education will take 4 years.&quot;)&#10;&#10;        elif choice == choices[1]:  # Trade school&#10;            print(&quot;\nYou've decided to go to trade school. This is a practical choice&quot;)&#10;            print(&quot;that will give you specific skills for certain careers.&quot;)&#10;&#10;            # Check if player can afford trade school&#10;            cost = 10000&#10;            if self.player.cash &gt;= cost:&#10;                print(f&quot;\nYou pay the trade school tuition of ${cost} in cash.&quot;)&#10;                self.player.cash -= cost&#10;            elif self.player.bank_account and self.player.bank_account.balance &gt;= cost:&#10;                print(f&quot;\nYou pay the trade school tuition of ${cost} from your bank account.&quot;)&#10;                self.player.bank_account.withdraw(cost)&#10;            else:&#10;                # Need a student loan&#10;                print(&quot;\nYou don't have enough money to pay for trade school upfront.&quot;)&#10;                print(&quot;You'll need to take out a student loan.&quot;)&#10;&#10;                loan = Loan(&quot;Student&quot;, cost, 0.05, 10)  # 5% interest, 10-year term&#10;                self.player.loans.append(loan)&#10;&#10;                print(f&quot;\nYou've taken out a student loan for ${cost}.&quot;)&#10;                print(f&quot;Your monthly payment will be ${loan.monthly_payment:.2f} for 10 years.&quot;)&#10;&#10;            self.player.education = &quot;Trade School&quot;&#10;            print(&quot;\nYou're now a trade school student! Your education will take 2 years.&quot;)&#10;&#10;        else:  # Start working&#10;            print(&quot;\nYou've decided to start working full-time without further education.&quot;)&#10;            print(&quot;You'll start with entry-level positions, but can work your way up.&quot;)&#10;&#10;            self.player.education = &quot;High School Graduate&quot;&#10;            self.job_opportunity_event()&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def college_graduation_event(self):&#10;        &quot;&quot;&quot;Handle the college graduation event.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: COLLEGE GRADUATION&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nCongratulations! You've graduated from college with a bachelor's degree.&quot;)&#10;        print(&quot;Your education will open up better job opportunities.&quot;)&#10;&#10;        self.player.education = &quot;College Graduate&quot;&#10;        self.player.credit_score += 20  # Education boosts credit score&#10;&#10;        print(&quot;\nYour credit score has increased due to your educational achievement.&quot;)&#10;        print(f&quot;Your credit score is now {self.player.credit_score}.&quot;)&#10;&#10;        # Offer job opportunities&#10;        print(&quot;\nWith your new degree, you have access to better job opportunities.&quot;)&#10;        self.job_opportunity_event()&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def job_opportunity_event(self):&#10;        &quot;&quot;&quot;Handle job opportunities.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: JOB OPPORTUNITY&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        # Generate job options based on education&#10;        job_options = []&#10;&#10;        if self.player.education == &quot;High School Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Retail Associate&quot;, &quot;salary&quot;: 25000},&#10;                {&quot;title&quot;: &quot;Food Service Worker&quot;, &quot;salary&quot;: 22000},&#10;                {&quot;title&quot;: &quot;Warehouse Worker&quot;, &quot;salary&quot;: 28000},&#10;            ]&#10;        elif self.player.education == &quot;Trade School&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Electrician Apprentice&quot;, &quot;salary&quot;: 35000},&#10;                {&quot;title&quot;: &quot;Plumber Assistant&quot;, &quot;salary&quot;: 32000},&#10;                {&quot;title&quot;: &quot;HVAC Technician&quot;, &quot;salary&quot;: 38000},&#10;            ]&#10;        elif self.player.education == &quot;College Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Entry-Level Accountant&quot;, &quot;salary&quot;: 50000},&#10;                {&quot;title&quot;: &quot;Marketing Coordinator&quot;, &quot;salary&quot;: 45000},&#10;                {&quot;title&quot;: &quot;Software Developer&quot;, &quot;salary&quot;: 65000},&#10;            ]&#10;&#10;        # Display job options&#10;        print(&quot;\nThe following job opportunities are available to you:&quot;)&#10;        for i, job in enumerate(job_options):&#10;            print(f&quot;{i+1}. {job['title']} - ${job['salary']}/year&quot;)&#10;&#10;        # Get player choice&#10;        choice = 0&#10;        while choice &lt; 1 or choice &gt; len(job_options):&#10;            try:&#10;                choice = int(input(f&quot;\nWhich job would you like to take? (1-{len(job_options)}): &quot;))&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        # Apply job&#10;        selected_job = job_options[choice-1]&#10;        self.player.job = selected_job[&quot;title&quot;]&#10;        self.player.salary = selected_job[&quot;salary&quot;]&#10;&#10;        print(f&quot;\nCongratulations! You are now a {self.player.job} earning ${self.player.salary}/year.&quot;)&#10;        print(f&quot;Your monthly income is ${self.player.salary/12:.2f}.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def car_purchase_opportunity(self):&#10;        &quot;&quot;&quot;Handle car purchase opportunity.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: CAR PURCHASE OPPORTUNITY&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nYou're now at an age where having your own car could be beneficial.&quot;)&#10;        print(&quot;Would you like to look at some car options?&quot;)&#10;&#10;        choice = self.get_choice(&quot;Do you want to buy a car?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;&#10;        if choice == &quot;Yes&quot;:&#10;            # Car options&#10;            car_options = [&#10;                {&quot;name&quot;: &quot;Used Economy Car&quot;, &quot;value&quot;: 5000},&#10;                {&quot;name&quot;: &quot;New Economy Car&quot;, &quot;value&quot;: 18000},&#10;                {&quot;name&quot;: &quot;Used Luxury Car&quot;, &quot;value&quot;: 15000},&#10;                {&quot;name&quot;: &quot;New Luxury Car&quot;, &quot;value&quot;: 35000},&#10;            ]&#10;&#10;            print(&quot;\nHere are your car options:&quot;)&#10;            for i, car in enumerate(car_options):&#10;                print(f&quot;{i+1}. {car['name']} - ${car['value']}&quot;)&#10;&#10;            # Get player choice&#10;            car_choice = 0&#10;            while car_choice &lt; 1 or car_choice &gt; len(car_options):&#10;                try:&#10;                    car_choice = int(input(f&quot;\nWhich car would you like to buy? (1-{len(car_options)}): &quot;))&#10;                except ValueError:&#10;                    print(&quot;Please enter a valid number.&quot;)&#10;&#10;            selected_car = car_options[car_choice-1]&#10;&#10;            # Payment options&#10;            print(f&quot;\nYou've selected the {selected_car['name']} for ${selected_car['value']}.&quot;)&#10;            print(&quot;How would you like to pay?&quot;)&#10;&#10;            payment_options = [&quot;Cash&quot;]&#10;            if self.player.bank_account and self.player.bank_account.balance &gt;= selected_car['value']:&#10;                payment_options.append(&quot;Bank Account&quot;)&#10;            payment_options.append(&quot;Auto Loan&quot;)&#10;&#10;            payment_choice = self.get_choice(&quot;Select payment method:&quot;, payment_options)&#10;&#10;            if payment_choice == &quot;Cash&quot; and self.player.cash &gt;= selected_car['value']:&#10;                self.player.cash -= selected_car['value']&#10;                print(f&quot;\nYou paid ${selected_car['value']} in cash for your new car.&quot;)&#10;            elif payment_choice == &quot;Bank Account&quot;:&#10;                self.player.bank_account.withdraw(selected_car['value'])&#10;                print(f&quot;\nYou paid ${selected_car['value']} from your bank account for your new car.&quot;)&#10;            else:  # Auto Loan&#10;                # Determine loan terms based on credit score&#10;                if self.player.credit_score &gt;= 700:&#10;                    interest_rate = 0.03  # 3%&#10;                elif self.player.credit_score &gt;= 650:&#10;                    interest_rate = 0.05  # 5%&#10;                else:&#10;                    interest_rate = 0.08  # 8%&#10;&#10;                loan = Loan(&quot;Auto&quot;, selected_car['value'], interest_rate, 5)  # 5-year auto loan&#10;                self.player.loans.append(loan)&#10;&#10;                print(f&quot;\nYou've taken out an auto loan for ${selected_car['value']}.&quot;)&#10;                print(f&quot;Your interest rate is {interest_rate*100:.1f}% based on your credit score of {self.player.credit_score}.&quot;)&#10;                print(f&quot;Your monthly payment will be ${loan.monthly_payment:.2f} for 5 years.&quot;)&#10;&#10;            # Add car to assets&#10;            self.player.assets.append(Asset(&quot;Car&quot;, selected_car['name'], selected_car['value']))&#10;            print(f&quot;\nCongratulations on your new {selected_car['name']}!&quot;)&#10;&#10;        else:&#10;            print(&quot;\nYou've decided not to buy a car at this time.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def house_purchase_opportunity(self):&#10;        &quot;&quot;&quot;Handle house purchase opportunity.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: HOUSE PURCHASE OPPORTUNITY&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nYou're now at a stage in life where buying a house could be a good investment.&quot;)&#10;        print(&quot;Would you like to look at some housing options?&quot;)&#10;&#10;        choice = self.get_choice(&quot;Do you want to buy a house?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;&#10;        if choice == &quot;Yes&quot;:&#10;            # House options&#10;            house_options = [&#10;                {&quot;name&quot;: &quot;Small Starter Home&quot;, &quot;value&quot;: 150000},&#10;                {&quot;name&quot;: &quot;Mid-size Family Home&quot;, &quot;value&quot;: 250000},&#10;                {&quot;name&quot;: &quot;Large Luxury Home&quot;, &quot;value&quot;: 500000},&#10;                {&quot;name&quot;: &quot;Urban Condo&quot;, &quot;value&quot;: 200000},&#10;            ]&#10;&#10;            print(&quot;\nHere are your housing options:&quot;)&#10;            for i, house in enumerate(house_options):&#10;                print(f&quot;{i+1}. {house['name']} - ${house['value']}&quot;)&#10;&#10;            # Get player choice&#10;            house_choice = 0&#10;            while house_choice &lt; 1 or house_choice &gt; len(house_options):&#10;                try:&#10;                    house_choice = int(input(f&quot;\nWhich house would you like to buy? (1-{len(house_options)}): &quot;))&#10;                except ValueError:&#10;                    print(&quot;Please enter a valid number.&quot;)&#10;&#10;            selected_house = house_options[house_choice-1]&#10;&#10;            # Calculate down payment (20% is standard)&#10;            down_payment = selected_house['value'] * 0.2&#10;            loan_amount = selected_house['value'] - down_payment&#10;&#10;            print(f&quot;\nYou've selected the {selected_house['name']} for ${selected_house['value']}.&quot;)&#10;            print(f&quot;A standard mortgage requires a 20% down payment of ${down_payment}.&quot;)&#10;&#10;            # Check if player can afford down payment&#10;            if self.player.cash &lt; down_payment and (not self.player.bank_account or self.player.bank_account.balance &lt; down_payment):&#10;                print(&quot;\nYou don't have enough money for the down payment.&quot;)&#10;                print(&quot;You'll need to save up more money before buying a house.&quot;)&#10;                input(&quot;\nPress Enter to continue...&quot;)&#10;                return&#10;&#10;            # Down payment options&#10;            payment_options = []&#10;            if self.player.cash &gt;= down_payment:&#10;                payment_options.append(&quot;Cash&quot;)&#10;            if self.player.bank_account and self.player.bank_account.balance &gt;= down_payment:&#10;                payment_options.append(&quot;Bank Account&quot;)&#10;&#10;            payment_choice = self.get_choice(&quot;How would you like to pay the down payment?&quot;, payment_options)&#10;&#10;            if payment_choice == &quot;Cash&quot;:&#10;                self.player.cash -= down_payment&#10;                print(f&quot;\nYou paid ${down_payment} in cash for your down payment.&quot;)&#10;            else:  # Bank Account&#10;                self.player.bank_account.withdraw(down_payment)&#10;                print(f&quot;\nYou paid ${down_payment} from your bank account for your down payment.&quot;)&#10;&#10;            # Determine mortgage terms based on credit score&#10;            if self.player.credit_score &gt;= 750:&#10;                interest_rate = 0.035  # 3.5%&#10;            elif self.player.credit_score &gt;= 700:&#10;                interest_rate = 0.04   # 4.0%&#10;            elif self.player.credit_score &gt;= 650:&#10;                interest_rate = 0.045  # 4.5%&#10;            else:&#10;                interest_rate = 0.055  # 5.5%&#10;&#10;            loan = Loan(&quot;Mortgage&quot;, loan_amount, interest_rate, 30)  # 30-year mortgage&#10;            self.player.loans.append(loan)&#10;&#10;            print(f&quot;\nYou've taken out a mortgage for ${loan_amount}.&quot;)&#10;            print(f&quot;Your interest rate is {interest_rate*100:.1f}% based on your credit score of {self.player.credit_score}.&quot;)&#10;            print(f&quot;Your monthly payment will be ${loan.monthly_payment:.2f} for 30 years.&quot;)&#10;&#10;            # Add house to assets&#10;            self.player.assets.append(Asset(&quot;House&quot;, selected_house['name'], selected_house['value']))&#10;            print(f&quot;\nCongratulations on your new {selected_house['name']}!&quot;)&#10;&#10;        else:&#10;            print(&quot;\nYou've decided not to buy a house at this time.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def family_planning_opportunity(self):&#10;        &quot;&quot;&quot;Handle family planning opportunity.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: FAMILY PLANNING&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nYou've reached a stage in life where starting a family might be a consideration.&quot;)&#10;        print(&quot;Starting a family will increase your monthly expenses but can bring joy to your life.&quot;)&#10;&#10;        choice = self.get_choice(&quot;Would you like to start a family?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;&#10;        if choice == &quot;Yes&quot;:&#10;            # Add a spouse&#10;            spouse_age = self.player.age - random.randint(-3, 3)  # Spouse age is close to player age&#10;            self.player.family.append({&quot;relation&quot;: &quot;Spouse&quot;, &quot;age&quot;: spouse_age})&#10;&#10;            print(&quot;\nCongratulations! You've gotten married.&quot;)&#10;            print(f&quot;Your spouse is {spouse_age} years old.&quot;)&#10;&#10;            # Chance for dual income&#10;            if random.random() &lt; 0.7:  # 70% chance of spouse having a job&#10;                spouse_income = int(self.player.salary * random.uniform(0.5, 1.5))  # Spouse income relative to player&#10;                self.player.salary += spouse_income  # Add spouse income to family income&#10;                print(f&quot;Your spouse has a job that adds ${spouse_income}/year to your family income.&quot;)&#10;                print(f&quot;Your combined family income is now ${self.player.salary}/year.&quot;)&#10;            else:&#10;                print(&quot;Your spouse doesn't currently have a job.&quot;)&#10;&#10;            # Ask about children&#10;            child_choice = self.get_choice(&quot;Would you like to have children?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;&#10;            if child_choice == &quot;Yes&quot;:&#10;                num_children = random.randint(1, 3)  # Random number of children&#10;&#10;                for i in range(num_children):&#10;                    child_name = f&quot;Child {i+1}&quot;  # Placeholder name&#10;                    child_age = 0  # Newborn&#10;                    self.player.family.append({&quot;relation&quot;: &quot;Child&quot;, &quot;name&quot;: child_name, &quot;age&quot;: child_age})&#10;&#10;                print(f&quot;\nCongratulations! You now have {num_children} {'child' if num_children == 1 else 'children'}.&quot;)&#10;                print(&quot;Having children will increase your monthly expenses.&quot;)&#10;&#10;                # Adjust expenses for children&#10;                print(&quot;\nYour monthly expenses have increased to account for your growing family.&quot;)&#10;&#10;        else:&#10;            print(&quot;\nYou've decided not to start a family at this time.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def display_status(self):&#10;        &quot;&quot;&quot;Display the player's current status (text mode).&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(f&quot;MONTH: {self.current_month}/YEAR: {self.current_year + 2023}&quot;)&#10;        print(f&quot;AGE: {self.player.age}&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nName: {self.player.name}&quot;)&#10;        print(f&quot;Education: {self.player.education}&quot;)&#10;        print(f&quot;Job: {self.player.job if self.player.job else 'Unemployed'}&quot;)&#10;        if self.player.job:&#10;            print(f&quot;Salary: ${self.player.salary}/year (${self.player.salary/12:.2f}/month)&quot;)&#10;&#10;        print(f&quot;\nCash: ${self.player.cash:.2f}&quot;)&#10;&#10;        if self.player.bank_account:&#10;            print(f&quot;Bank Account ({self.player.bank_account.account_type}): ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        if self.player.credit_card:&#10;            print(f&quot;Credit Card: ${self.player.credit_card.balance:.2f}/{self.player.credit_card.limit:.2f}&quot;)&#10;&#10;        print(f&quot;Credit Score: {self.player.credit_score}&quot;)&#10;&#10;        if self.player.loans:&#10;            print(&quot;\n--- LOANS ---&quot;)&#10;            for loan in self.player.loans:&#10;                print(f&quot;{loan.loan_type}: ${loan.current_balance:.2f} remaining (${loan.monthly_payment:.2f}/month)&quot;)&#10;&#10;        if self.player.assets:&#10;            print(&quot;\n--- ASSETS ---&quot;)&#10;            for asset in self.player.assets:&#10;                print(f&quot;{asset.name}: ${asset.current_value:.2f} ({asset.condition} condition)&quot;)&#10;&#10;        if self.player.family:&#10;            print(&quot;\n--- FAMILY ---&quot;)&#10;            for member in self.player.family:&#10;                if member[&quot;relation&quot;] == &quot;Spouse&quot;:&#10;                    print(f&quot;Spouse: Age {member['age'] + self.current_year}&quot;)&#10;                else:&#10;                    print(f&quot;{member['relation']}: {member['name']}, Age {member['age'] + self.current_year}&quot;)&#10;&#10;        # Calculate and display net worth&#10;        cash = self.player.cash&#10;        bank_balance = self.player.bank_account.balance if self.player.bank_account else 0&#10;        credit_card_debt = self.player.credit_card.balance if self.player.credit_card else 0&#10;&#10;        loan_debt = 0&#10;        for loan in self.player.loans:&#10;            loan_debt += loan.current_balance&#10;&#10;        asset_value = 0&#10;        for asset in self.player.assets:&#10;            asset_value += asset.current_value&#10;&#10;        net_worth = cash + bank_balance - credit_card_debt - loan_debt + asset_value&#10;&#10;        print(f&quot;\nNET WORTH: ${net_worth:.2f}&quot;)&#10;&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;&#10;    def get_player_action(self):&#10;        &quot;&quot;&quot;Get the player's next action (text mode).&quot;&quot;&quot;&#10;        actions = [&quot;Continue to next month&quot;]&#10;&#10;        # Banking actions&#10;        if not self.player.bank_account:&#10;            actions.append(&quot;Open a bank account&quot;)&#10;        else:&#10;            actions.append(&quot;View bank account&quot;)&#10;            actions.append(&quot;Deposit to bank&quot;)&#10;            actions.append(&quot;Withdraw from bank&quot;)&#10;&#10;            if not self.player.debit_card:&#10;                actions.append(&quot;Get a debit card&quot;)&#10;&#10;        # Credit actions&#10;        if not self.player.credit_card and self.player.age &gt;= 18:&#10;            actions.append(&quot;Apply for a credit card&quot;)&#10;        elif self.player.credit_card:&#10;            actions.append(&quot;View credit card&quot;)&#10;            if self.player.credit_card.balance &gt; 0:&#10;                actions.append(&quot;Pay credit card&quot;)&#10;&#10;        # Loan actions&#10;        if self.player.loans:&#10;            actions.append(&quot;View loans&quot;)&#10;            actions.append(&quot;Make extra loan payment&quot;)&#10;&#10;        # Asset actions&#10;        if self.player.assets:&#10;            actions.append(&quot;View assets&quot;)&#10;&#10;        # Job actions&#10;        if not self.player.job and self.player.age &gt;= 16:&#10;            actions.append(&quot;Look for a job&quot;)&#10;        elif self.player.job and random.random() &lt; 0.1:  # 10% chance of job opportunity each month&#10;            actions.append(&quot;Look for a better job&quot;)&#10;&#10;        # Display actions&#10;        print(&quot;\nWhat would you like to do?&quot;)&#10;        for i, action in enumerate(actions):&#10;            print(f&quot;{i+1}. {action}&quot;)&#10;&#10;        # Get player choice&#10;        choice = 0&#10;        while choice &lt; 1 or choice &gt; len(actions):&#10;            try:&#10;                choice = int(input(f&quot;\nEnter your choice (1-{len(actions)}): &quot;))&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        action = actions[choice-1]&#10;&#10;        # Process action&#10;        if action == &quot;Continue to next month&quot;:&#10;            return&#10;        elif action == &quot;Open a bank account&quot;:&#10;            self.open_bank_account()&#10;        elif action == &quot;View bank account&quot;:&#10;            self.view_bank_account()&#10;        elif action == &quot;Deposit to bank&quot;:&#10;            self.deposit_to_bank()&#10;        elif action == &quot;Withdraw from bank&quot;:&#10;            self.withdraw_from_bank()&#10;        elif action == &quot;Get a debit card&quot;:&#10;            self.get_debit_card()&#10;        elif action == &quot;Apply for a credit card&quot;:&#10;            self.apply_for_credit_card()&#10;        elif action == &quot;View credit card&quot;:&#10;            self.view_credit_card()&#10;        elif action == &quot;Pay credit card&quot;:&#10;            self.pay_credit_card()&#10;        elif action == &quot;View loans&quot;:&#10;            self.view_loans()&#10;        elif action == &quot;Make extra loan payment&quot;:&#10;            self.make_extra_loan_payment()&#10;        elif action == &quot;View assets&quot;:&#10;            self.view_assets()&#10;        elif action == &quot;Look for a job&quot; or action == &quot;Look for a better job&quot;:&#10;            self.look_for_job()&#10;&#10;        # After action, show status again and get another action&#10;        self.display_status()&#10;        self.get_player_action()&#10;&#10;    def open_bank_account(self):&#10;        &quot;&quot;&quot;Open a bank account.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;OPEN A BANK ACCOUNT&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(&quot;\nYou can open a checking account for everyday transactions&quot;)&#10;        print(&quot;or a savings account that earns interest.&quot;)&#10;&#10;        account_type = self.get_choice(&quot;What type of account would you like to open?&quot;, [&quot;Checking&quot;, &quot;Savings&quot;])&#10;&#10;        self.player.bank_account = BankAccount(account_type)&#10;&#10;        print(f&quot;\nCongratulations! You've opened a {account_type} account.&quot;)&#10;&#10;        if account_type == &quot;Savings&quot;:&#10;            print(f&quot;Your account will earn {self.player.bank_account.interest_rate*100:.1f}% interest annually.&quot;)&#10;&#10;        # Initial deposit&#10;        deposit = 0&#10;        while deposit &lt;= 0:&#10;            try:&#10;                deposit = float(input(&quot;\nHow much would you like to deposit initially? $&quot;))&#10;                if deposit &lt;= 0:&#10;                    print(&quot;Please enter a positive amount.&quot;)&#10;                elif deposit &gt; self.player.cash:&#10;                    print(&quot;You don't have that much cash.&quot;)&#10;                    deposit = 0&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        self.player.cash -= deposit&#10;        self.player.bank_account.deposit(deposit)&#10;&#10;        print(f&quot;\nYou've deposited ${deposit:.2f} into your new account.&quot;)&#10;        print(f&quot;Your account balance is ${self.player.bank_account.balance:.2f}.&quot;)&#10;&#10;        # Offer debit card&#10;        if account_type == &quot;Checking&quot;:&#10;            choice = self.get_choice(&quot;Would you like a debit card with your account?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;            if choice == &quot;Yes&quot;:&#10;                self.player.debit_card = Card(&quot;Debit&quot;)&#10;                print(&quot;\nYou now have a debit card linked to your checking account.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def view_bank_account(self):&#10;        &quot;&quot;&quot;View bank account details.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;BANK ACCOUNT DETAILS&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nAccount Type: {self.player.bank_account.account_type}&quot;)&#10;        print(f&quot;Current Balance: ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        if self.player.bank_account.account_type == &quot;Savings&quot;:&#10;            print(f&quot;Interest Rate: {self.player.bank_account.interest_rate*100:.1f}% annually&quot;)&#10;            annual_interest = self.player.bank_account.balance * self.player.bank_account.interest_rate&#10;            print(f&quot;Projected Annual Interest: ${annual_interest:.2f}&quot;)&#10;&#10;        if self.player.debit_card:&#10;            print(&quot;\nYou have a debit card linked to this account.&quot;)&#10;&#10;        # Show recent transactions&#10;        if self.player.bank_account.transaction_history:&#10;            print(&quot;\nRecent Transactions:&quot;)&#10;            for i, transaction in enumerate(reversed(self.player.bank_account.transaction_history[-5:])):&#10;                if transaction[&quot;type&quot;] == &quot;deposit&quot;:&#10;                    print(f&quot;  Deposit: +${transaction['amount']:.2f}&quot;)&#10;                elif transaction[&quot;type&quot;] == &quot;withdrawal&quot;:&#10;                    print(f&quot;  Withdrawal: -${transaction['amount']:.2f}&quot;)&#10;                elif transaction[&quot;type&quot;] == &quot;interest&quot;:&#10;                    print(f&quot;  Interest: +${transaction['amount']:.2f}&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def deposit_to_bank(self):&#10;        &quot;&quot;&quot;Deposit money to bank account.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;DEPOSIT TO BANK&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nYour current cash: ${self.player.cash:.2f}&quot;)&#10;        print(f&quot;Your current bank balance: ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        deposit = 0&#10;        while deposit &lt;= 0:&#10;            try:&#10;                deposit = float(input(&quot;\nHow much would you like to deposit? $&quot;))&#10;                if deposit &lt;= 0:&#10;                    print(&quot;Please enter a positive amount.&quot;)&#10;                elif deposit &gt; self.player.cash:&#10;                    print(&quot;You don't have that much cash.&quot;)&#10;                    deposit = 0&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        self.player.cash -= deposit&#10;        self.player.bank_account.deposit(deposit)&#10;&#10;        print(f&quot;\nYou've deposited ${deposit:.2f} into your account.&quot;)&#10;        print(f&quot;Your new account balance is ${self.player.bank_account.balance:.2f}.&quot;)&#10;        print(f&quot;Your remaining cash is ${self.player.cash:.2f}.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def withdraw_from_bank(self):&#10;        &quot;&quot;&quot;Withdraw money from bank account.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;WITHDRAW FROM BANK&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nYour current cash: ${self.player.cash:.2f}&quot;)&#10;        print(f&quot;Your current bank balance: ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        withdrawal = 0&#10;        while withdrawal &lt;= 0:&#10;            try:&#10;                withdrawal = float(input(&quot;\nHow much would you like to withdraw? $&quot;))&#10;                if withdrawal &lt;= 0:&#10;                    print(&quot;Please enter a positive amount.&quot;)&#10;                elif withdrawal &gt; self.player.bank_account.balance:&#10;                    print(&quot;You don't have that much in your account.&quot;)&#10;                    withdrawal = 0&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        self.player.bank_account.withdraw(withdrawal)&#10;        self.player.cash += withdrawal&#10;&#10;        print(f&quot;\nYou've withdrawn ${withdrawal:.2f} from your account.&quot;)&#10;        print(f&quot;Your new account balance is ${self.player.bank_account.balance:.2f}.&quot;)&#10;        print(f&quot;Your cash is now ${self.player.cash:.2f}.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def get_debit_card(self):&#10;        &quot;&quot;&quot;Get a debit card for the bank account.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;GET A DEBIT CARD&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(&quot;\nA debit card allows you to make purchases directly from your checking account.&quot;)&#10;        print(&quot;There is no fee for this card.&quot;)&#10;&#10;        self.player.debit_card = Card(&quot;Debit&quot;)&#10;&#10;        print(&quot;\nYou now have a debit card linked to your checking account.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def apply_for_credit_card(self):&#10;        &quot;&quot;&quot;Apply for a credit card.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;APPLY FOR A CREDIT CARD&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(&quot;\nA credit card allows you to make purchases on credit.&quot;)&#10;        print(&quot;You'll need to make monthly payments, and interest will be charged on unpaid balances.&quot;)&#10;        print(&quot;Your credit limit will be based on your credit score and income.&quot;)&#10;&#10;        # Check eligibility&#10;        if self.player.age &lt; 18:&#10;            print(&quot;\nSorry, you must be at least 18 years old to apply for a credit card.&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        if not self.player.job:&#10;            print(&quot;\nSorry, you need to have a job to apply for a credit card.&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        # Determine credit limit based on credit score and income&#10;        base_limit = self.player.salary * 0.2  # 20% of annual income&#10;&#10;        if self.player.credit_score &gt;= 750:&#10;            limit_multiplier = 1.5  # Excellent credit&#10;        elif self.player.credit_score &gt;= 700:&#10;            limit_multiplier = 1.2  # Good credit&#10;        elif self.player.credit_score &gt;= 650:&#10;            limit_multiplier = 1.0  # Fair credit&#10;        elif self.player.credit_score &gt;= 600:&#10;            limit_multiplier = 0.8  # Poor credit&#10;        else:&#10;            limit_multiplier = 0.5  # Bad credit&#10;&#10;        credit_limit = base_limit * limit_multiplier&#10;&#10;        # Round to nearest $100&#10;        credit_limit = round(credit_limit / 100) * 100&#10;&#10;        # Minimum $500, maximum $50,000&#10;        credit_limit = max(500, min(50000, credit_limit))&#10;&#10;        print(f&quot;\nBased on your credit score of {self.player.credit_score} and income of ${self.player.salary}/year,&quot;)&#10;        print(f&quot;you qualify for a credit card with a limit of ${credit_limit:.2f}.&quot;)&#10;&#10;        choice = self.get_choice(&quot;Would you like to accept this credit card offer?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;&#10;        if choice == &quot;Yes&quot;:&#10;            self.player.credit_card = Card(&quot;Credit&quot;, credit_limit)&#10;            print(&quot;\nCongratulations! You now have a credit card.&quot;)&#10;            print(f&quot;Your credit limit is ${self.player.credit_card.limit:.2f}.&quot;)&#10;            print(&quot;Remember to make your payments on time to maintain a good credit score.&quot;)&#10;        else:&#10;            print(&quot;\nYou've declined the credit card offer.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def view_credit_card(self):&#10;        &quot;&quot;&quot;View credit card details.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;CREDIT CARD DETAILS&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nCredit Limit: ${self.player.credit_card.limit:.2f}&quot;)&#10;        print(f&quot;Current Balance: ${self.player.credit_card.balance:.2f}&quot;)&#10;        print(f&quot;Available Credit: ${self.player.credit_card.limit - self.player.credit_card.balance:.2f}&quot;)&#10;&#10;        # Calculate minimum payment&#10;        min_payment = max(25, self.player.credit_card.balance * 0.05)  # Minimum $25 or 5% of balance&#10;&#10;        if self.player.credit_card.balance &gt; 0:&#10;            print(f&quot;\nMinimum Payment Due: ${min_payment:.2f}&quot;)&#10;            print(&quot;Interest Rate: 18% APR on unpaid balances&quot;)&#10;&#10;            # Show interest that would be charged&#10;            monthly_interest = self.player.credit_card.balance * 0.18 / 12&#10;            print(f&quot;Interest This Month (if unpaid): ${monthly_interest:.2f}&quot;)&#10;&#10;        # Show recent transactions&#10;        if self.player.credit_card.transaction_history:&#10;            print(&quot;\nRecent Transactions:&quot;)&#10;            for i, transaction in enumerate(reversed(self.player.credit_card.transaction_history[-5:])):&#10;                if transaction[&quot;type&quot;] == &quot;charge&quot;:&#10;                    print(f&quot;  Charge: +${transaction['amount']:.2f}&quot;)&#10;                elif transaction[&quot;type&quot;] == &quot;payment&quot;:&#10;                    print(f&quot;  Payment: -${transaction['amount']:.2f}&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def pay_credit_card(self):&#10;        &quot;&quot;&quot;Make a payment on the credit card.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;PAY CREDIT CARD&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nCurrent Credit Card Balance: ${self.player.credit_card.balance:.2f}&quot;)&#10;&#10;        # Calculate minimum payment&#10;        min_payment = max(25, self.player.credit_card.balance * 0.05)  # Minimum $25 or 5% of balance&#10;&#10;        print(f&quot;Minimum Payment Due: ${min_payment:.2f}&quot;)&#10;        print(f&quot;Your Cash: ${self.player.cash:.2f}&quot;)&#10;&#10;        if self.player.bank_account:&#10;            print(f&quot;Your Bank Balance: ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        # Payment options&#10;        payment_options = [&quot;Minimum Payment&quot;, &quot;Full Balance&quot;]&#10;        if min_payment &lt; self.player.credit_card.balance:&#10;            payment_options.insert(1, &quot;Custom Amount&quot;)&#10;&#10;        payment_choice = self.get_choice(&quot;How much would you like to pay?&quot;, payment_options)&#10;&#10;        if payment_choice == &quot;Minimum Payment&quot;:&#10;            payment_amount = min_payment&#10;        elif payment_choice == &quot;Full Balance&quot;:&#10;            payment_amount = self.player.credit_card.balance&#10;        else:  # Custom Amount&#10;            payment_amount = 0&#10;            while payment_amount &lt; min_payment or payment_amount &gt; self.player.credit_card.balance:&#10;                try:&#10;                    payment_amount = float(input(f&quot;\nEnter payment amount (minimum ${min_payment:.2f}): $&quot;))&#10;                    if payment_amount &lt; min_payment:&#10;                        print(f&quot;Payment must be at least the minimum payment of ${min_payment:.2f}.&quot;)&#10;                    elif payment_amount &gt; self.player.credit_card.balance:&#10;                        print(f&quot;Payment cannot exceed your balance of ${self.player.credit_card.balance:.2f}.&quot;)&#10;                except ValueError:&#10;                    print(&quot;Please enter a valid number.&quot;)&#10;&#10;        # Payment method&#10;        payment_methods = []&#10;        if self.player.cash &gt;= payment_amount:&#10;            payment_methods.append(&quot;Cash&quot;)&#10;        if self.player.bank_account and self.player.bank_account.balance &gt;= payment_amount:&#10;            payment_methods.append(&quot;Bank Account&quot;)&#10;&#10;        if not payment_methods:&#10;            print(&quot;\nYou don't have enough money to make this payment.&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        payment_method = self.get_choice(&quot;How would you like to pay?&quot;, payment_methods)&#10;&#10;        # Process payment&#10;        if payment_method == &quot;Cash&quot;:&#10;            self.player.cash -= payment_amount&#10;            self.player.credit_card.pay(payment_amount)&#10;            print(f&quot;\nYou paid ${payment_amount:.2f} from your cash.&quot;)&#10;        else:  # Bank Account&#10;            self.player.bank_account.withdraw(payment_amount)&#10;            self.player.credit_card.pay(payment_amount)&#10;            print(f&quot;\nYou paid ${payment_amount:.2f} from your bank account.&quot;)&#10;&#10;        print(f&quot;Your new credit card balance is ${self.player.credit_card.balance:.2f}.&quot;)&#10;&#10;        # Credit score improvement for on-time payments&#10;        if payment_amount &gt;= min_payment:&#10;            score_increase = min(5, 850 - self.player.credit_score)  # Cap at 850&#10;            if score_increase &gt; 0:&#10;                self.player.credit_score += score_increase&#10;                print(f&quot;\nYour on-time payment has improved your credit score by {score_increase} points.&quot;)&#10;                print(f&quot;Your credit score is now {self.player.credit_score}.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def view_loans(self):&#10;        &quot;&quot;&quot;View loan details.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LOAN DETAILS&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        for i, loan in enumerate(self.player.loans):&#10;            print(f&quot;\nLoan {i+1}: {loan.loan_type}&quot;)&#10;            print(f&quot;Original Amount: ${loan.original_amount:.2f}&quot;)&#10;            print(f&quot;Current Balance: ${loan.current_balance:.2f}&quot;)&#10;            print(f&quot;Interest Rate: {loan.interest_rate*100:.2f}%&quot;)&#10;            print(f&quot;Term: {loan.term_years} years&quot;)&#10;            print(f&quot;Monthly Payment: ${loan.monthly_payment:.2f}&quot;)&#10;&#10;            # Calculate payoff date&#10;            remaining_payments = loan.current_balance / loan.monthly_payment&#10;            remaining_months = int(remaining_payments)&#10;            remaining_years = remaining_months // 12&#10;            remaining_months %= 12&#10;&#10;            print(f&quot;Estimated Payoff: {remaining_years} years and {remaining_months} months&quot;)&#10;&#10;            # Calculate total interest to be paid&#10;            total_payments = loan.monthly_payment * remaining_payments&#10;            total_interest = total_payments - loan.current_balance&#10;&#10;            print(f&quot;Remaining Interest to be Paid: ${total_interest:.2f}&quot;)&#10;&#10;            if i &lt; len(self.player.loans) - 1:&#10;                print(&quot;\n&quot; + &quot;-&quot; * 40)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def make_extra_loan_payment(self):&#10;        &quot;&quot;&quot;Make an extra payment on a loan.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;MAKE EXTRA LOAN PAYMENT&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(&quot;\nMaking extra payments on your loans can help you pay them off faster&quot;)&#10;        print(&quot;and save money on interest.&quot;)&#10;&#10;        # Select loan&#10;        if len(self.player.loans) &gt; 1:&#10;            print(&quot;\nWhich loan would you like to make an extra payment on?&quot;)&#10;            for i, loan in enumerate(self.player.loans):&#10;                print(f&quot;{i+1}. {loan.loan_type} - ${loan.current_balance:.2f} remaining&quot;)&#10;&#10;            loan_choice = 0&#10;            while loan_choice &lt; 1 or loan_choice &gt; len(self.player.loans):&#10;                try:&#10;                    loan_choice = int(input(f&quot;\nEnter your choice (1-{len(self.player.loans)}): &quot;))&#10;                except ValueError:&#10;                    print(&quot;Please enter a valid number.&quot;)&#10;&#10;            selected_loan = self.player.loans[loan_choice-1]&#10;        else:&#10;            selected_loan = self.player.loans[0]&#10;&#10;        print(f&quot;\nSelected Loan: {selected_loan.loan_type}&quot;)&#10;        print(f&quot;Current Balance: ${selected_loan.current_balance:.2f}&quot;)&#10;        print(f&quot;Interest Rate: {selected_loan.interest_rate*100:.2f}%&quot;)&#10;        print(f&quot;Regular Monthly Payment: ${selected_loan.monthly_payment:.2f}&quot;)&#10;&#10;        print(f&quot;\nYour Cash: ${self.player.cash:.2f}&quot;)&#10;        if self.player.bank_account:&#10;            print(f&quot;Your Bank Balance: ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        # Enter payment amount&#10;        payment_amount = 0&#10;        while payment_amount &lt;= 0:&#10;            try:&#10;                payment_amount = float(input(&quot;\nHow much extra would you like to pay? $&quot;))&#10;                if payment_amount &lt;= 0:&#10;                    print(&quot;Please enter a positive amount.&quot;)&#10;                elif payment_amount &gt; selected_loan.current_balance:&#10;                    print(f&quot;Payment cannot exceed your loan balance of ${selected_loan.current_balance:.2f}.&quot;)&#10;                    payment_amount = 0&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        # Payment method&#10;        payment_methods = []&#10;        if self.player.cash &gt;= payment_amount:&#10;            payment_methods.append(&quot;Cash&quot;)&#10;        if self.player.bank_account and self.player.bank_account.balance &gt;= payment_amount:&#10;            payment_methods.append(&quot;Bank Account&quot;)&#10;&#10;        if not payment_methods:&#10;            print(&quot;\nYou don't have enough money to make this payment.&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        payment_method = self.get_choice(&quot;How would you like to pay?&quot;, payment_methods)&#10;&#10;        # Process payment&#10;        if payment_method == &quot;Cash&quot;:&#10;            self.player.cash -= payment_amount&#10;            selected_loan.make_payment(payment_amount)&#10;            print(f&quot;\nYou paid ${payment_amount:.2f} from your cash.&quot;)&#10;        else:  # Bank Account&#10;            self.player.bank_account.withdraw(payment_amount)&#10;            selected_loan.make_payment(payment_amount)&#10;            print(f&quot;\nYou paid ${payment_amount:.2f} from your bank account.&quot;)&#10;&#10;        print(f&quot;Your new loan balance is ${selected_loan.current_balance:.2f}.&quot;)&#10;&#10;        # Recalculate payoff date&#10;        if selected_loan.current_balance &gt; 0:&#10;            remaining_payments = selected_loan.current_balance / selected_loan.monthly_payment&#10;            remaining_months = int(remaining_payments)&#10;            remaining_years = remaining_months // 12&#10;            remaining_months %= 12&#10;&#10;            print(f&quot;\nYour extra payment has shortened your loan term!&quot;)&#10;            print(f&quot;New Estimated Payoff: {remaining_years} years and {remaining_months} months&quot;)&#10;&#10;            # Calculate interest savings&#10;            original_total = selected_loan.monthly_payment * (selected_loan.term_years * 12)&#10;            new_total = selected_loan.monthly_payment * remaining_payments + payment_amount&#10;            savings = original_total - new_total&#10;&#10;            print(f&quot;You'll save approximately ${savings:.2f} in interest over the life of the loan.&quot;)&#10;        else:&#10;            print(&quot;\nCongratulations! You've paid off this loan completely!&quot;)&#10;&#10;            # Remove the loan from the player's loans&#10;            self.player.loans.remove(selected_loan)&#10;&#10;            # Credit score improvement for paying off a loan&#10;            score_increase = min(20, 850 - self.player.credit_score)  # Cap at 850&#10;            if score_increase &gt; 0:&#10;                self.player.credit_score += score_increase&#10;                print(f&quot;\nPaying off your loan has improved your credit score by {score_increase} points.&quot;)&#10;                print(f&quot;Your credit score is now {self.player.credit_score}.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def view_assets(self):&#10;        &quot;&quot;&quot;View asset details.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;ASSET DETAILS&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        for i, asset in enumerate(self.player.assets):&#10;            print(f&quot;\nAsset {i+1}: {asset.name}&quot;)&#10;            print(f&quot;Type: {asset.asset_type}&quot;)&#10;            print(f&quot;Purchase Value: ${asset.purchase_value:.2f}&quot;)&#10;            print(f&quot;Current Value: ${asset.current_value:.2f}&quot;)&#10;            print(f&quot;Condition: {asset.condition}&quot;)&#10;            print(f&quot;Age: {asset.age} years&quot;)&#10;&#10;            # Value change&#10;            value_change = asset.current_value - asset.purchase_value&#10;            value_change_percent = (value_change / asset.purchase_value) * 100&#10;&#10;            if value_change &gt;= 0:&#10;                print(f&quot;Appreciation: ${value_change:.2f} ({value_change_percent:.1f}%)&quot;)&#10;            else:&#10;                print(f&quot;Depreciation: ${abs(value_change):.2f} ({abs(value_change_percent):.1f}%)&quot;)&#10;&#10;            if i &lt; len(self.player.assets) - 1:&#10;                print(&quot;\n&quot; + &quot;-&quot; * 40)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def look_for_job(self):&#10;        &quot;&quot;&quot;Look for a job or a better job.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;JOB SEARCH&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        current_salary = self.player.salary if self.player.job else 0&#10;&#10;        print(f&quot;\nCurrent Job: {self.player.job if self.player.job else 'Unemployed'}&quot;)&#10;        if self.player.job:&#10;            print(f&quot;Current Salary: ${current_salary}/year&quot;)&#10;&#10;        # Generate job options based on education and experience&#10;        job_options = []&#10;&#10;        # Base salary multiplier based on years of experience&#10;        experience_years = max(0, self.player.age - 18)  # Assume working age starts at 18&#10;        experience_multiplier = 1.0 + (experience_years * 0.03)  # 3% increase per year of experience&#10;&#10;        if self.player.education == &quot;High School&quot; or self.player.education == &quot;High School Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Retail Associate&quot;, &quot;salary&quot;: int(25000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Food Service Worker&quot;, &quot;salary&quot;: int(22000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Warehouse Worker&quot;, &quot;salary&quot;: int(28000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Office Clerk&quot;, &quot;salary&quot;: int(30000 * experience_multiplier)},&#10;            ]&#10;        elif self.player.education == &quot;Trade School&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Electrician&quot;, &quot;salary&quot;: int(45000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Plumber&quot;, &quot;salary&quot;: int(48000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;HVAC Technician&quot;, &quot;salary&quot;: int(50000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Automotive Mechanic&quot;, &quot;salary&quot;: int(42000 * experience_multiplier)},&#10;            ]&#10;        elif self.player.education == &quot;College Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Accountant&quot;, &quot;salary&quot;: int(60000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Marketing Manager&quot;, &quot;salary&quot;: int(65000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Software Developer&quot;, &quot;salary&quot;: int(75000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Financial Analyst&quot;, &quot;salary&quot;: int(70000 * experience_multiplier)},&#10;            ]&#10;        else:  # Default/basic jobs&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Retail Associate&quot;, &quot;salary&quot;: int(25000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Food Service Worker&quot;, &quot;salary&quot;: int(22000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Warehouse Worker&quot;, &quot;salary&quot;: int(28000 * experience_multiplier)},&#10;            ]&#10;&#10;        # Add some randomness to salaries (±10%)&#10;        for job in job_options:&#10;            job[&quot;salary&quot;] = int(job[&quot;salary&quot;] * random.uniform(0.9, 1.1))&#10;&#10;        # Filter out jobs that don't offer at least 5% more than current salary (if employed)&#10;        if self.player.job:&#10;            job_options = [job for job in job_options if job[&quot;salary&quot;] &gt;= current_salary * 1.05]&#10;&#10;        # If no jobs available after filtering&#10;        if not job_options:&#10;            print(&quot;\nAfter searching, you couldn't find any jobs that would be a significant&quot;)&#10;            print(&quot;improvement over your current position. Keep building your skills and&quot;)&#10;            print(&quot;try again later!&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        # Display job options&#10;        print(&quot;\nThe following job opportunities are available to you:&quot;)&#10;        for i, job in enumerate(job_options):&#10;            print(f&quot;{i+1}. {job['title']} - ${job['salary']}/year&quot;)&#10;&#10;        print(&quot;\n0. Cancel job search&quot;)&#10;&#10;        # Get player choice&#10;        choice = -1&#10;        while choice &lt; 0 or choice &gt; len(job_options):&#10;            try:&#10;                choice = int(input(f&quot;\nWhich job would you like to apply for? (0-{len(job_options)}): &quot;))&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        if choice == 0:&#10;            print(&quot;\nYou've decided not to change jobs at this time.&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        # Apply for job&#10;        selected_job = job_options[choice-1]&#10;&#10;        # Job application success chance based on qualifications&#10;        base_success_chance = 0.7  # 70% base chance&#10;&#10;        # Adjust for education&#10;        if self.player.education == &quot;College Graduate&quot;:&#10;            base_success_chance += 0.2&#10;        elif self.player.education == &quot;Trade School&quot;:&#10;            base_success_chance += 0.1&#10;&#10;        # Adjust for experience&#10;        base_success_chance += min(0.2, experience_years * 0.01)  # Up to 20% bonus for experience&#10;&#10;        # Cap at 95% chance&#10;        success_chance = min(0.95, base_success_chance)&#10;&#10;        print(f&quot;\nYou've applied for the {selected_job['title']} position.&quot;)&#10;        print(&quot;The hiring manager is reviewing your application...&quot;)&#10;        time.sleep(2)  # Dramatic pause&#10;&#10;        if random.random() &lt; success_chance:&#10;            print(&quot;\nCongratulations! You got the job!&quot;)&#10;&#10;            old_job = self.player.job&#10;            old_salary = self.player.salary&#10;&#10;            self.player.job = selected_job[&quot;title&quot;]&#10;            self.player.salary = selected_job[&quot;salary&quot;]&#10;&#10;            print(f&quot;\nYou are now a {self.player.job} earning ${self.player.salary}/year.&quot;)&#10;&#10;            if old_job:&#10;                salary_increase = self.player.salary - old_salary&#10;                percent_increase = (salary_increase / old_salary) * 100&#10;                print(f&quot;That's a raise of ${salary_increase}/year ({percent_increase:.1f}%)!&quot;)&#10;&#10;            print(f&quot;Your monthly income is now ${self.player.salary/12:.2f}.&quot;)&#10;        else:&#10;            print(&quot;\nUnfortunately, the company decided to go with another candidate.&quot;)&#10;            print(&quot;Don't be discouraged! Keep improving your skills and try again.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def clear_screen(self):&#10;        &quot;&quot;&quot;Clear the console screen.&quot;&quot;&quot;&#10;        os.system('cls' if os.name == 'nt' else 'clear')&#10;&#10;    def get_choice(self, prompt, choices):&#10;        &quot;&quot;&quot;Get a choice from the player from a list of options.&quot;&quot;&quot;&#10;        print(f&quot;\n{prompt}&quot;)&#10;        for i, choice in enumerate(choices):&#10;            print(f&quot;{i+1}. {choice}&quot;)&#10;&#10;        selection = 0&#10;        while selection &lt; 1 or selection &gt; len(choices):&#10;            try:&#10;                selection = int(input(f&quot;\nEnter your choice (1-{len(choices)}): &quot;))&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        return choices[selection-1]&#10;&#10;    def end_game(self, reason):&#10;        &quot;&quot;&quot;End the game and show final stats (text version).&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;&#10;        if reason == &quot;retirement&quot;:&#10;            print(&quot;CONGRATULATIONS ON YOUR RETIREMENT!&quot;)&#10;            print(&quot;=&quot; * 60)&#10;            print(f&quot;\nAfter {self.current_year} years, you've reached retirement age!&quot;)&#10;        else:&#10;            print(&quot;GAME OVER&quot;)&#10;            print(&quot;=&quot; * 60)&#10;            print(f&quot;\nYour financial journey has ended after {self.current_year} years.&quot;)&#10;&#10;        # Calculate net worth&#10;        cash = self.player.cash&#10;        bank_balance = self.player.bank_account.balance if self.player.bank_account else 0&#10;        credit_card_debt = self.player.credit_card.balance if self.player.credit_card else 0&#10;&#10;        loan_debt = 0&#10;        for loan in self.player.loans:&#10;            loan_debt += loan.current_balance&#10;&#10;        asset_value = 0&#10;        for asset in self.player.assets:&#10;            asset_value += asset.current_value&#10;&#10;        net_worth = cash + bank_balance - credit_card_debt - loan_debt + asset_value&#10;&#10;        # Display final stats&#10;        print(&quot;\n--- FINAL FINANCIAL SUMMARY ---&quot;)&#10;        print(f&quot;Cash: ${cash:.2f}&quot;)&#10;        print(f&quot;Bank Balance: ${bank_balance:.2f}&quot;)&#10;        print(f&quot;Credit Card Debt: ${credit_card_debt:.2f}&quot;)&#10;        print(f&quot;Loan Debt: ${loan_debt:.2f}&quot;)&#10;        print(f&quot;Asset Value: ${asset_value:.2f}&quot;)&#10;        print(f&quot;Net Worth: ${net_worth:.2f}&quot;)&#10;        print(f&quot;Credit Score: {self.player.credit_score}&quot;)&#10;&#10;        # Family summary&#10;        if self.player.family:&#10;            print(&quot;\n--- FAMILY ---&quot;)&#10;            for member in self.player.family:&#10;                if member[&quot;relation&quot;] == &quot;Spouse&quot;:&#10;                    print(f&quot;Spouse: Age {member['age'] + self.current_year}&quot;)&#10;                else:&#10;                    print(f&quot;{member['relation']}: {member['name']}, Age {member['age'] + self.current_year}&quot;)&#10;&#10;        # Financial rating&#10;        if net_worth &gt;= 1000000:&#10;            rating = &quot;Financial Wizard&quot;&#10;        elif net_worth &gt;= 500000:&#10;            rating = &quot;Financially Secure&quot;&#10;        elif net_worth &gt;= 100000:&#10;            rating = &quot;Financially Stable&quot;&#10;        elif net_worth &gt;= 0:&#10;            rating = &quot;Breaking Even&quot;&#10;        else:&#10;            rating = &quot;In Debt&quot;&#10;&#10;        print(f&quot;\nFinancial Rating: {rating}&quot;)&#10;&#10;        print(&quot;\nThank you for playing MONEY SMARTZ!&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        self.game_over = True&#10;        input(&quot;\nPress Enter to exit...&quot;)&#10;&#10;    def end_game_gui(self, reason):&#10;        &quot;&quot;&quot;End the game and show final stats (GUI version).&quot;&quot;&quot;&#10;        self.game_over = True&#10;        self.gui_manager.set_screen(EndGameScreen(self, reason))&#10;&#10;    def check_life_stage_events_gui(self):&#10;        &quot;&quot;&quot;Check for life stage events and show appropriate screens (GUI version).&quot;&quot;&quot;&#10;        # High school graduation&#10;        if self.player.age == 18 and self.player.education == &quot;High School&quot;:&#10;            from moneySmartz.screens.life_event_screens import HighSchoolGraduationScreen&#10;            self.gui_manager.set_screen(HighSchoolGraduationScreen(self))&#10;            return True&#10;&#10;        # College graduation (if went to college)&#10;        elif self.player.age == 22 and self.player.education == &quot;College (In Progress)&quot;:&#10;            from moneySmartz.screens.life_event_screens import CollegeGraduationScreen&#10;            self.gui_manager.set_screen(CollegeGraduationScreen(self))&#10;            return True&#10;&#10;        # First full-time job opportunity&#10;        elif self.player.age == 22 and not self.player.job and self.player.education != &quot;College (In Progress)&quot;:&#10;            from moneySmartz.screens.financial_screens import JobSearchScreen&#10;            self.gui_manager.set_screen(JobSearchScreen(self))&#10;            return True&#10;&#10;        # Car purchase opportunity&#10;        elif self.player.age == 20 and not any(a.asset_type == &quot;Car&quot; for a in self.player.assets):&#10;            from moneySmartz.screens.life_event_screens import CarPurchaseScreen&#10;            self.gui_manager.set_screen(CarPurchaseScreen(self))&#10;            return True&#10;&#10;        # House purchase opportunity&#10;        elif self.player.age == 30 and not any(a.asset_type == &quot;House&quot; for a in self.player.assets) and self.player.job:&#10;            self.gui_manager.set_screen(HousingScreen(self))&#10;            return True&#10;&#10;        # Family planning opportunity&#10;        elif self.player.age &gt;= 28 and not self.player.family and self.player.job:&#10;            if random.random() &lt; 0.1:  # 10% chance each year after 28&#10;                self.gui_manager.set_screen(FamilyPlanningScreen(self))&#10;                return True&#10;&#10;        return False&#10;&#10;    def pause_game(self):&#10;        &quot;&quot;&quot;Pause the game (for GUI mode).&quot;&quot;&quot;&#10;        self.paused = True&#10;&#10;    def play_game(self):&#10;        &quot;&quot;&quot;Resume the game from pause (for GUI mode).&quot;&quot;&quot;&#10;        self.paused = False&#10;&#10;    def save_state(self, filename=&quot;savegame.dat&quot;):&#10;        &quot;&quot;&quot;Save the current game state to a file.&quot;&quot;&quot;&#10;        import pickle&#10;        with open(filename, &quot;wb&quot;) as f:&#10;            pickle.dump(self, f)&#10;&#10;    def load_state(self, filename=&quot;savegame.dat&quot;):&#10;        &quot;&quot;&quot;Load the game state from a file.&quot;&quot;&quot;&#10;        import pickle&#10;        try:&#10;            with open(filename, &quot;rb&quot;) as f:&#10;                loaded_game = pickle.load(f)&#10;            # Copy loaded attributes to self&#10;            self.__dict__.update(loaded_game.__dict__)&#10;        except Exception as e:&#10;            print(f&quot;Error loading game: {e}&quot;)&#10;&#10;    def quit(self):&#10;        &quot;&quot;&quot;Quit the game (for GUI mode).&quot;&quot;&quot;&#10;        import sys&#10;        self.game_over = True&#10;        if self.gui_manager:&#10;            self.gui_manager.running = False&#10;        sys.exit()&#10;" />
              <option name="updatedContent" value="import random&#10;import time&#10;import os&#10;from moneySmartz.models import Player, BankAccount, Card, Loan, Asset&#10;from moneySmartz.screens.life_event_screens import HousingScreen, FamilyPlanningScreen&#10;from moneySmartz.screens.base_screens import EndGameScreen&#10;&#10;class Game:&#10;    &quot;&quot;&quot;&#10;    Main game class that manages the game state and logic.&#10;    &quot;&quot;&quot;&#10;    def __init__(self):&#10;        self.player = None&#10;        self.current_month = 1&#10;        self.current_year = 0&#10;        self.game_over = False&#10;        self.events = self.initialize_events()&#10;        self.gui_manager = None  # Will be set by the main script&#10;        self.paused = False  # Track the paused state&#10;&#10;    def initialize_events(self):&#10;        &quot;&quot;&quot;Initialize the random events that can occur during gameplay.&quot;&quot;&quot;&#10;        # Define possible random events&#10;        events = {&#10;            &quot;positive&quot;: [&#10;                {&quot;name&quot;: &quot;Tax Refund&quot;, &quot;description&quot;: &quot;You received a tax refund!&quot;, &quot;cash_effect&quot;: lambda: random.randint(100, 1000)},&#10;                {&quot;name&quot;: &quot;Birthday Gift&quot;, &quot;description&quot;: &quot;You received money as a birthday gift!&quot;, &quot;cash_effect&quot;: lambda: random.randint(20, 200)},&#10;                {&quot;name&quot;: &quot;Found Money&quot;, &quot;description&quot;: &quot;You found money on the ground!&quot;, &quot;cash_effect&quot;: lambda: random.randint(5, 50)},&#10;                {&quot;name&quot;: &quot;Bonus&quot;, &quot;description&quot;: &quot;You received a bonus at work!&quot;, &quot;cash_effect&quot;: lambda: int(self.player.salary * random.uniform(0.01, 0.1)) if self.player.salary &gt; 0 else 0},&#10;            ],&#10;            &quot;negative&quot;: [&#10;                {&quot;name&quot;: &quot;Car Repair&quot;, &quot;description&quot;: &quot;Your car needs repairs.&quot;, &quot;cash_effect&quot;: lambda: -random.randint(100, 2000) if any(a.asset_type == &quot;Car&quot; for a in self.player.assets) else 0},&#10;                {&quot;name&quot;: &quot;Medical Bill&quot;, &quot;description&quot;: &quot;You have unexpected medical expenses.&quot;, &quot;cash_effect&quot;: lambda: -random.randint(50, 5000)},&#10;                {&quot;name&quot;: &quot;Lost Wallet&quot;, &quot;description&quot;: &quot;You lost your wallet!&quot;, &quot;cash_effect&quot;: lambda: -min(50, self.player.cash)},&#10;                {&quot;name&quot;: &quot;Phone Repair&quot;, &quot;description&quot;: &quot;Your phone screen cracked.&quot;, &quot;cash_effect&quot;: lambda: -random.randint(50, 300)},&#10;            ]&#10;        }&#10;        return events&#10;&#10;    def start_game(self):&#10;        &quot;&quot;&quot;Start a new game in text mode (legacy).&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;WELCOME TO MONEY SMARTZ: THE FINANCIAL LIFE SIMULATOR&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nInspired by the classic Oregon Trail, this game will take you&quot;)&#10;        print(&quot;through the financial journey of life, from your first bank account&quot;)&#10;        print(&quot;to retirement, with all the ups and downs along the way.&quot;)&#10;        print(&quot;\nMake wise financial decisions and see how they affect your life!&quot;)&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;&#10;        name = input(&quot;\nEnter your name: &quot;)&#10;        self.player = Player(name)&#10;&#10;        print(f&quot;\nWelcome, {self.player.name}! You're a 16-year-old high school student.&quot;)&#10;        print(&quot;Your parents suggest that you should open your first bank account.&quot;)&#10;&#10;        choice = self.get_choice(&quot;Do you want to open a bank account?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;        if choice == &quot;Yes&quot;:&#10;            self.player.bank_account = BankAccount()&#10;            self.player.bank_account.deposit(50)  # Parents give you $50 to start&#10;            print(&quot;\nCongratulations! You've opened your first checking account.&quot;)&#10;            print(&quot;Your parents deposited $50 to get you started.&quot;)&#10;&#10;            choice = self.get_choice(&quot;Would you like a debit card with your account?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;            if choice == &quot;Yes&quot;:&#10;                self.player.debit_card = Card(&quot;Debit&quot;)&#10;                print(&quot;\nYou now have a debit card linked to your checking account.&quot;)&#10;        else:&#10;            print(&quot;\nYou decided not to open a bank account yet. You can do this later.&quot;)&#10;&#10;        input(&quot;\nPress Enter to begin your financial journey...&quot;)&#10;        self.game_loop()&#10;&#10;    def game_loop(self):&#10;        &quot;&quot;&quot;Main game loop for text mode (legacy).&quot;&quot;&quot;&#10;        while not self.game_over:&#10;            self.current_month += 1&#10;            if self.current_month &gt; 12:&#10;                self.current_month = 1&#10;                self.current_year += 1&#10;                self.player.age += 1&#10;&#10;                # Apply interest to savings&#10;                if self.player.bank_account and self.player.bank_account.account_type == &quot;Savings&quot;:&#10;                    self.player.bank_account.apply_interest()&#10;&#10;                # Age assets&#10;                for asset in self.player.assets:&#10;                    asset.age_asset()&#10;&#10;            # Process monthly income and expenses&#10;            self.process_monthly_finances()&#10;&#10;            # Random events&#10;            if random.random() &lt; 0.3:  # 30% chance of an event each month&#10;                self.trigger_random_event()&#10;&#10;            # Life stage events based on age&#10;            self.check_life_stage_events()&#10;&#10;            # Display status and get player action&#10;            self.display_status()&#10;            self.get_player_action()&#10;&#10;            # Check game over conditions&#10;            if self.player.age &gt;= 65:  # Retirement age&#10;                self.end_game(&quot;retirement&quot;)&#10;&#10;    def process_monthly_finances(self):&#10;        &quot;&quot;&quot;Process monthly income and expenses.&quot;&quot;&quot;&#10;        # Process income&#10;        if self.player.job:&#10;            monthly_income = self.player.salary / 12&#10;            self.player.cash += monthly_income&#10;&#10;            # Auto deposit to bank if account exists&#10;            if self.player.bank_account:&#10;                deposit_amount = monthly_income * 0.8  # 80% of income goes to bank&#10;                self.player.bank_account.deposit(deposit_amount)&#10;                self.player.cash -= deposit_amount&#10;&#10;        # Process loan payments&#10;        for loan in self.player.loans:&#10;            if self.player.cash &gt;= loan.monthly_payment:&#10;                self.player.cash -= loan.monthly_payment&#10;                loan.make_payment(loan.monthly_payment)&#10;            elif self.player.bank_account and self.player.bank_account.balance &gt;= loan.monthly_payment:&#10;                self.player.bank_account.withdraw(loan.monthly_payment)&#10;                loan.make_payment(loan.monthly_payment)&#10;            elif self.player.credit_card and (self.player.credit_card.balance + loan.monthly_payment) &lt;= self.player.credit_card.limit:&#10;                self.player.credit_card.charge(loan.monthly_payment)&#10;                loan.make_payment(loan.monthly_payment)&#10;            else:&#10;                # Missed payment - credit score impact&#10;                self.player.credit_score -= 30&#10;                print(f&quot;You missed a payment on your {loan.loan_type} loan. Your credit score has been affected.&quot;)&#10;&#10;        # Process credit card minimum payments (5% of balance)&#10;        if self.player.credit_card and self.player.credit_card.balance &gt; 0:&#10;            min_payment = max(25, self.player.credit_card.balance * 0.05)  # Minimum $25 or 5% of balance&#10;&#10;            if self.player.cash &gt;= min_payment:&#10;                self.player.cash -= min_payment&#10;                self.player.credit_card.pay(min_payment)&#10;            elif self.player.bank_account and self.player.bank_account.balance &gt;= min_payment:&#10;                self.player.bank_account.withdraw(min_payment)&#10;                self.player.credit_card.pay(min_payment)&#10;            else:&#10;                # Missed payment - credit score impact&#10;                self.player.credit_score -= 50&#10;                print(&quot;You missed your credit card payment. Your credit score has been severely affected.&quot;)&#10;&#10;        # Process living expenses&#10;        living_expenses = 1000  # Base living expenses&#10;&#10;        if any(a.asset_type == &quot;House&quot; for a in self.player.assets):&#10;            living_expenses += 500  # Additional expenses for homeowners&#10;&#10;        if any(a.asset_type == &quot;Car&quot; for a in self.player.assets):&#10;            living_expenses += 200  # Car maintenance and gas&#10;&#10;        if self.player.family:&#10;            living_expenses += 500 * len(self.player.family)  # Additional expenses per family member&#10;&#10;        # Adjust for inflation over time (2% per year)&#10;        inflation_factor = (1.02) ** self.current_year&#10;        living_expenses *= inflation_factor&#10;&#10;        # Pay living expenses&#10;        if self.player.cash &gt;= living_expenses:&#10;            self.player.cash -= living_expenses&#10;        elif self.player.bank_account and self.player.bank_account.balance &gt;= living_expenses:&#10;            self.player.bank_account.withdraw(living_expenses)&#10;        elif self.player.credit_card and (self.player.credit_card.balance + living_expenses) &lt;= self.player.credit_card.limit:&#10;            self.player.credit_card.charge(living_expenses)&#10;        else:&#10;            # Couldn't pay living expenses - game over?&#10;            print(&quot;You couldn't afford your living expenses this month!&quot;)&#10;            # For now, just reduce credit score&#10;            self.player.credit_score -= 20&#10;&#10;        # --- Process recurring bills (from items) ---&#10;        for bill in self.player.recurring_bills:&#10;            paid = False&#10;            # Try to pay from bank account or credit card if specified&#10;            if bill.get('source') == 'bank_or_credit':&#10;                if self.player.bank_account and self.player.bank_account.balance &gt;= bill['amount']:&#10;                    self.player.bank_account.withdraw(bill['amount'])&#10;                    paid = True&#10;                elif self.player.credit_card and (self.player.credit_card.balance + bill['amount']) &lt;= self.player.credit_card.limit:&#10;                    self.player.credit_card.charge(bill['amount'])&#10;                    paid = True&#10;            # Fallback to cash&#10;            if not paid and self.player.cash &gt;= bill['amount']:&#10;                self.player.cash -= bill['amount']&#10;                paid = True&#10;            if not paid:&#10;                self.player.credit_score -= 10  # Penalty for missed bill&#10;                print(f&quot;Missed recurring bill: {bill['name']}&quot;)&#10;&#10;        # --- Process utility bills ---&#10;        for util in self.player.utility_bills:&#10;            paid = False&#10;            if self.player.bank_account and self.player.bank_account.balance &gt;= util['amount']:&#10;                self.player.bank_account.withdraw(util['amount'])&#10;                paid = True&#10;            elif self.player.credit_card and (self.player.credit_card.balance + util['amount']) &lt;= self.player.credit_card.limit:&#10;                self.player.credit_card.charge(util['amount'])&#10;                paid = True&#10;            if not paid and self.player.cash &gt;= util['amount']:&#10;                self.player.cash -= util['amount']&#10;                paid = True&#10;            if not paid:&#10;                self.player.credit_score -= 5  # Penalty for missed utility&#10;                print(f&quot;Missed utility bill: {util['name']}&quot;)&#10;&#10;    def trigger_random_event(self):&#10;        &quot;&quot;&quot;Trigger a random financial event.&quot;&quot;&quot;&#10;        event_type = &quot;positive&quot; if random.random() &lt; 0.5 else &quot;negative&quot;&#10;        event = random.choice(self.events[event_type])&#10;        &#10;        cash_effect = event[&quot;cash_effect&quot;]()&#10;        &#10;        # Only show events that have an effect&#10;        if cash_effect == 0:&#10;            return&#10;        &#10;        # If in GUI mode, show the event screen&#10;        if self.gui_manager is not None:&#10;            from moneySmartz.screens.random_event_screens import RandomEventScreen&#10;            event_screen = RandomEventScreen(self, event, cash_effect)&#10;            self.gui_manager.set_screen(event_screen)&#10;            return&#10;        &#10;        # Otherwise, text mode&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;!&quot; * 60)&#10;        print(f&quot;LIFE EVENT: {event['name']}&quot;)&#10;        print(event[&quot;description&quot;])&#10;        &#10;        if cash_effect &gt; 0:&#10;            print(f&quot;You received ${cash_effect}!&quot;)&#10;            self.player.cash += cash_effect&#10;        else:&#10;            print(f&quot;This costs you ${abs(cash_effect)}.&quot;)&#10;            # ... rest of text mode processing ...&#10;        &#10;        print(&quot;!&quot; * 60)&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def check_life_stage_events(self):&#10;        &quot;&quot;&quot;Check for and trigger life stage events based on player age.&quot;&quot;&quot;&#10;        # High school graduation&#10;        if self.player.age == 18 and self.player.education == &quot;High School&quot;:&#10;            self.high_school_graduation_event()&#10;&#10;        # College graduation (if went to college)&#10;        if self.player.age == 22 and self.player.education == &quot;College (In Progress)&quot;:&#10;            self.college_graduation_event()&#10;&#10;        # First full-time job opportunity&#10;        if self.player.age == 22 and not self.player.job and self.player.education != &quot;College (In Progress)&quot;:&#10;            self.job_opportunity_event()&#10;&#10;        # Car purchase opportunity&#10;        if self.player.age == 20 and not any(a.asset_type == &quot;Car&quot; for a in self.player.assets):&#10;            self.car_purchase_opportunity()&#10;&#10;        # House purchase opportunity&#10;        if self.player.age == 30 and not any(a.asset_type == &quot;House&quot; for a in self.player.assets) and self.player.job:&#10;            self.house_purchase_opportunity()&#10;&#10;        # Family planning opportunity&#10;        if self.player.age &gt;= 28 and not self.player.family and self.player.job:&#10;            if random.random() &lt; 0.1:  # 10% chance each year after 28&#10;                self.family_planning_opportunity()&#10;&#10;    def high_school_graduation_event(self):&#10;        &quot;&quot;&quot;Handle the high school graduation event.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: HIGH SCHOOL GRADUATION&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nCongratulations! You've graduated from high school.&quot;)&#10;        print(&quot;It's time to make some important decisions about your future.&quot;)&#10;&#10;        choices = [&quot;Go to college (costs $20,000/year for 4 years)&quot;,&#10;                  &quot;Go to trade school (costs $10,000 for 2 years)&quot;,&#10;                  &quot;Start working full-time&quot;]&#10;&#10;        choice = self.get_choice(&quot;What would you like to do?&quot;, choices)&#10;&#10;        if choice == choices[0]:  # College&#10;            print(&quot;\nYou've decided to go to college. This is a significant investment&quot;)&#10;            print(&quot;in your future that could lead to higher-paying jobs.&quot;)&#10;&#10;            # Check if player can afford college&#10;            annual_cost = 20000&#10;            if self.player.cash &gt;= annual_cost:&#10;                print(f&quot;\nYou pay the first year's tuition of ${annual_cost} in cash.&quot;)&#10;                self.player.cash -= annual_cost&#10;            elif self.player.bank_account and self.player.bank_account.balance &gt;= annual_cost:&#10;                print(f&quot;\nYou pay the first year's tuition of ${annual_cost} from your bank account.&quot;)&#10;                self.player.bank_account.withdraw(annual_cost)&#10;            else:&#10;                # Need a student loan&#10;                print(&quot;\nYou don't have enough money to pay for college upfront.&quot;)&#10;                print(&quot;You'll need to take out student loans.&quot;)&#10;&#10;                loan_amount = 80000  # 4 years of college&#10;                loan = Loan(&quot;Student&quot;, loan_amount, 0.05, 20)  # 5% interest, 20-year term&#10;                self.player.loans.append(loan)&#10;&#10;                print(f&quot;\nYou've taken out a student loan for ${loan_amount}.&quot;)&#10;                print(f&quot;Your monthly payment will be ${loan.monthly_payment:.2f} for 20 years.&quot;)&#10;&#10;            self.player.education = &quot;College (In Progress)&quot;&#10;            print(&quot;\nYou're now a college student! Your education will take 4 years.&quot;)&#10;&#10;        elif choice == choices[1]:  # Trade school&#10;            print(&quot;\nYou've decided to go to trade school. This is a practical choice&quot;)&#10;            print(&quot;that will give you specific skills for certain careers.&quot;)&#10;&#10;            # Check if player can afford trade school&#10;            cost = 10000&#10;            if self.player.cash &gt;= cost:&#10;                print(f&quot;\nYou pay the trade school tuition of ${cost} in cash.&quot;)&#10;                self.player.cash -= cost&#10;            elif self.player.bank_account and self.player.bank_account.balance &gt;= cost:&#10;                print(f&quot;\nYou pay the trade school tuition of ${cost} from your bank account.&quot;)&#10;                self.player.bank_account.withdraw(cost)&#10;            else:&#10;                # Need a student loan&#10;                print(&quot;\nYou don't have enough money to pay for trade school upfront.&quot;)&#10;                print(&quot;You'll need to take out a student loan.&quot;)&#10;&#10;                loan = Loan(&quot;Student&quot;, cost, 0.05, 10)  # 5% interest, 10-year term&#10;                self.player.loans.append(loan)&#10;&#10;                print(f&quot;\nYou've taken out a student loan for ${cost}.&quot;)&#10;                print(f&quot;Your monthly payment will be ${loan.monthly_payment:.2f} for 10 years.&quot;)&#10;&#10;            self.player.education = &quot;Trade School&quot;&#10;            print(&quot;\nYou're now a trade school student! Your education will take 2 years.&quot;)&#10;&#10;        else:  # Start working&#10;            print(&quot;\nYou've decided to start working full-time without further education.&quot;)&#10;            print(&quot;You'll start with entry-level positions, but can work your way up.&quot;)&#10;&#10;            self.player.education = &quot;High School Graduate&quot;&#10;            self.job_opportunity_event()&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def college_graduation_event(self):&#10;        &quot;&quot;&quot;Handle the college graduation event.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: COLLEGE GRADUATION&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nCongratulations! You've graduated from college with a bachelor's degree.&quot;)&#10;        print(&quot;Your education will open up better job opportunities.&quot;)&#10;&#10;        self.player.education = &quot;College Graduate&quot;&#10;        self.player.credit_score += 20  # Education boosts credit score&#10;&#10;        print(&quot;\nYour credit score has increased due to your educational achievement.&quot;)&#10;        print(f&quot;Your credit score is now {self.player.credit_score}.&quot;)&#10;&#10;        # Offer job opportunities&#10;        print(&quot;\nWith your new degree, you have access to better job opportunities.&quot;)&#10;        self.job_opportunity_event()&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def job_opportunity_event(self):&#10;        &quot;&quot;&quot;Handle job opportunities.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: JOB OPPORTUNITY&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        # Generate job options based on education&#10;        job_options = []&#10;&#10;        if self.player.education == &quot;High School Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Retail Associate&quot;, &quot;salary&quot;: 25000},&#10;                {&quot;title&quot;: &quot;Food Service Worker&quot;, &quot;salary&quot;: 22000},&#10;                {&quot;title&quot;: &quot;Warehouse Worker&quot;, &quot;salary&quot;: 28000},&#10;            ]&#10;        elif self.player.education == &quot;Trade School&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Electrician Apprentice&quot;, &quot;salary&quot;: 35000},&#10;                {&quot;title&quot;: &quot;Plumber Assistant&quot;, &quot;salary&quot;: 32000},&#10;                {&quot;title&quot;: &quot;HVAC Technician&quot;, &quot;salary&quot;: 38000},&#10;            ]&#10;        elif self.player.education == &quot;College Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Entry-Level Accountant&quot;, &quot;salary&quot;: 50000},&#10;                {&quot;title&quot;: &quot;Marketing Coordinator&quot;, &quot;salary&quot;: 45000},&#10;                {&quot;title&quot;: &quot;Software Developer&quot;, &quot;salary&quot;: 65000},&#10;            ]&#10;&#10;        # Display job options&#10;        print(&quot;\nThe following job opportunities are available to you:&quot;)&#10;        for i, job in enumerate(job_options):&#10;            print(f&quot;{i+1}. {job['title']} - ${job['salary']}/year&quot;)&#10;&#10;        # Get player choice&#10;        choice = 0&#10;        while choice &lt; 1 or choice &gt; len(job_options):&#10;            try:&#10;                choice = int(input(f&quot;\nWhich job would you like to take? (1-{len(job_options)}): &quot;))&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        # Apply job&#10;        selected_job = job_options[choice-1]&#10;        self.player.job = selected_job[&quot;title&quot;]&#10;        self.player.salary = selected_job[&quot;salary&quot;]&#10;&#10;        print(f&quot;\nCongratulations! You are now a {self.player.job} earning ${self.player.salary}/year.&quot;)&#10;        print(f&quot;Your monthly income is ${self.player.salary/12:.2f}.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def car_purchase_opportunity(self):&#10;        &quot;&quot;&quot;Handle car purchase opportunity.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: CAR PURCHASE OPPORTUNITY&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nYou're now at an age where having your own car could be beneficial.&quot;)&#10;        print(&quot;Would you like to look at some car options?&quot;)&#10;&#10;        choice = self.get_choice(&quot;Do you want to buy a car?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;&#10;        if choice == &quot;Yes&quot;:&#10;            # Car options&#10;            car_options = [&#10;                {&quot;name&quot;: &quot;Used Economy Car&quot;, &quot;value&quot;: 5000},&#10;                {&quot;name&quot;: &quot;New Economy Car&quot;, &quot;value&quot;: 18000},&#10;                {&quot;name&quot;: &quot;Used Luxury Car&quot;, &quot;value&quot;: 15000},&#10;                {&quot;name&quot;: &quot;New Luxury Car&quot;, &quot;value&quot;: 35000},&#10;            ]&#10;&#10;            print(&quot;\nHere are your car options:&quot;)&#10;            for i, car in enumerate(car_options):&#10;                print(f&quot;{i+1}. {car['name']} - ${car['value']}&quot;)&#10;&#10;            # Get player choice&#10;            car_choice = 0&#10;            while car_choice &lt; 1 or car_choice &gt; len(car_options):&#10;                try:&#10;                    car_choice = int(input(f&quot;\nWhich car would you like to buy? (1-{len(car_options)}): &quot;))&#10;                except ValueError:&#10;                    print(&quot;Please enter a valid number.&quot;)&#10;&#10;            selected_car = car_options[car_choice-1]&#10;&#10;            # Payment options&#10;            print(f&quot;\nYou've selected the {selected_car['name']} for ${selected_car['value']}.&quot;)&#10;            print(&quot;How would you like to pay?&quot;)&#10;&#10;            payment_options = [&quot;Cash&quot;]&#10;            if self.player.bank_account and self.player.bank_account.balance &gt;= selected_car['value']:&#10;                payment_options.append(&quot;Bank Account&quot;)&#10;            payment_options.append(&quot;Auto Loan&quot;)&#10;&#10;            payment_choice = self.get_choice(&quot;Select payment method:&quot;, payment_options)&#10;&#10;            if payment_choice == &quot;Cash&quot; and self.player.cash &gt;= selected_car['value']:&#10;                self.player.cash -= selected_car['value']&#10;                print(f&quot;\nYou paid ${selected_car['value']} in cash for your new car.&quot;)&#10;            elif payment_choice == &quot;Bank Account&quot;:&#10;                self.player.bank_account.withdraw(selected_car['value'])&#10;                print(f&quot;\nYou paid ${selected_car['value']} from your bank account for your new car.&quot;)&#10;            else:  # Auto Loan&#10;                # Determine loan terms based on credit score&#10;                if self.player.credit_score &gt;= 700:&#10;                    interest_rate = 0.03  # 3%&#10;                elif self.player.credit_score &gt;= 650:&#10;                    interest_rate = 0.05  # 5%&#10;                else:&#10;                    interest_rate = 0.08  # 8%&#10;&#10;                loan = Loan(&quot;Auto&quot;, selected_car['value'], interest_rate, 5)  # 5-year auto loan&#10;                self.player.loans.append(loan)&#10;&#10;                print(f&quot;\nYou've taken out an auto loan for ${selected_car['value']}.&quot;)&#10;                print(f&quot;Your interest rate is {interest_rate*100:.1f}% based on your credit score of {self.player.credit_score}.&quot;)&#10;                print(f&quot;Your monthly payment will be ${loan.monthly_payment:.2f} for 5 years.&quot;)&#10;&#10;            # Add car to assets&#10;            self.player.assets.append(Asset(&quot;Car&quot;, selected_car['name'], selected_car['value']))&#10;            print(f&quot;\nCongratulations on your new {selected_car['name']}!&quot;)&#10;&#10;        else:&#10;            print(&quot;\nYou've decided not to buy a car at this time.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def house_purchase_opportunity(self):&#10;        &quot;&quot;&quot;Handle house purchase opportunity.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: HOUSE PURCHASE OPPORTUNITY&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nYou're now at a stage in life where buying a house could be a good investment.&quot;)&#10;        print(&quot;Would you like to look at some housing options?&quot;)&#10;&#10;        choice = self.get_choice(&quot;Do you want to buy a house?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;&#10;        if choice == &quot;Yes&quot;:&#10;            # House options&#10;            house_options = [&#10;                {&quot;name&quot;: &quot;Small Starter Home&quot;, &quot;value&quot;: 150000},&#10;                {&quot;name&quot;: &quot;Mid-size Family Home&quot;, &quot;value&quot;: 250000},&#10;                {&quot;name&quot;: &quot;Large Luxury Home&quot;, &quot;value&quot;: 500000},&#10;                {&quot;name&quot;: &quot;Urban Condo&quot;, &quot;value&quot;: 200000},&#10;            ]&#10;&#10;            print(&quot;\nHere are your housing options:&quot;)&#10;            for i, house in enumerate(house_options):&#10;                print(f&quot;{i+1}. {house['name']} - ${house['value']}&quot;)&#10;&#10;            # Get player choice&#10;            house_choice = 0&#10;            while house_choice &lt; 1 or house_choice &gt; len(house_options):&#10;                try:&#10;                    house_choice = int(input(f&quot;\nWhich house would you like to buy? (1-{len(house_options)}): &quot;))&#10;                except ValueError:&#10;                    print(&quot;Please enter a valid number.&quot;)&#10;&#10;            selected_house = house_options[house_choice-1]&#10;&#10;            # Calculate down payment (20% is standard)&#10;            down_payment = selected_house['value'] * 0.2&#10;            loan_amount = selected_house['value'] - down_payment&#10;&#10;            print(f&quot;\nYou've selected the {selected_house['name']} for ${selected_house['value']}.&quot;)&#10;            print(f&quot;A standard mortgage requires a 20% down payment of ${down_payment}.&quot;)&#10;&#10;            # Check if player can afford down payment&#10;            if self.player.cash &lt; down_payment and (not self.player.bank_account or self.player.bank_account.balance &lt; down_payment):&#10;                print(&quot;\nYou don't have enough money for the down payment.&quot;)&#10;                print(&quot;You'll need to save up more money before buying a house.&quot;)&#10;                input(&quot;\nPress Enter to continue...&quot;)&#10;                return&#10;&#10;            # Down payment options&#10;            payment_options = []&#10;            if self.player.cash &gt;= down_payment:&#10;                payment_options.append(&quot;Cash&quot;)&#10;            if self.player.bank_account and self.player.bank_account.balance &gt;= down_payment:&#10;                payment_options.append(&quot;Bank Account&quot;)&#10;&#10;            payment_choice = self.get_choice(&quot;How would you like to pay the down payment?&quot;, payment_options)&#10;&#10;            if payment_choice == &quot;Cash&quot;:&#10;                self.player.cash -= down_payment&#10;                print(f&quot;\nYou paid ${down_payment} in cash for your down payment.&quot;)&#10;            else:  # Bank Account&#10;                self.player.bank_account.withdraw(down_payment)&#10;                print(f&quot;\nYou paid ${down_payment} from your bank account for your down payment.&quot;)&#10;&#10;            # Determine mortgage terms based on credit score&#10;            if self.player.credit_score &gt;= 750:&#10;                interest_rate = 0.035  # 3.5%&#10;            elif self.player.credit_score &gt;= 700:&#10;                interest_rate = 0.04   # 4.0%&#10;            elif self.player.credit_score &gt;= 650:&#10;                interest_rate = 0.045  # 4.5%&#10;            else:&#10;                interest_rate = 0.055  # 5.5%&#10;&#10;            loan = Loan(&quot;Mortgage&quot;, loan_amount, interest_rate, 30)  # 30-year mortgage&#10;            self.player.loans.append(loan)&#10;&#10;            print(f&quot;\nYou've taken out a mortgage for ${loan_amount}.&quot;)&#10;            print(f&quot;Your interest rate is {interest_rate*100:.1f}% based on your credit score of {self.player.credit_score}.&quot;)&#10;            print(f&quot;Your monthly payment will be ${loan.monthly_payment:.2f} for 30 years.&quot;)&#10;&#10;            # Add house to assets&#10;            self.player.assets.append(Asset(&quot;House&quot;, selected_house['name'], selected_house['value']))&#10;            print(f&quot;\nCongratulations on your new {selected_house['name']}!&quot;)&#10;&#10;        else:&#10;            print(&quot;\nYou've decided not to buy a house at this time.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def family_planning_opportunity(self):&#10;        &quot;&quot;&quot;Handle family planning opportunity.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LIFE EVENT: FAMILY PLANNING&quot;)&#10;        print(&quot;=&quot; * 60)&#10;        print(&quot;\nYou've reached a stage in life where starting a family might be a consideration.&quot;)&#10;        print(&quot;Starting a family will increase your monthly expenses but can bring joy to your life.&quot;)&#10;&#10;        choice = self.get_choice(&quot;Would you like to start a family?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;&#10;        if choice == &quot;Yes&quot;:&#10;            # Add a spouse&#10;            spouse_age = self.player.age - random.randint(-3, 3)  # Spouse age is close to player age&#10;            self.player.family.append({&quot;relation&quot;: &quot;Spouse&quot;, &quot;age&quot;: spouse_age})&#10;&#10;            print(&quot;\nCongratulations! You've gotten married.&quot;)&#10;            print(f&quot;Your spouse is {spouse_age} years old.&quot;)&#10;&#10;            # Chance for dual income&#10;            if random.random() &lt; 0.7:  # 70% chance of spouse having a job&#10;                spouse_income = int(self.player.salary * random.uniform(0.5, 1.5))  # Spouse income relative to player&#10;                self.player.salary += spouse_income  # Add spouse income to family income&#10;                print(f&quot;Your spouse has a job that adds ${spouse_income}/year to your family income.&quot;)&#10;                print(f&quot;Your combined family income is now ${self.player.salary}/year.&quot;)&#10;            else:&#10;                print(&quot;Your spouse doesn't currently have a job.&quot;)&#10;&#10;            # Ask about children&#10;            child_choice = self.get_choice(&quot;Would you like to have children?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;&#10;            if child_choice == &quot;Yes&quot;:&#10;                num_children = random.randint(1, 3)  # Random number of children&#10;&#10;                for i in range(num_children):&#10;                    child_name = f&quot;Child {i+1}&quot;  # Placeholder name&#10;                    child_age = 0  # Newborn&#10;                    self.player.family.append({&quot;relation&quot;: &quot;Child&quot;, &quot;name&quot;: child_name, &quot;age&quot;: child_age})&#10;&#10;                print(f&quot;\nCongratulations! You now have {num_children} {'child' if num_children == 1 else 'children'}.&quot;)&#10;                print(&quot;Having children will increase your monthly expenses.&quot;)&#10;&#10;                # Adjust expenses for children&#10;                print(&quot;\nYour monthly expenses have increased to account for your growing family.&quot;)&#10;&#10;        else:&#10;            print(&quot;\nYou've decided not to start a family at this time.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def display_status(self):&#10;        &quot;&quot;&quot;Display the player's current status (text mode).&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(f&quot;MONTH: {self.current_month}/YEAR: {self.current_year + 2023}&quot;)&#10;        print(f&quot;AGE: {self.player.age}&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nName: {self.player.name}&quot;)&#10;        print(f&quot;Education: {self.player.education}&quot;)&#10;        print(f&quot;Job: {self.player.job if self.player.job else 'Unemployed'}&quot;)&#10;        if self.player.job:&#10;            print(f&quot;Salary: ${self.player.salary}/year (${self.player.salary/12:.2f}/month)&quot;)&#10;&#10;        print(f&quot;\nCash: ${self.player.cash:.2f}&quot;)&#10;&#10;        if self.player.bank_account:&#10;            print(f&quot;Bank Account ({self.player.bank_account.account_type}): ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        if self.player.credit_card:&#10;            print(f&quot;Credit Card: ${self.player.credit_card.balance:.2f}/{self.player.credit_card.limit:.2f}&quot;)&#10;&#10;        print(f&quot;Credit Score: {self.player.credit_score}&quot;)&#10;&#10;        if self.player.loans:&#10;            print(&quot;\n--- LOANS ---&quot;)&#10;            for loan in self.player.loans:&#10;                print(f&quot;{loan.loan_type}: ${loan.current_balance:.2f} remaining (${loan.monthly_payment:.2f}/month)&quot;)&#10;&#10;        if self.player.assets:&#10;            print(&quot;\n--- ASSETS ---&quot;)&#10;            for asset in self.player.assets:&#10;                print(f&quot;{asset.name}: ${asset.current_value:.2f} ({asset.condition} condition)&quot;)&#10;&#10;        if self.player.family:&#10;            print(&quot;\n--- FAMILY ---&quot;)&#10;            for member in self.player.family:&#10;                if member[&quot;relation&quot;] == &quot;Spouse&quot;:&#10;                    print(f&quot;Spouse: Age {member['age'] + self.current_year}&quot;)&#10;                else:&#10;                    print(f&quot;{member['relation']}: {member['name']}, Age {member['age'] + self.current_year}&quot;)&#10;&#10;        # Calculate and display net worth&#10;        cash = self.player.cash&#10;        bank_balance = self.player.bank_account.balance if self.player.bank_account else 0&#10;        credit_card_debt = self.player.credit_card.balance if self.player.credit_card else 0&#10;&#10;        loan_debt = 0&#10;        for loan in self.player.loans:&#10;            loan_debt += loan.current_balance&#10;&#10;        asset_value = 0&#10;        for asset in self.player.assets:&#10;            asset_value += asset.current_value&#10;&#10;        net_worth = cash + bank_balance - credit_card_debt - loan_debt + asset_value&#10;&#10;        print(f&quot;\nNET WORTH: ${net_worth:.2f}&quot;)&#10;&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;&#10;    def get_player_action(self):&#10;        &quot;&quot;&quot;Get the player's next action (text mode).&quot;&quot;&quot;&#10;        actions = [&quot;Continue to next month&quot;]&#10;&#10;        # Banking actions&#10;        if not self.player.bank_account:&#10;            actions.append(&quot;Open a bank account&quot;)&#10;        else:&#10;            actions.append(&quot;View bank account&quot;)&#10;            actions.append(&quot;Deposit to bank&quot;)&#10;            actions.append(&quot;Withdraw from bank&quot;)&#10;&#10;            if not self.player.debit_card:&#10;                actions.append(&quot;Get a debit card&quot;)&#10;&#10;        # Credit actions&#10;        if not self.player.credit_card and self.player.age &gt;= 18:&#10;            actions.append(&quot;Apply for a credit card&quot;)&#10;        elif self.player.credit_card:&#10;            actions.append(&quot;View credit card&quot;)&#10;            if self.player.credit_card.balance &gt; 0:&#10;                actions.append(&quot;Pay credit card&quot;)&#10;&#10;        # Loan actions&#10;        if self.player.loans:&#10;            actions.append(&quot;View loans&quot;)&#10;            actions.append(&quot;Make extra loan payment&quot;)&#10;&#10;        # Asset actions&#10;        if self.player.assets:&#10;            actions.append(&quot;View assets&quot;)&#10;&#10;        # Job actions&#10;        if not self.player.job and self.player.age &gt;= 16:&#10;            actions.append(&quot;Look for a job&quot;)&#10;        elif self.player.job and random.random() &lt; 0.1:  # 10% chance of job opportunity each month&#10;            actions.append(&quot;Look for a better job&quot;)&#10;&#10;        # Display actions&#10;        print(&quot;\nWhat would you like to do?&quot;)&#10;        for i, action in enumerate(actions):&#10;            print(f&quot;{i+1}. {action}&quot;)&#10;&#10;        # Get player choice&#10;        choice = 0&#10;        while choice &lt; 1 or choice &gt; len(actions):&#10;            try:&#10;                choice = int(input(f&quot;\nEnter your choice (1-{len(actions)}): &quot;))&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        action = actions[choice-1]&#10;&#10;        # Process action&#10;        if action == &quot;Continue to next month&quot;:&#10;            return&#10;        elif action == &quot;Open a bank account&quot;:&#10;            self.open_bank_account()&#10;        elif action == &quot;View bank account&quot;:&#10;            self.view_bank_account()&#10;        elif action == &quot;Deposit to bank&quot;:&#10;            self.deposit_to_bank()&#10;        elif action == &quot;Withdraw from bank&quot;:&#10;            self.withdraw_from_bank()&#10;        elif action == &quot;Get a debit card&quot;:&#10;            self.get_debit_card()&#10;        elif action == &quot;Apply for a credit card&quot;:&#10;            self.apply_for_credit_card()&#10;        elif action == &quot;View credit card&quot;:&#10;            self.view_credit_card()&#10;        elif action == &quot;Pay credit card&quot;:&#10;            self.pay_credit_card()&#10;        elif action == &quot;View loans&quot;:&#10;            self.view_loans()&#10;        elif action == &quot;Make extra loan payment&quot;:&#10;            self.make_extra_loan_payment()&#10;        elif action == &quot;View assets&quot;:&#10;            self.view_assets()&#10;        elif action == &quot;Look for a job&quot; or action == &quot;Look for a better job&quot;:&#10;            self.look_for_job()&#10;&#10;        # After action, show status again and get another action&#10;        self.display_status()&#10;        self.get_player_action()&#10;&#10;    def open_bank_account(self):&#10;        &quot;&quot;&quot;Open a bank account.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;OPEN A BANK ACCOUNT&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(&quot;\nYou can open a checking account for everyday transactions&quot;)&#10;        print(&quot;or a savings account that earns interest.&quot;)&#10;&#10;        account_type = self.get_choice(&quot;What type of account would you like to open?&quot;, [&quot;Checking&quot;, &quot;Savings&quot;])&#10;&#10;        self.player.bank_account = BankAccount(account_type)&#10;&#10;        print(f&quot;\nCongratulations! You've opened a {account_type} account.&quot;)&#10;&#10;        if account_type == &quot;Savings&quot;:&#10;            print(f&quot;Your account will earn {self.player.bank_account.interest_rate*100:.1f}% interest annually.&quot;)&#10;&#10;        # Initial deposit&#10;        deposit = 0&#10;        while deposit &lt;= 0:&#10;            try:&#10;                deposit = float(input(&quot;\nHow much would you like to deposit initially? $&quot;))&#10;                if deposit &lt;= 0:&#10;                    print(&quot;Please enter a positive amount.&quot;)&#10;                elif deposit &gt; self.player.cash:&#10;                    print(&quot;You don't have that much cash.&quot;)&#10;                    deposit = 0&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        self.player.cash -= deposit&#10;        self.player.bank_account.deposit(deposit)&#10;&#10;        print(f&quot;\nYou've deposited ${deposit:.2f} into your new account.&quot;)&#10;        print(f&quot;Your account balance is ${self.player.bank_account.balance:.2f}.&quot;)&#10;&#10;        # Offer debit card&#10;        if account_type == &quot;Checking&quot;:&#10;            choice = self.get_choice(&quot;Would you like a debit card with your account?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;            if choice == &quot;Yes&quot;:&#10;                self.player.debit_card = Card(&quot;Debit&quot;)&#10;                print(&quot;\nYou now have a debit card linked to your checking account.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def view_bank_account(self):&#10;        &quot;&quot;&quot;View bank account details.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;BANK ACCOUNT DETAILS&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nAccount Type: {self.player.bank_account.account_type}&quot;)&#10;        print(f&quot;Current Balance: ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        if self.player.bank_account.account_type == &quot;Savings&quot;:&#10;            print(f&quot;Interest Rate: {self.player.bank_account.interest_rate*100:.1f}% annually&quot;)&#10;            annual_interest = self.player.bank_account.balance * self.player.bank_account.interest_rate&#10;            print(f&quot;Projected Annual Interest: ${annual_interest:.2f}&quot;)&#10;&#10;        if self.player.debit_card:&#10;            print(&quot;\nYou have a debit card linked to this account.&quot;)&#10;&#10;        # Show recent transactions&#10;        if self.player.bank_account.transaction_history:&#10;            print(&quot;\nRecent Transactions:&quot;)&#10;            for i, transaction in enumerate(reversed(self.player.bank_account.transaction_history[-5:])):&#10;                if transaction[&quot;type&quot;] == &quot;deposit&quot;:&#10;                    print(f&quot;  Deposit: +${transaction['amount']:.2f}&quot;)&#10;                elif transaction[&quot;type&quot;] == &quot;withdrawal&quot;:&#10;                    print(f&quot;  Withdrawal: -${transaction['amount']:.2f}&quot;)&#10;                elif transaction[&quot;type&quot;] == &quot;interest&quot;:&#10;                    print(f&quot;  Interest: +${transaction['amount']:.2f}&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def deposit_to_bank(self):&#10;        &quot;&quot;&quot;Deposit money to bank account.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;DEPOSIT TO BANK&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nYour current cash: ${self.player.cash:.2f}&quot;)&#10;        print(f&quot;Your current bank balance: ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        deposit = 0&#10;        while deposit &lt;= 0:&#10;            try:&#10;                deposit = float(input(&quot;\nHow much would you like to deposit? $&quot;))&#10;                if deposit &lt;= 0:&#10;                    print(&quot;Please enter a positive amount.&quot;)&#10;                elif deposit &gt; self.player.cash:&#10;                    print(&quot;You don't have that much cash.&quot;)&#10;                    deposit = 0&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        self.player.cash -= deposit&#10;        self.player.bank_account.deposit(deposit)&#10;&#10;        print(f&quot;\nYou've deposited ${deposit:.2f} into your account.&quot;)&#10;        print(f&quot;Your new account balance is ${self.player.bank_account.balance:.2f}.&quot;)&#10;        print(f&quot;Your remaining cash is ${self.player.cash:.2f}.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def withdraw_from_bank(self):&#10;        &quot;&quot;&quot;Withdraw money from bank account.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;WITHDRAW FROM BANK&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nYour current cash: ${self.player.cash:.2f}&quot;)&#10;        print(f&quot;Your current bank balance: ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        withdrawal = 0&#10;        while withdrawal &lt;= 0:&#10;            try:&#10;                withdrawal = float(input(&quot;\nHow much would you like to withdraw? $&quot;))&#10;                if withdrawal &lt;= 0:&#10;                    print(&quot;Please enter a positive amount.&quot;)&#10;                elif withdrawal &gt; self.player.bank_account.balance:&#10;                    print(&quot;You don't have that much in your account.&quot;)&#10;                    withdrawal = 0&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        self.player.bank_account.withdraw(withdrawal)&#10;        self.player.cash += withdrawal&#10;&#10;        print(f&quot;\nYou've withdrawn ${withdrawal:.2f} from your account.&quot;)&#10;        print(f&quot;Your new account balance is ${self.player.bank_account.balance:.2f}.&quot;)&#10;        print(f&quot;Your cash is now ${self.player.cash:.2f}.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def get_debit_card(self):&#10;        &quot;&quot;&quot;Get a debit card for the bank account.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;GET A DEBIT CARD&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(&quot;\nA debit card allows you to make purchases directly from your checking account.&quot;)&#10;        print(&quot;There is no fee for this card.&quot;)&#10;&#10;        self.player.debit_card = Card(&quot;Debit&quot;)&#10;&#10;        print(&quot;\nYou now have a debit card linked to your checking account.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def apply_for_credit_card(self):&#10;        &quot;&quot;&quot;Apply for a credit card.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;APPLY FOR A CREDIT CARD&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(&quot;\nA credit card allows you to make purchases on credit.&quot;)&#10;        print(&quot;You'll need to make monthly payments, and interest will be charged on unpaid balances.&quot;)&#10;        print(&quot;Your credit limit will be based on your credit score and income.&quot;)&#10;&#10;        # Check eligibility&#10;        if self.player.age &lt; 18:&#10;            print(&quot;\nSorry, you must be at least 18 years old to apply for a credit card.&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        if not self.player.job:&#10;            print(&quot;\nSorry, you need to have a job to apply for a credit card.&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        # Determine credit limit based on credit score and income&#10;        base_limit = self.player.salary * 0.2  # 20% of annual income&#10;&#10;        if self.player.credit_score &gt;= 750:&#10;            limit_multiplier = 1.5  # Excellent credit&#10;        elif self.player.credit_score &gt;= 700:&#10;            limit_multiplier = 1.2  # Good credit&#10;        elif self.player.credit_score &gt;= 650:&#10;            limit_multiplier = 1.0  # Fair credit&#10;        elif self.player.credit_score &gt;= 600:&#10;            limit_multiplier = 0.8  # Poor credit&#10;        else:&#10;            limit_multiplier = 0.5  # Bad credit&#10;&#10;        credit_limit = base_limit * limit_multiplier&#10;&#10;        # Round to nearest $100&#10;        credit_limit = round(credit_limit / 100) * 100&#10;&#10;        # Minimum $500, maximum $50,000&#10;        credit_limit = max(500, min(50000, credit_limit))&#10;&#10;        print(f&quot;\nBased on your credit score of {self.player.credit_score} and income of ${self.player.salary}/year,&quot;)&#10;        print(f&quot;you qualify for a credit card with a limit of ${credit_limit:.2f}.&quot;)&#10;&#10;        choice = self.get_choice(&quot;Would you like to accept this credit card offer?&quot;, [&quot;Yes&quot;, &quot;No&quot;])&#10;&#10;        if choice == &quot;Yes&quot;:&#10;            self.player.credit_card = Card(&quot;Credit&quot;, credit_limit)&#10;            print(&quot;\nCongratulations! You now have a credit card.&quot;)&#10;            print(f&quot;Your credit limit is ${self.player.credit_card.limit:.2f}.&quot;)&#10;            print(&quot;Remember to make your payments on time to maintain a good credit score.&quot;)&#10;        else:&#10;            print(&quot;\nYou've declined the credit card offer.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def view_credit_card(self):&#10;        &quot;&quot;&quot;View credit card details.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;CREDIT CARD DETAILS&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nCredit Limit: ${self.player.credit_card.limit:.2f}&quot;)&#10;        print(f&quot;Current Balance: ${self.player.credit_card.balance:.2f}&quot;)&#10;        print(f&quot;Available Credit: ${self.player.credit_card.limit - self.player.credit_card.balance:.2f}&quot;)&#10;&#10;        # Calculate minimum payment&#10;        min_payment = max(25, self.player.credit_card.balance * 0.05)  # Minimum $25 or 5% of balance&#10;&#10;        if self.player.credit_card.balance &gt; 0:&#10;            print(f&quot;\nMinimum Payment Due: ${min_payment:.2f}&quot;)&#10;            print(&quot;Interest Rate: 18% APR on unpaid balances&quot;)&#10;&#10;            # Show interest that would be charged&#10;            monthly_interest = self.player.credit_card.balance * 0.18 / 12&#10;            print(f&quot;Interest This Month (if unpaid): ${monthly_interest:.2f}&quot;)&#10;&#10;        # Show recent transactions&#10;        if self.player.credit_card.transaction_history:&#10;            print(&quot;\nRecent Transactions:&quot;)&#10;            for i, transaction in enumerate(reversed(self.player.credit_card.transaction_history[-5:])):&#10;                if transaction[&quot;type&quot;] == &quot;charge&quot;:&#10;                    print(f&quot;  Charge: +${transaction['amount']:.2f}&quot;)&#10;                elif transaction[&quot;type&quot;] == &quot;payment&quot;:&#10;                    print(f&quot;  Payment: -${transaction['amount']:.2f}&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def pay_credit_card(self):&#10;        &quot;&quot;&quot;Make a payment on the credit card.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;PAY CREDIT CARD&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(f&quot;\nCurrent Credit Card Balance: ${self.player.credit_card.balance:.2f}&quot;)&#10;&#10;        # Calculate minimum payment&#10;        min_payment = max(25, self.player.credit_card.balance * 0.05)  # Minimum $25 or 5% of balance&#10;&#10;        print(f&quot;Minimum Payment Due: ${min_payment:.2f}&quot;)&#10;        print(f&quot;Your Cash: ${self.player.cash:.2f}&quot;)&#10;&#10;        if self.player.bank_account:&#10;            print(f&quot;Your Bank Balance: ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        # Payment options&#10;        payment_options = [&quot;Minimum Payment&quot;, &quot;Full Balance&quot;]&#10;        if min_payment &lt; self.player.credit_card.balance:&#10;            payment_options.insert(1, &quot;Custom Amount&quot;)&#10;&#10;        payment_choice = self.get_choice(&quot;How much would you like to pay?&quot;, payment_options)&#10;&#10;        if payment_choice == &quot;Minimum Payment&quot;:&#10;            payment_amount = min_payment&#10;        elif payment_choice == &quot;Full Balance&quot;:&#10;            payment_amount = self.player.credit_card.balance&#10;        else:  # Custom Amount&#10;            payment_amount = 0&#10;            while payment_amount &lt; min_payment or payment_amount &gt; self.player.credit_card.balance:&#10;                try:&#10;                    payment_amount = float(input(f&quot;\nEnter payment amount (minimum ${min_payment:.2f}): $&quot;))&#10;                    if payment_amount &lt; min_payment:&#10;                        print(f&quot;Payment must be at least the minimum payment of ${min_payment:.2f}.&quot;)&#10;                    elif payment_amount &gt; self.player.credit_card.balance:&#10;                        print(f&quot;Payment cannot exceed your balance of ${self.player.credit_card.balance:.2f}.&quot;)&#10;                except ValueError:&#10;                    print(&quot;Please enter a valid number.&quot;)&#10;&#10;        # Payment method&#10;        payment_methods = []&#10;        if self.player.cash &gt;= payment_amount:&#10;            payment_methods.append(&quot;Cash&quot;)&#10;        if self.player.bank_account and self.player.bank_account.balance &gt;= payment_amount:&#10;            payment_methods.append(&quot;Bank Account&quot;)&#10;&#10;        if not payment_methods:&#10;            print(&quot;\nYou don't have enough money to make this payment.&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        payment_method = self.get_choice(&quot;How would you like to pay?&quot;, payment_methods)&#10;&#10;        # Process payment&#10;        if payment_method == &quot;Cash&quot;:&#10;            self.player.cash -= payment_amount&#10;            self.player.credit_card.pay(payment_amount)&#10;            print(f&quot;\nYou paid ${payment_amount:.2f} from your cash.&quot;)&#10;        else:  # Bank Account&#10;            self.player.bank_account.withdraw(payment_amount)&#10;            self.player.credit_card.pay(payment_amount)&#10;            print(f&quot;\nYou paid ${payment_amount:.2f} from your bank account.&quot;)&#10;&#10;        print(f&quot;Your new credit card balance is ${self.player.credit_card.balance:.2f}.&quot;)&#10;&#10;        # Credit score improvement for on-time payments&#10;        if payment_amount &gt;= min_payment:&#10;            score_increase = min(5, 850 - self.player.credit_score)  # Cap at 850&#10;            if score_increase &gt; 0:&#10;                self.player.credit_score += score_increase&#10;                print(f&quot;\nYour on-time payment has improved your credit score by {score_increase} points.&quot;)&#10;                print(f&quot;Your credit score is now {self.player.credit_score}.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def view_loans(self):&#10;        &quot;&quot;&quot;View loan details.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;LOAN DETAILS&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        for i, loan in enumerate(self.player.loans):&#10;            print(f&quot;\nLoan {i+1}: {loan.loan_type}&quot;)&#10;            print(f&quot;Original Amount: ${loan.original_amount:.2f}&quot;)&#10;            print(f&quot;Current Balance: ${loan.current_balance:.2f}&quot;)&#10;            print(f&quot;Interest Rate: {loan.interest_rate*100:.2f}%&quot;)&#10;            print(f&quot;Term: {loan.term_years} years&quot;)&#10;            print(f&quot;Monthly Payment: ${loan.monthly_payment:.2f}&quot;)&#10;&#10;            # Calculate payoff date&#10;            remaining_payments = loan.current_balance / loan.monthly_payment&#10;            remaining_months = int(remaining_payments)&#10;            remaining_years = remaining_months // 12&#10;            remaining_months %= 12&#10;&#10;            print(f&quot;Estimated Payoff: {remaining_years} years and {remaining_months} months&quot;)&#10;&#10;            # Calculate total interest to be paid&#10;            total_payments = loan.monthly_payment * remaining_payments&#10;            total_interest = total_payments - loan.current_balance&#10;&#10;            print(f&quot;Remaining Interest to be Paid: ${total_interest:.2f}&quot;)&#10;&#10;            if i &lt; len(self.player.loans) - 1:&#10;                print(&quot;\n&quot; + &quot;-&quot; * 40)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def make_extra_loan_payment(self):&#10;        &quot;&quot;&quot;Make an extra payment on a loan.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;MAKE EXTRA LOAN PAYMENT&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        print(&quot;\nMaking extra payments on your loans can help you pay them off faster&quot;)&#10;        print(&quot;and save money on interest.&quot;)&#10;&#10;        # Select loan&#10;        if len(self.player.loans) &gt; 1:&#10;            print(&quot;\nWhich loan would you like to make an extra payment on?&quot;)&#10;            for i, loan in enumerate(self.player.loans):&#10;                print(f&quot;{i+1}. {loan.loan_type} - ${loan.current_balance:.2f} remaining&quot;)&#10;&#10;            loan_choice = 0&#10;            while loan_choice &lt; 1 or loan_choice &gt; len(self.player.loans):&#10;                try:&#10;                    loan_choice = int(input(f&quot;\nEnter your choice (1-{len(self.player.loans)}): &quot;))&#10;                except ValueError:&#10;                    print(&quot;Please enter a valid number.&quot;)&#10;&#10;            selected_loan = self.player.loans[loan_choice-1]&#10;        else:&#10;            selected_loan = self.player.loans[0]&#10;&#10;        print(f&quot;\nSelected Loan: {selected_loan.loan_type}&quot;)&#10;        print(f&quot;Current Balance: ${selected_loan.current_balance:.2f}&quot;)&#10;        print(f&quot;Interest Rate: {selected_loan.interest_rate*100:.2f}%&quot;)&#10;        print(f&quot;Regular Monthly Payment: ${selected_loan.monthly_payment:.2f}&quot;)&#10;&#10;        print(f&quot;\nYour Cash: ${self.player.cash:.2f}&quot;)&#10;        if self.player.bank_account:&#10;            print(f&quot;Your Bank Balance: ${self.player.bank_account.balance:.2f}&quot;)&#10;&#10;        # Enter payment amount&#10;        payment_amount = 0&#10;        while payment_amount &lt;= 0:&#10;            try:&#10;                payment_amount = float(input(&quot;\nHow much extra would you like to pay? $&quot;))&#10;                if payment_amount &lt;= 0:&#10;                    print(&quot;Please enter a positive amount.&quot;)&#10;                elif payment_amount &gt; selected_loan.current_balance:&#10;                    print(f&quot;Payment cannot exceed your loan balance of ${selected_loan.current_balance:.2f}.&quot;)&#10;                    payment_amount = 0&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        # Payment method&#10;        payment_methods = []&#10;        if self.player.cash &gt;= payment_amount:&#10;            payment_methods.append(&quot;Cash&quot;)&#10;        if self.player.bank_account and self.player.bank_account.balance &gt;= payment_amount:&#10;            payment_methods.append(&quot;Bank Account&quot;)&#10;&#10;        if not payment_methods:&#10;            print(&quot;\nYou don't have enough money to make this payment.&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        payment_method = self.get_choice(&quot;How would you like to pay?&quot;, payment_methods)&#10;&#10;        # Process payment&#10;        if payment_method == &quot;Cash&quot;:&#10;            self.player.cash -= payment_amount&#10;            selected_loan.make_payment(payment_amount)&#10;            print(f&quot;\nYou paid ${payment_amount:.2f} from your cash.&quot;)&#10;        else:  # Bank Account&#10;            self.player.bank_account.withdraw(payment_amount)&#10;            selected_loan.make_payment(payment_amount)&#10;            print(f&quot;\nYou paid ${payment_amount:.2f} from your bank account.&quot;)&#10;&#10;        print(f&quot;Your new loan balance is ${selected_loan.current_balance:.2f}.&quot;)&#10;&#10;        # Recalculate payoff date&#10;        if selected_loan.current_balance &gt; 0:&#10;            remaining_payments = selected_loan.current_balance / selected_loan.monthly_payment&#10;            remaining_months = int(remaining_payments)&#10;            remaining_years = remaining_months // 12&#10;            remaining_months %= 12&#10;&#10;            print(f&quot;\nYour extra payment has shortened your loan term!&quot;)&#10;            print(f&quot;New Estimated Payoff: {remaining_years} years and {remaining_months} months&quot;)&#10;&#10;            # Calculate interest savings&#10;            original_total = selected_loan.monthly_payment * (selected_loan.term_years * 12)&#10;            new_total = selected_loan.monthly_payment * remaining_payments + payment_amount&#10;            savings = original_total - new_total&#10;&#10;            print(f&quot;You'll save approximately ${savings:.2f} in interest over the life of the loan.&quot;)&#10;        else:&#10;            print(&quot;\nCongratulations! You've paid off this loan completely!&quot;)&#10;&#10;            # Remove the loan from the player's loans&#10;            self.player.loans.remove(selected_loan)&#10;&#10;            # Credit score improvement for paying off a loan&#10;            score_increase = min(20, 850 - self.player.credit_score)  # Cap at 850&#10;            if score_increase &gt; 0:&#10;                self.player.credit_score += score_increase&#10;                print(f&quot;\nPaying off your loan has improved your credit score by {score_increase} points.&quot;)&#10;                print(f&quot;Your credit score is now {self.player.credit_score}.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def view_assets(self):&#10;        &quot;&quot;&quot;View asset details.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;ASSET DETAILS&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        for i, asset in enumerate(self.player.assets):&#10;            print(f&quot;\nAsset {i+1}: {asset.name}&quot;)&#10;            print(f&quot;Type: {asset.asset_type}&quot;)&#10;            print(f&quot;Purchase Value: ${asset.purchase_value:.2f}&quot;)&#10;            print(f&quot;Current Value: ${asset.current_value:.2f}&quot;)&#10;            print(f&quot;Condition: {asset.condition}&quot;)&#10;            print(f&quot;Age: {asset.age} years&quot;)&#10;&#10;            # Value change&#10;            value_change = asset.current_value - asset.purchase_value&#10;            value_change_percent = (value_change / asset.purchase_value) * 100&#10;&#10;            if value_change &gt;= 0:&#10;                print(f&quot;Appreciation: ${value_change:.2f} ({value_change_percent:.1f}%)&quot;)&#10;            else:&#10;                print(f&quot;Depreciation: ${abs(value_change):.2f} ({abs(value_change_percent):.1f}%)&quot;)&#10;&#10;            if i &lt; len(self.player.assets) - 1:&#10;                print(&quot;\n&quot; + &quot;-&quot; * 40)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def look_for_job(self):&#10;        &quot;&quot;&quot;Look for a job or a better job.&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;        print(&quot;JOB SEARCH&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        current_salary = self.player.salary if self.player.job else 0&#10;&#10;        print(f&quot;\nCurrent Job: {self.player.job if self.player.job else 'Unemployed'}&quot;)&#10;        if self.player.job:&#10;            print(f&quot;Current Salary: ${current_salary}/year&quot;)&#10;&#10;        # Generate job options based on education and experience&#10;        job_options = []&#10;&#10;        # Base salary multiplier based on years of experience&#10;        experience_years = max(0, self.player.age - 18)  # Assume working age starts at 18&#10;        experience_multiplier = 1.0 + (experience_years * 0.03)  # 3% increase per year of experience&#10;&#10;        if self.player.education == &quot;High School&quot; or self.player.education == &quot;High School Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Retail Associate&quot;, &quot;salary&quot;: int(25000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Food Service Worker&quot;, &quot;salary&quot;: int(22000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Warehouse Worker&quot;, &quot;salary&quot;: int(28000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Office Clerk&quot;, &quot;salary&quot;: int(30000 * experience_multiplier)},&#10;            ]&#10;        elif self.player.education == &quot;Trade School&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Electrician&quot;, &quot;salary&quot;: int(45000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Plumber&quot;, &quot;salary&quot;: int(48000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;HVAC Technician&quot;, &quot;salary&quot;: int(50000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Automotive Mechanic&quot;, &quot;salary&quot;: int(42000 * experience_multiplier)},&#10;            ]&#10;        elif self.player.education == &quot;College Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Accountant&quot;, &quot;salary&quot;: int(60000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Marketing Manager&quot;, &quot;salary&quot;: int(65000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Software Developer&quot;, &quot;salary&quot;: int(75000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Financial Analyst&quot;, &quot;salary&quot;: int(70000 * experience_multiplier)},&#10;            ]&#10;        else:  # Default/basic jobs&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Retail Associate&quot;, &quot;salary&quot;: int(25000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Food Service Worker&quot;, &quot;salary&quot;: int(22000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Warehouse Worker&quot;, &quot;salary&quot;: int(28000 * experience_multiplier)},&#10;            ]&#10;&#10;        # Add some randomness to salaries (±10%)&#10;        for job in job_options:&#10;            job[&quot;salary&quot;] = int(job[&quot;salary&quot;] * random.uniform(0.9, 1.1))&#10;&#10;        # Filter out jobs that don't offer at least 5% more than current salary (if employed)&#10;        if self.player.job:&#10;            job_options = [job for job in job_options if job[&quot;salary&quot;] &gt;= current_salary * 1.05]&#10;&#10;        # If no jobs available after filtering&#10;        if not job_options:&#10;            print(&quot;\nAfter searching, you couldn't find any jobs that would be a significant&quot;)&#10;            print(&quot;improvement over your current position. Keep building your skills and&quot;)&#10;            print(&quot;try again later!&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        # Display job options&#10;        print(&quot;\nThe following job opportunities are available to you:&quot;)&#10;        for i, job in enumerate(job_options):&#10;            print(f&quot;{i+1}. {job['title']} - ${job['salary']}/year&quot;)&#10;&#10;        print(&quot;\n0. Cancel job search&quot;)&#10;&#10;        # Get player choice&#10;        choice = -1&#10;        while choice &lt; 0 or choice &gt; len(job_options):&#10;            try:&#10;                choice = int(input(f&quot;\nWhich job would you like to apply for? (0-{len(job_options)}): &quot;))&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        if choice == 0:&#10;            print(&quot;\nYou've decided not to change jobs at this time.&quot;)&#10;            input(&quot;\nPress Enter to continue...&quot;)&#10;            return&#10;&#10;        # Apply for job&#10;        selected_job = job_options[choice-1]&#10;&#10;        # Job application success chance based on qualifications&#10;        base_success_chance = 0.7  # 70% base chance&#10;&#10;        # Adjust for education&#10;        if self.player.education == &quot;College Graduate&quot;:&#10;            base_success_chance += 0.2&#10;        elif self.player.education == &quot;Trade School&quot;:&#10;            base_success_chance += 0.1&#10;&#10;        # Adjust for experience&#10;        base_success_chance += min(0.2, experience_years * 0.01)  # Up to 20% bonus for experience&#10;&#10;        # Cap at 95% chance&#10;        success_chance = min(0.95, base_success_chance)&#10;&#10;        print(f&quot;\nYou've applied for the {selected_job['title']} position.&quot;)&#10;        print(&quot;The hiring manager is reviewing your application...&quot;)&#10;        time.sleep(2)  # Dramatic pause&#10;&#10;        if random.random() &lt; success_chance:&#10;            print(&quot;\nCongratulations! You got the job!&quot;)&#10;&#10;            old_job = self.player.job&#10;            old_salary = self.player.salary&#10;&#10;            self.player.job = selected_job[&quot;title&quot;]&#10;            self.player.salary = selected_job[&quot;salary&quot;]&#10;&#10;            print(f&quot;\nYou are now a {self.player.job} earning ${self.player.salary}/year.&quot;)&#10;&#10;            if old_job:&#10;                salary_increase = self.player.salary - old_salary&#10;                percent_increase = (salary_increase / old_salary) * 100&#10;                print(f&quot;That's a raise of ${salary_increase}/year ({percent_increase:.1f}%)!&quot;)&#10;&#10;            print(f&quot;Your monthly income is now ${self.player.salary/12:.2f}.&quot;)&#10;        else:&#10;            print(&quot;\nUnfortunately, the company decided to go with another candidate.&quot;)&#10;            print(&quot;Don't be discouraged! Keep improving your skills and try again.&quot;)&#10;&#10;        input(&quot;\nPress Enter to continue...&quot;)&#10;&#10;    def clear_screen(self):&#10;        &quot;&quot;&quot;Clear the console screen.&quot;&quot;&quot;&#10;        os.system('cls' if os.name == 'nt' else 'clear')&#10;&#10;    def get_choice(self, prompt, choices):&#10;        &quot;&quot;&quot;Get a choice from the player from a list of options.&quot;&quot;&quot;&#10;        print(f&quot;\n{prompt}&quot;)&#10;        for i, choice in enumerate(choices):&#10;            print(f&quot;{i+1}. {choice}&quot;)&#10;&#10;        selection = 0&#10;        while selection &lt; 1 or selection &gt; len(choices):&#10;            try:&#10;                selection = int(input(f&quot;\nEnter your choice (1-{len(choices)}): &quot;))&#10;            except ValueError:&#10;                print(&quot;Please enter a valid number.&quot;)&#10;&#10;        return choices[selection-1]&#10;&#10;    def end_game(self, reason):&#10;        &quot;&quot;&quot;End the game and show final stats (text version).&quot;&quot;&quot;&#10;        self.clear_screen()&#10;        print(&quot;\n&quot; + &quot;=&quot; * 60)&#10;&#10;        if reason == &quot;retirement&quot;:&#10;            print(&quot;CONGRATULATIONS ON YOUR RETIREMENT!&quot;)&#10;            print(&quot;=&quot; * 60)&#10;            print(f&quot;\nAfter {self.current_year} years, you've reached retirement age!&quot;)&#10;        else:&#10;            print(&quot;GAME OVER&quot;)&#10;            print(&quot;=&quot; * 60)&#10;            print(f&quot;\nYour financial journey has ended after {self.current_year} years.&quot;)&#10;&#10;        # Calculate net worth&#10;        cash = self.player.cash&#10;        bank_balance = self.player.bank_account.balance if self.player.bank_account else 0&#10;        credit_card_debt = self.player.credit_card.balance if self.player.credit_card else 0&#10;&#10;        loan_debt = 0&#10;        for loan in self.player.loans:&#10;            loan_debt += loan.current_balance&#10;&#10;        asset_value = 0&#10;        for asset in self.player.assets:&#10;            asset_value += asset.current_value&#10;&#10;        net_worth = cash + bank_balance - credit_card_debt - loan_debt + asset_value&#10;&#10;        # Display final stats&#10;        print(&quot;\n--- FINAL FINANCIAL SUMMARY ---&quot;)&#10;        print(f&quot;Cash: ${cash:.2f}&quot;)&#10;        print(f&quot;Bank Balance: ${bank_balance:.2f}&quot;)&#10;        print(f&quot;Credit Card Debt: ${credit_card_debt:.2f}&quot;)&#10;        print(f&quot;Loan Debt: ${loan_debt:.2f}&quot;)&#10;        print(f&quot;Asset Value: ${asset_value:.2f}&quot;)&#10;        print(f&quot;Net Worth: ${net_worth:.2f}&quot;)&#10;        print(f&quot;Credit Score: {self.player.credit_score}&quot;)&#10;&#10;        # Family summary&#10;        if self.player.family:&#10;            print(&quot;\n--- FAMILY ---&quot;)&#10;            for member in self.player.family:&#10;                if member[&quot;relation&quot;] == &quot;Spouse&quot;:&#10;                    print(f&quot;Spouse: Age {member['age'] + self.current_year}&quot;)&#10;                else:&#10;                    print(f&quot;{member['relation']}: {member['name']}, Age {member['age'] + self.current_year}&quot;)&#10;&#10;        # Financial rating&#10;        if net_worth &gt;= 1000000:&#10;            rating = &quot;Financial Wizard&quot;&#10;        elif net_worth &gt;= 500000:&#10;            rating = &quot;Financially Secure&quot;&#10;        elif net_worth &gt;= 100000:&#10;            rating = &quot;Financially Stable&quot;&#10;        elif net_worth &gt;= 0:&#10;            rating = &quot;Breaking Even&quot;&#10;        else:&#10;            rating = &quot;In Debt&quot;&#10;&#10;        print(f&quot;\nFinancial Rating: {rating}&quot;)&#10;&#10;        print(&quot;\nThank you for playing MONEY SMARTZ!&quot;)&#10;        print(&quot;=&quot; * 60)&#10;&#10;        self.game_over = True&#10;        input(&quot;\nPress Enter to exit...&quot;)&#10;&#10;    def end_game_gui(self, reason):&#10;        &quot;&quot;&quot;End the game and show final stats (GUI version).&quot;&quot;&quot;&#10;        self.game_over = True&#10;        self.gui_manager.set_screen(EndGameScreen(self, reason))&#10;&#10;    def check_life_stage_events_gui(self):&#10;        &quot;&quot;&quot;Check for life stage events and show appropriate screens (GUI version).&quot;&quot;&quot;&#10;        # High school graduation&#10;        if self.player.age == 18 and self.player.education == &quot;High School&quot;:&#10;            from moneySmartz.screens.life_event_screens import HighSchoolGraduationScreen&#10;            self.gui_manager.set_screen(HighSchoolGraduationScreen(self))&#10;            return True&#10;&#10;        # College graduation (if went to college)&#10;        elif self.player.age == 22 and self.player.education == &quot;College (In Progress)&quot;:&#10;            from moneySmartz.screens.life_event_screens import CollegeGraduationScreen&#10;            self.gui_manager.set_screen(CollegeGraduationScreen(self))&#10;            return True&#10;&#10;        # First full-time job opportunity&#10;        elif self.player.age == 22 and not self.player.job and self.player.education != &quot;College (In Progress)&quot;:&#10;            from moneySmartz.screens.financial_screens import JobSearchScreen&#10;            self.gui_manager.set_screen(JobSearchScreen(self))&#10;            return True&#10;&#10;        # Car purchase opportunity&#10;        elif self.player.age == 20 and not any(a.asset_type == &quot;Car&quot; for a in self.player.assets):&#10;            from moneySmartz.screens.life_event_screens import CarPurchaseScreen&#10;            self.gui_manager.set_screen(CarPurchaseScreen(self))&#10;            return True&#10;&#10;        # House purchase opportunity&#10;        elif self.player.age == 30 and not any(a.asset_type == &quot;House&quot; for a in self.player.assets) and self.player.job:&#10;            self.gui_manager.set_screen(HousingScreen(self))&#10;            return True&#10;&#10;        # Family planning opportunity&#10;        elif self.player.age &gt;= 28 and not self.player.family and self.player.job:&#10;            if random.random() &lt; 0.1:  # 10% chance each year after 28&#10;                self.gui_manager.set_screen(FamilyPlanningScreen(self))&#10;                return True&#10;&#10;        return False&#10;&#10;    def pause_game(self):&#10;        &quot;&quot;&quot;Pause the game (for GUI mode).&quot;&quot;&quot;&#10;        self.paused = True&#10;&#10;    def play_game(self):&#10;        &quot;&quot;&quot;Resume the game from pause (for GUI mode).&quot;&quot;&quot;&#10;        self.paused = False&#10;&#10;    def save_state(self, filename=&quot;savegame.dat&quot;):&#10;        &quot;&quot;&quot;Save the current game state to a file.&quot;&quot;&quot;&#10;        import pickle&#10;        with open(filename, &quot;wb&quot;) as f:&#10;            pickle.dump(self, f)&#10;&#10;    def load_state(self, filename=&quot;savegame.dat&quot;):&#10;        &quot;&quot;&quot;Load the game state from a file, with error handling for empty/corrupt files.&quot;&quot;&quot;&#10;        import pickle&#10;        import os&#10;        if not os.path.exists(filename):&#10;            print(f&quot;Save file '{filename}' does not exist.&quot;)&#10;            return&#10;        if os.path.getsize(filename) == 0:&#10;            print(f&quot;Save file '{filename}' is empty. Cannot load game state.&quot;)&#10;            return&#10;        try:&#10;            with open(filename, &quot;rb&quot;) as f:&#10;                loaded_game = pickle.load(f)&#10;            self.__dict__.update(loaded_game.__dict__)&#10;        except Exception as e:&#10;            print(f&quot;Error loading game: {e}&quot;)&#10;&#10;    def quit(self):&#10;        &quot;&quot;&quot;Quit the game (for GUI mode).&quot;&quot;&quot;&#10;        import sys&#10;        self.game_over = True&#10;        if self.gui_manager:&#10;            self.gui_manager.running = False&#10;        sys.exit()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/moneySmartz/screens/game_screen.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/moneySmartz/screens/game_screen.py" />
              <option name="originalContent" value="import pygame&#10;import random&#10;from pygame.locals import *&#10;from moneySmartz.constants import *&#10;from moneySmartz.ui import Screen, Button&#10;&#10;class GameScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    The main game screen that shows the player's status and allows them to take actions.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.create_buttons()&#10;&#10;    def create_buttons(self):&#10;        &quot;&quot;&quot;Create the buttons for the game screen.&quot;&quot;&quot;&#10;        # Clear existing buttons&#10;        self.buttons = []&#10;&#10;        # Continue button (always present)&#10;        continue_button = Button(&#10;            SCREEN_WIDTH - 220, &#10;            SCREEN_HEIGHT - 60,&#10;            200, 50,&#10;            &quot;Continue to Next Month&quot;,&#10;            action=self.continue_to_next_month&#10;        )&#10;        self.buttons.append(continue_button)&#10;&#10;        # Banking buttons&#10;        if not self.game.player.bank_account:&#10;            bank_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;Open Bank Account&quot;,&#10;                action=self.open_bank_account&#10;            )&#10;            self.buttons.append(bank_button)&#10;        else:&#10;            view_bank_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Bank Account&quot;,&#10;                action=self.view_bank_account&#10;            )&#10;            self.buttons.append(view_bank_button)&#10;&#10;            deposit_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Deposit to Bank&quot;,&#10;                action=self.deposit_to_bank&#10;            )&#10;            self.buttons.append(deposit_button)&#10;&#10;            withdraw_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;Withdraw from Bank&quot;,&#10;                action=self.withdraw_from_bank&#10;            )&#10;            self.buttons.append(withdraw_button)&#10;&#10;            if not self.game.player.debit_card:&#10;                debit_button = Button(&#10;                    20, &#10;                    SCREEN_HEIGHT - 90,&#10;                    200, 50,&#10;                    &quot;Get Debit Card&quot;,&#10;                    action=self.get_debit_card&#10;                )&#10;                self.buttons.append(debit_button)&#10;&#10;        # Credit card buttons&#10;        if not self.game.player.credit_card and self.game.player.age &gt;= 18:&#10;            credit_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;Apply for Credit Card&quot;,&#10;                action=self.apply_for_credit_card&#10;            )&#10;            self.buttons.append(credit_button)&#10;        elif self.game.player.credit_card:&#10;            view_credit_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Credit Card&quot;,&#10;                action=self.view_credit_card&#10;            )&#10;            self.buttons.append(view_credit_button)&#10;&#10;            if self.game.player.credit_card.balance &gt; 0:&#10;                pay_credit_button = Button(&#10;                    240, &#10;                    SCREEN_HEIGHT - 210,&#10;                    200, 50,&#10;                    &quot;Pay Credit Card&quot;,&#10;                    action=self.pay_credit_card&#10;                )&#10;                self.buttons.append(pay_credit_button)&#10;&#10;        # Loan buttons&#10;        if self.game.player.loans:&#10;            view_loans_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;View Loans&quot;,&#10;                action=self.view_loans&#10;            )&#10;            self.buttons.append(view_loans_button)&#10;&#10;            pay_loan_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Make Extra Loan Payment&quot;,&#10;                action=self.make_extra_loan_payment&#10;            )&#10;            self.buttons.append(pay_loan_button)&#10;&#10;        # Asset buttons&#10;        if self.game.player.assets:&#10;            view_assets_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Assets&quot;,&#10;                action=self.view_assets&#10;            )&#10;            self.buttons.append(view_assets_button)&#10;&#10;        # Job buttons&#10;        if not self.game.player.job and self.game.player.age &gt;= 16:&#10;            job_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Look for a Job&quot;,&#10;                action=self.look_for_job&#10;            )&#10;            self.buttons.append(job_button)&#10;        elif self.game.player.job and random.random() &lt; 0.1:  # 10% chance of job opportunity each month&#10;            better_job_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Look for a Better Job&quot;,&#10;                action=self.look_for_job&#10;            )&#10;            self.buttons.append(better_job_button)&#10;&#10;        # --- System Control Buttons ---&#10;        pause_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            20,&#10;            90, 40,&#10;            &quot;Pause&quot;,&#10;            action=self.pause_game&#10;        )&#10;        self.buttons.append(pause_button)&#10;&#10;        play_button = Button(&#10;            SCREEN_WIDTH - 120,&#10;            20,&#10;            90, 40,&#10;            &quot;Play&quot;,&#10;            action=self.play_game&#10;        )&#10;        self.buttons.append(play_button)&#10;&#10;        save_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            70,&#10;            90, 40,&#10;            &quot;Save&quot;,&#10;            action=self.save_game&#10;        )&#10;        self.buttons.append(save_button)&#10;&#10;        quit_button = Button(&#10;            SCREEN_WIDTH - 120,&#10;            70,&#10;            90, 40,&#10;            &quot;Quit&quot;,&#10;            action=self.quit_game&#10;        )&#10;        self.buttons.append(quit_button)&#10;&#10;        # --- Shop Button ---&#10;        shop_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            SCREEN_HEIGHT - 120,&#10;            200, 50,&#10;            &quot;Shop&quot;,&#10;            action=self.open_shop&#10;        )&#10;        self.buttons.append(shop_button)&#10;&#10;    def continue_to_next_month(self):&#10;        &quot;&quot;&quot;Continue to the next month.&quot;&quot;&quot;&#10;        # Increment month&#10;        self.game.current_month += 1&#10;        if self.game.current_month &gt; 12:&#10;            self.game.current_month = 1&#10;            self.game.current_year += 1&#10;            self.game.player.age += 1&#10;            &#10;            # Apply interest to savings&#10;            if self.game.player.bank_account and self.game.player.bank_account.account_type == &quot;Savings&quot;:&#10;                self.game.player.bank_account.apply_interest()&#10;            &#10;            # Age assets&#10;            for asset in self.game.player.assets:&#10;                asset.age_asset()&#10;        &#10;        # Process monthly finances&#10;        self.game.process_monthly_finances()&#10;        &#10;        # Random events&#10;        if random.random() &lt; 0.3:  # 30% chance of an event each month&#10;            self.game.trigger_random_event()&#10;            # Don't proceed further until event is handled&#10;            return&#10;        &#10;        # Life stage events based on age&#10;        life_event_triggered = self.game.check_life_stage_events_gui()&#10;        &#10;        # If no life event was triggered, refresh the game screen&#10;        if not life_event_triggered:&#10;            # Check game over conditions&#10;            if self.game.player.age &gt;= 65:  # Retirement age&#10;                self.game.end_game_gui(&quot;retirement&quot;)&#10;            else:&#10;                # Refresh buttons (in case player status changed)&#10;                self.create_buttons()&#10;&#10;    def open_bank_account(self):&#10;        &quot;&quot;&quot;Open a bank account screen.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import BankAccountScreen&#10;        self.game.gui_manager.set_screen(BankAccountScreen(self.game))&#10;&#10;    def view_bank_account(self):&#10;        &quot;&quot;&quot;View bank account details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import BankDetailsScreen&#10;        self.game.gui_manager.set_screen(BankDetailsScreen(self.game))&#10;&#10;    def deposit_to_bank(self):&#10;        &quot;&quot;&quot;Deposit money to bank account.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import DepositScreen&#10;        self.game.gui_manager.set_screen(DepositScreen(self.game))&#10;&#10;    def withdraw_from_bank(self):&#10;        &quot;&quot;&quot;Withdraw money from bank account.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import WithdrawScreen&#10;        self.game.gui_manager.set_screen(WithdrawScreen(self.game))&#10;&#10;    def get_debit_card(self):&#10;        &quot;&quot;&quot;Get a debit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import GetDebitCardScreen&#10;        self.game.gui_manager.set_screen(GetDebitCardScreen(self.game))&#10;&#10;    def apply_for_credit_card(self):&#10;        &quot;&quot;&quot;Apply for a credit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import CreditCardScreen&#10;        self.game.gui_manager.set_screen(CreditCardScreen(self.game))&#10;&#10;    def view_credit_card(self):&#10;        &quot;&quot;&quot;View credit card details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import CreditCardDetailsScreen&#10;        self.game.gui_manager.set_screen(CreditCardDetailsScreen(self.game))&#10;&#10;    def pay_credit_card(self):&#10;        &quot;&quot;&quot;Make a payment on the credit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import PayCreditCardScreen&#10;        self.game.gui_manager.set_screen(PayCreditCardScreen(self.game))&#10;&#10;    def view_loans(self):&#10;        &quot;&quot;&quot;View loan details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import LoanDetailsScreen&#10;        self.game.gui_manager.set_screen(LoanDetailsScreen(self.game))&#10;&#10;    def make_extra_loan_payment(self):&#10;        &quot;&quot;&quot;Make an extra payment on a loan.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import ExtraLoanPaymentScreen&#10;        self.game.gui_manager.set_screen(ExtraLoanPaymentScreen(self.game))&#10;&#10;    def view_assets(self):&#10;        &quot;&quot;&quot;View asset details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import AssetDetailsScreen&#10;        self.game.gui_manager.set_screen(AssetDetailsScreen(self.game))&#10;&#10;    def look_for_job(self):&#10;        &quot;&quot;&quot;Look for a job or a better job.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import JobSearchScreen&#10;        self.game.gui_manager.set_screen(JobSearchScreen(self.game))&#10;&#10;    def open_shop(self):&#10;        &quot;&quot;&quot;Open the shop screen.&quot;&quot;&quot;&#10;        from moneySmartz.screens.shop_screen import ShopScreen&#10;        self.game.gui_manager.set_screen(ShopScreen(self.game))&#10;&#10;    def pause_game(self):&#10;        &quot;&quot;&quot;Pause the game (stops updates, disables actions).&quot;&quot;&quot;&#10;        self.game.paused = True&#10;        # Optionally, show a pause overlay or message&#10;&#10;    def play_game(self):&#10;        &quot;&quot;&quot;Resume the game from pause.&quot;&quot;&quot;&#10;        self.game.paused = False&#10;        # Optionally, hide pause overlay or message&#10;&#10;    def save_game(self):&#10;        &quot;&quot;&quot;Save the current game state.&quot;&quot;&quot;&#10;        self.game.save_state()&#10;        # Optionally, show a 'Game Saved' message&#10;&#10;    def quit_game(self):&#10;        &quot;&quot;&quot;Quit the game and return to main menu or exit.&quot;&quot;&quot;&#10;        self.game.quit()&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the game screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Header&#10;        pygame.draw.rect(surface, BLUE, (0, 0, SCREEN_WIDTH, 80))&#10;&#10;        # Title&#10;        title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        title_surface = title_font.render(f&quot;MONTH: {self.game.current_month}/YEAR: {self.game.current_year + 2023}&quot;, True, WHITE)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 25))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        age_surface = title_font.render(f&quot;AGE: {self.game.player.age}&quot;, True, WHITE)&#10;        age_rect = age_surface.get_rect(center=(SCREEN_WIDTH // 2, 55))&#10;        surface.blit(age_surface, age_rect)&#10;&#10;        # Player info section&#10;        info_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Name and education&#10;        self.draw_text(surface, f&quot;Name: {self.game.player.name}&quot;, 20, 100)&#10;        self.draw_text(surface, f&quot;Education: {self.game.player.education}&quot;, 20, 130)&#10;&#10;        # Job and salary&#10;        job_text = f&quot;Job: {self.game.player.job if self.game.player.job else 'Unemployed'}&quot;&#10;        self.draw_text(surface, job_text, 20, 160)&#10;&#10;        if self.game.player.job:&#10;            salary_text = f&quot;Salary: ${self.game.player.salary}/year (${self.game.player.salary/12:.2f}/month)&quot;&#10;            self.draw_text(surface, salary_text, 40, 190)&#10;&#10;        # Financial info&#10;        self.draw_text(surface, f&quot;Cash: ${self.game.player.cash:.2f}&quot;, 20, 230)&#10;&#10;        if self.game.player.bank_account:&#10;            bank_text = f&quot;Bank Account ({self.game.player.bank_account.account_type}): ${self.game.player.bank_account.balance:.2f}&quot;&#10;            self.draw_text(surface, bank_text, 20, 260)&#10;&#10;        if self.game.player.credit_card:&#10;            credit_text = f&quot;Credit Card: ${self.game.player.credit_card.balance:.2f}/{self.game.player.credit_card.limit:.2f}&quot;&#10;            self.draw_text(surface, credit_text, 20, 290)&#10;&#10;        self.draw_text(surface, f&quot;Credit Score: {self.game.player.credit_score}&quot;, 20, 320)&#10;&#10;        # Loans&#10;        if self.game.player.loans:&#10;            self.draw_text(surface, &quot;LOANS:&quot;, 400, 100)&#10;            for i, loan in enumerate(self.game.player.loans):&#10;                loan_text = f&quot;{loan.loan_type}: ${loan.current_balance:.2f} (${loan.monthly_payment:.2f}/month)&quot;&#10;                self.draw_text(surface, loan_text, 420, 130 + i * 30)&#10;&#10;        # Assets&#10;        if self.game.player.assets:&#10;            self.draw_text(surface, &quot;ASSETS:&quot;, 400, 230)&#10;            for i, asset in enumerate(self.game.player.assets):&#10;                asset_text = f&quot;{asset.name}: ${asset.current_value:.2f} ({asset.condition})&quot;&#10;                self.draw_text(surface, asset_text, 420, 260 + i * 30)&#10;&#10;        # Family&#10;        if self.game.player.family:&#10;            self.draw_text(surface, &quot;FAMILY:&quot;, 700, 100)&#10;            for i, member in enumerate(self.game.player.family):&#10;                if member[&quot;relation&quot;] == &quot;Spouse&quot;:&#10;                    family_text = f&quot;Spouse: Age {member['age'] + self.game.current_year}&quot;&#10;                else:&#10;                    family_text = f&quot;{member['relation']}: {member['name']}, Age {member['age'] + self.game.current_year}&quot;&#10;                self.draw_text(surface, family_text, 720, 130 + i * 30)&#10;&#10;        # Calculate and display net worth&#10;        cash = self.game.player.cash&#10;        bank_balance = self.game.player.bank_account.balance if self.game.player.bank_account else 0&#10;        credit_card_debt = self.game.player.credit_card.balance if self.game.player.credit_card else 0&#10;&#10;        loan_debt = 0&#10;        for loan in self.game.player.loans:&#10;            loan_debt += loan.current_balance&#10;&#10;        asset_value = 0&#10;        for asset in self.game.player.assets:&#10;            asset_value += asset.current_value&#10;&#10;        net_worth = cash + bank_balance - credit_card_debt - loan_debt + asset_value&#10;&#10;        # Net worth with color based on value&#10;        if net_worth &gt;= 0:&#10;            net_worth_color = GREEN&#10;        else:&#10;            net_worth_color = RED&#10;&#10;        net_worth_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        net_worth_text = f&quot;NET WORTH: ${net_worth:.2f}&quot;&#10;        net_worth_surface = net_worth_font.render(net_worth_text, True, net_worth_color)&#10;        net_worth_rect = net_worth_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT - 330))&#10;        surface.blit(net_worth_surface, net_worth_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;    def draw_text(self, surface, text, x, y, is_title=False):&#10;        &quot;&quot;&quot;Helper method to draw text.&quot;&quot;&quot;&#10;        font = pygame.font.SysFont('Arial', FONT_LARGE if is_title else FONT_MEDIUM)&#10;        text_surface = font.render(text, True, BLACK)&#10;        surface.blit(text_surface, (x, y))&#10;" />
              <option name="updatedContent" value="import pygame&#10;import random&#10;from pygame.locals import *&#10;from moneySmartz.constants import *&#10;from moneySmartz.ui import Screen, Button&#10;&#10;class GameScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    The main game screen that shows the player's status and allows them to take actions.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.create_buttons()&#10;&#10;    def create_buttons(self):&#10;        &quot;&quot;&quot;Create the buttons for the game screen.&quot;&quot;&quot;&#10;        # Clear existing buttons&#10;        self.buttons = []&#10;&#10;        # Continue button (always present)&#10;        continue_button = Button(&#10;            SCREEN_WIDTH - 220, &#10;            SCREEN_HEIGHT - 60,&#10;            200, 50,&#10;            &quot;Continue to Next Month&quot;,&#10;            action=self.continue_to_next_month&#10;        )&#10;        self.buttons.append(continue_button)&#10;&#10;        # Banking buttons&#10;        if not self.game.player.bank_account:&#10;            bank_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;Open Bank Account&quot;,&#10;                action=self.open_bank_account&#10;            )&#10;            self.buttons.append(bank_button)&#10;        else:&#10;            view_bank_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Bank Account&quot;,&#10;                action=self.view_bank_account&#10;            )&#10;            self.buttons.append(view_bank_button)&#10;&#10;            deposit_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Deposit to Bank&quot;,&#10;                action=self.deposit_to_bank&#10;            )&#10;            self.buttons.append(deposit_button)&#10;&#10;            withdraw_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;Withdraw from Bank&quot;,&#10;                action=self.withdraw_from_bank&#10;            )&#10;            self.buttons.append(withdraw_button)&#10;&#10;            if not self.game.player.debit_card:&#10;                debit_button = Button(&#10;                    20, &#10;                    SCREEN_HEIGHT - 90,&#10;                    200, 50,&#10;                    &quot;Get Debit Card&quot;,&#10;                    action=self.get_debit_card&#10;                )&#10;                self.buttons.append(debit_button)&#10;&#10;        # Credit card buttons&#10;        if not self.game.player.credit_card and self.game.player.age &gt;= 18:&#10;            credit_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;Apply for Credit Card&quot;,&#10;                action=self.apply_for_credit_card&#10;            )&#10;            self.buttons.append(credit_button)&#10;        elif self.game.player.credit_card:&#10;            view_credit_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Credit Card&quot;,&#10;                action=self.view_credit_card&#10;            )&#10;            self.buttons.append(view_credit_button)&#10;&#10;            if self.game.player.credit_card.balance &gt; 0:&#10;                pay_credit_button = Button(&#10;                    240, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Pay Credit Card&quot;,&#10;                action=self.pay_credit_card&#10;            )&#10;            self.buttons.append(pay_credit_button)&#10;&#10;        # Loan buttons&#10;        if self.game.player.loans:&#10;            view_loans_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;View Loans&quot;,&#10;                action=self.view_loans&#10;            )&#10;            self.buttons.append(view_loans_button)&#10;&#10;            pay_loan_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Make Extra Loan Payment&quot;,&#10;                action=self.make_extra_loan_payment&#10;            )&#10;            self.buttons.append(pay_loan_button)&#10;&#10;        # Asset buttons&#10;        if self.game.player.assets:&#10;            view_assets_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Assets&quot;,&#10;                action=self.view_assets&#10;            )&#10;            self.buttons.append(view_assets_button)&#10;&#10;        # Job buttons&#10;        if not self.game.player.job and self.game.player.age &gt;= 16:&#10;            job_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Look for a Job&quot;,&#10;                action=self.look_for_job&#10;            )&#10;            self.buttons.append(job_button)&#10;        elif self.game.player.job and random.random() &lt; 0.1:  # 10% chance of job opportunity each month&#10;            better_job_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Look for a Better Job&quot;,&#10;                action=self.look_for_job&#10;            )&#10;            self.buttons.append(better_job_button)&#10;&#10;        # --- System Control Buttons ---&#10;        # Move these buttons down below the top banner (e.g., y=100 and y=150)&#10;        pause_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            100,&#10;            90, 40,&#10;            &quot;Pause&quot;,&#10;            action=self.pause_game&#10;        )&#10;        self.buttons.append(pause_button)&#10;&#10;        play_button = Button(&#10;            SCREEN_WIDTH - 120,&#10;            100,&#10;            90, 40,&#10;            &quot;Play&quot;,&#10;            action=self.play_game&#10;        )&#10;        self.buttons.append(play_button)&#10;&#10;        save_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            150,&#10;            90, 40,&#10;            &quot;Save&quot;,&#10;            action=self.save_game&#10;        )&#10;        self.buttons.append(save_button)&#10;&#10;        load_button = Button(&#10;            SCREEN_WIDTH - 120,&#10;            150,&#10;            90, 40,&#10;            &quot;Load&quot;,&#10;            action=self.load_game&#10;        )&#10;        self.buttons.append(load_button)&#10;&#10;        quit_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            200,&#10;            190, 40,&#10;            &quot;Quit&quot;,&#10;            action=self.quit_game&#10;        )&#10;        self.buttons.append(quit_button)&#10;&#10;        # --- Shop Button ---&#10;        shop_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            SCREEN_HEIGHT - 120,&#10;            200, 50,&#10;            &quot;Shop&quot;,&#10;            action=self.open_shop&#10;        )&#10;        self.buttons.append(shop_button)&#10;&#10;    def continue_to_next_month(self):&#10;        &quot;&quot;&quot;Continue to the next month.&quot;&quot;&quot;&#10;        # Increment month&#10;        self.game.current_month += 1&#10;        if self.game.current_month &gt; 12:&#10;            self.game.current_month = 1&#10;            self.game.current_year += 1&#10;            self.game.player.age += 1&#10;            &#10;            # Apply interest to savings&#10;            if self.game.player.bank_account and self.game.player.bank_account.account_type == &quot;Savings&quot;:&#10;                self.game.player.bank_account.apply_interest()&#10;            &#10;            # Age assets&#10;            for asset in self.game.player.assets:&#10;                asset.age_asset()&#10;        &#10;        # Process monthly finances&#10;        self.game.process_monthly_finances()&#10;        &#10;        # Random events&#10;        if random.random() &lt; 0.3:  # 30% chance of an event each month&#10;            self.game.trigger_random_event()&#10;            # Don't proceed further until event is handled&#10;            return&#10;        &#10;        # Life stage events based on age&#10;        life_event_triggered = self.game.check_life_stage_events_gui()&#10;        &#10;        # If no life event was triggered, refresh the game screen&#10;        if not life_event_triggered:&#10;            # Check game over conditions&#10;            if self.game.player.age &gt;= 65:  # Retirement age&#10;                self.game.end_game_gui(&quot;retirement&quot;)&#10;            else:&#10;                # Refresh buttons (in case player status changed)&#10;                self.create_buttons()&#10;&#10;    def open_bank_account(self):&#10;        &quot;&quot;&quot;Open a bank account screen.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import BankAccountScreen&#10;        self.game.gui_manager.set_screen(BankAccountScreen(self.game))&#10;&#10;    def view_bank_account(self):&#10;        &quot;&quot;&quot;View bank account details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import BankDetailsScreen&#10;        self.game.gui_manager.set_screen(BankDetailsScreen(self.game))&#10;&#10;    def deposit_to_bank(self):&#10;        &quot;&quot;&quot;Deposit money to bank account.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import DepositScreen&#10;        self.game.gui_manager.set_screen(DepositScreen(self.game))&#10;&#10;    def withdraw_from_bank(self):&#10;        &quot;&quot;&quot;Withdraw money from bank account.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import WithdrawScreen&#10;        self.game.gui_manager.set_screen(WithdrawScreen(self.game))&#10;&#10;    def get_debit_card(self):&#10;        &quot;&quot;&quot;Get a debit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import GetDebitCardScreen&#10;        self.game.gui_manager.set_screen(GetDebitCardScreen(self.game))&#10;&#10;    def apply_for_credit_card(self):&#10;        &quot;&quot;&quot;Apply for a credit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import CreditCardScreen&#10;        self.game.gui_manager.set_screen(CreditCardScreen(self.game))&#10;&#10;    def view_credit_card(self):&#10;        &quot;&quot;&quot;View credit card details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import CreditCardDetailsScreen&#10;        self.game.gui_manager.set_screen(CreditCardDetailsScreen(self.game))&#10;&#10;    def pay_credit_card(self):&#10;        &quot;&quot;&quot;Make a payment on the credit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import PayCreditCardScreen&#10;        self.game.gui_manager.set_screen(PayCreditCardScreen(self.game))&#10;&#10;    def view_loans(self):&#10;        &quot;&quot;&quot;View loan details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import LoanDetailsScreen&#10;        self.game.gui_manager.set_screen(LoanDetailsScreen(self.game))&#10;&#10;    def make_extra_loan_payment(self):&#10;        &quot;&quot;&quot;Make an extra payment on a loan.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import ExtraLoanPaymentScreen&#10;        self.game.gui_manager.set_screen(ExtraLoanPaymentScreen(self.game))&#10;&#10;    def view_assets(self):&#10;        &quot;&quot;&quot;View asset details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import AssetDetailsScreen&#10;        self.game.gui_manager.set_screen(AssetDetailsScreen(self.game))&#10;&#10;    def look_for_job(self):&#10;        &quot;&quot;&quot;Look for a job or a better job.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import JobSearchScreen&#10;        self.game.gui_manager.set_screen(JobSearchScreen(self.game))&#10;&#10;    def open_shop(self):&#10;        &quot;&quot;&quot;Open the shop screen.&quot;&quot;&quot;&#10;        from moneySmartz.screens.shop_screen import ShopScreen&#10;        self.game.gui_manager.set_screen(ShopScreen(self.game))&#10;&#10;    def pause_game(self):&#10;        &quot;&quot;&quot;Pause the game (stops updates, disables actions).&quot;&quot;&quot;&#10;        self.game.paused = True&#10;        # Optionally, show a pause overlay or message&#10;&#10;    def play_game(self):&#10;        &quot;&quot;&quot;Resume the game from pause.&quot;&quot;&quot;&#10;        self.game.paused = False&#10;        # Optionally, hide pause overlay or message&#10;&#10;    def save_game(self):&#10;        &quot;&quot;&quot;Save the current game state.&quot;&quot;&quot;&#10;        self.game.save_state()&#10;        # Optionally, show a 'Game Saved' message&#10;&#10;    def load_game(self):&#10;        &quot;&quot;&quot;Load the saved game state.&quot;&quot;&quot;&#10;        self.game.load_state()&#10;        self.create_buttons()  # Refresh buttons after loading&#10;&#10;    def quit_game(self):&#10;        &quot;&quot;&quot;Quit the game and return to main menu or exit.&quot;&quot;&quot;&#10;        self.game.quit()&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the game screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Header&#10;        pygame.draw.rect(surface, BLUE, (0, 0, SCREEN_WIDTH, 80))&#10;&#10;        # Title&#10;        title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        title_surface = title_font.render(f&quot;MONTH: {self.game.current_month}/YEAR: {self.game.current_year + 2023}&quot;, True, WHITE)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 25))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        age_surface = title_font.render(f&quot;AGE: {self.game.player.age}&quot;, True, WHITE)&#10;        age_rect = age_surface.get_rect(center=(SCREEN_WIDTH // 2, 55))&#10;        surface.blit(age_surface, age_rect)&#10;&#10;        # Player info section&#10;        info_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Name and education&#10;        self.draw_text(surface, f&quot;Name: {self.game.player.name}&quot;, 20, 100)&#10;        self.draw_text(surface, f&quot;Education: {self.game.player.education}&quot;, 20, 130)&#10;&#10;        # Job and salary&#10;        job_text = f&quot;Job: {self.game.player.job if self.game.player.job else 'Unemployed'}&quot;&#10;        self.draw_text(surface, job_text, 20, 160)&#10;&#10;        if self.game.player.job:&#10;            salary_text = f&quot;Salary: ${self.game.player.salary}/year (${self.game.player.salary/12:.2f}/month)&quot;&#10;            self.draw_text(surface, salary_text, 40, 190)&#10;&#10;        # Financial info&#10;        self.draw_text(surface, f&quot;Cash: ${self.game.player.cash:.2f}&quot;, 20, 230)&#10;&#10;        if self.game.player.bank_account:&#10;            bank_text = f&quot;Bank Account ({self.game.player.bank_account.account_type}): ${self.game.player.bank_account.balance:.2f}&quot;&#10;            self.draw_text(surface, bank_text, 20, 260)&#10;&#10;        if self.game.player.credit_card:&#10;            credit_text = f&quot;Credit Card: ${self.game.player.credit_card.balance:.2f}/{self.game.player.credit_card.limit:.2f}&quot;&#10;            self.draw_text(surface, credit_text, 20, 290)&#10;&#10;        self.draw_text(surface, f&quot;Credit Score: {self.game.player.credit_score}&quot;, 20, 320)&#10;&#10;        # Loans&#10;        if self.game.player.loans:&#10;            self.draw_text(surface, &quot;LOANS:&quot;, 400, 100)&#10;            for i, loan in enumerate(self.game.player.loans):&#10;                loan_text = f&quot;{loan.loan_type}: ${loan.current_balance:.2f} (${loan.monthly_payment:.2f}/month)&quot;&#10;                self.draw_text(surface, loan_text, 420, 130 + i * 30)&#10;&#10;        # Assets&#10;        if self.game.player.assets:&#10;            self.draw_text(surface, &quot;ASSETS:&quot;, 400, 230)&#10;            for i, asset in enumerate(self.game.player.assets):&#10;                asset_text = f&quot;{asset.name}: ${asset.current_value:.2f} ({asset.condition})&quot;&#10;                self.draw_text(surface, asset_text, 420, 260 + i * 30)&#10;&#10;        # Family&#10;        if self.game.player.family:&#10;            self.draw_text(surface, &quot;FAMILY:&quot;, 700, 100)&#10;            for i, member in enumerate(self.game.player.family):&#10;                if member[&quot;relation&quot;] == &quot;Spouse&quot;:&#10;                    family_text = f&quot;Spouse: Age {member['age'] + self.game.current_year}&quot;&#10;                else:&#10;                    family_text = f&quot;{member['relation']}: {member['name']}, Age {member['age'] + self.game.current_year}&quot;&#10;                self.draw_text(surface, family_text, 720, 130 + i * 30)&#10;&#10;        # Calculate and display net worth&#10;        cash = self.game.player.cash&#10;        bank_balance = self.game.player.bank_account.balance if self.game.player.bank_account else 0&#10;        credit_card_debt = self.game.player.credit_card.balance if self.game.player.credit_card else 0&#10;&#10;        loan_debt = 0&#10;        for loan in self.game.player.loans:&#10;            loan_debt += loan.current_balance&#10;&#10;        asset_value = 0&#10;        for asset in self.game.player.assets:&#10;            asset_value += asset.current_value&#10;&#10;        net_worth = cash + bank_balance - credit_card_debt - loan_debt + asset_value&#10;&#10;        # Net worth with color based on value&#10;        if net_worth &gt;= 0:&#10;            net_worth_color = GREEN&#10;        else:&#10;            net_worth_color = RED&#10;&#10;        net_worth_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        net_worth_text = f&quot;NET WORTH: ${net_worth:.2f}&quot;&#10;        net_worth_surface = net_worth_font.render(net_worth_text, True, net_worth_color)&#10;        net_worth_rect = net_worth_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT - 330))&#10;        surface.blit(net_worth_surface, net_worth_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;    def draw_text(self, surface, text, x, y, is_title=False):&#10;        &quot;&quot;&quot;Helper method to draw text.&quot;&quot;&quot;&#10;        font = pygame.font.SysFont('Arial', FONT_LARGE if is_title else FONT_MEDIUM)&#10;        text_surface = font.render(text, True, BLACK)&#10;        surface.blit(text_surface, (x, y))" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>