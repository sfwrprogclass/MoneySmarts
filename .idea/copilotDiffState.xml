<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/moneySmarts/screens/financial_screens.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/moneySmarts/screens/financial_screens.py" />
              <option name="originalContent" value="import pygame&#10;import random&#10;from moneySmarts.constants import *&#10;from moneySmarts.ui import Screen, Button, TextInput&#10;from moneySmarts.models import BankAccount, Card, Loan, Asset&#10;&#10;class BankAccountScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for opening a bank account.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Account type selection&#10;        self.selected_account_type = &quot;Checking&quot;&#10;&#10;        # Buttons&#10;        checking_button = Button(&#10;            SCREEN_WIDTH // 2 - 220,&#10;            SCREEN_HEIGHT // 2 - 50,&#10;            200, 50,&#10;            &quot;Checking Account&quot;,&#10;            color=BLUE if self.selected_account_type == &quot;Checking&quot; else GRAY,&#10;            action=self.select_checking&#10;        )&#10;&#10;        savings_button = Button(&#10;            SCREEN_WIDTH // 2 + 20,&#10;            SCREEN_HEIGHT // 2 - 50,&#10;            200, 50,&#10;            &quot;Savings Account&quot;,&#10;            color=BLUE if self.selected_account_type == &quot;Savings&quot; else GRAY,&#10;            action=self.select_savings&#10;        )&#10;&#10;        open_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 50,&#10;            200, 50,&#10;            &quot;Open Account&quot;,&#10;            action=self.open_account&#10;        )&#10;&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 120,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;&#10;        self.buttons = [checking_button, savings_button, open_button, back_button]&#10;&#10;        # Initial deposit input&#10;        self.deposit_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2 + 10,&#10;            300, 30,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10,&#10;            initial_text=&quot;50&quot;&#10;        )&#10;&#10;    def select_checking(self):&#10;        &quot;&quot;&quot;Select checking account type.&quot;&quot;&quot;&#10;        self.selected_account_type = &quot;Checking&quot;&#10;        self.buttons[0].color = BLUE&#10;        self.buttons[1].color = GRAY&#10;&#10;    def select_savings(self):&#10;        &quot;&quot;&quot;Select savings account type.&quot;&quot;&quot;&#10;        self.selected_account_type = &quot;Savings&quot;&#10;        self.buttons[0].color = GRAY&#10;        self.buttons[1].color = BLUE&#10;&#10;    def open_account(self):&#10;        &quot;&quot;&quot;Open the selected account type.&quot;&quot;&quot;&#10;        try:&#10;            deposit_amount = float(self.deposit_input.text)&#10;            if deposit_amount &lt;= 0:&#10;                return  # Invalid amount&#10;            if deposit_amount &gt; self.game.player.cash:&#10;                return  # Not enough cash&#10;&#10;            # Create account&#10;            if self.selected_account_type == &quot;Checking&quot;:&#10;                self.game.player.bank_account = BankAccount(&quot;Checking&quot;)&#10;                self.game.player.cash -= deposit_amount&#10;                self.game.player.bank_account.deposit(deposit_amount)&#10;                from moneySmarts.screens.base_screens import DebitCardScreen&#10;                self.game.gui_manager.set_screen(DebitCardScreen(self.game))&#10;            else:&#10;                self.game.player.savings_account = BankAccount(&quot;Savings&quot;)&#10;                self.game.player.cash -= deposit_amount&#10;                self.game.player.savings_account.deposit(deposit_amount)&#10;                from moneySmarts.screens.game_screen import GameScreen&#10;                self.game.gui_manager.set_screen(GameScreen(self.game))&#10;        except ValueError:&#10;            # Invalid input, do nothing&#10;            pass&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def handle_events(self, events):&#10;        &quot;&quot;&quot;Handle pygame events.&quot;&quot;&quot;&#10;        super().handle_events(events)&#10;        self.deposit_input.update(events)&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the bank account screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Open a Bank Account&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Explanation text&#10;        text_lines = [&#10;            &quot;You can open a checking account for everyday transactions&quot;,&#10;            &quot;or a savings account that earns interest.&quot;,&#10;            &quot;&quot;,&#10;            f&quot;Your current cash: ${self.game.player.cash:.2f}&quot;,&#10;            &quot;&quot;,&#10;            &quot;Initial deposit amount:&quot;&#10;        ]&#10;&#10;        for i, line in enumerate(text_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Draw deposit input&#10;        self.deposit_input.draw(surface)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class BankDetailsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for viewing bank account details.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Transaction history scroll&#10;        self.scroll_position = 0&#10;        self.max_visible_transactions = 10&#10;&#10;        # Buttons&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;&#10;        scroll_up_button = Button(&#10;            SCREEN_WIDTH - 80,&#10;            150,&#10;            60, 30,&#10;            &quot;▲&quot;,&#10;            action=self.scroll_up&#10;        )&#10;&#10;        scroll_down_button = Button(&#10;            SCREEN_WIDTH - 80,&#10;            SCREEN_HEIGHT - 150,&#10;            60, 30,&#10;            &quot;▼&quot;,&#10;            action=self.scroll_down&#10;        )&#10;&#10;        self.buttons = [back_button, scroll_up_button, scroll_down_button]&#10;&#10;    def scroll_up(self):&#10;        &quot;&quot;&quot;Scroll transaction history up.&quot;&quot;&quot;&#10;        if self.scroll_position &gt; 0:&#10;            self.scroll_position -= 1&#10;&#10;    def scroll_down(self):&#10;        &quot;&quot;&quot;Scroll transaction history down.&quot;&quot;&quot;&#10;        if self.scroll_position &lt; max(0, len(self.game.player.bank_account.transaction_history) - self.max_visible_transactions):&#10;            self.scroll_position += 1&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the bank details screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Bank Account Details&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Account info&#10;        account_type = self.game.player.bank_account.account_type&#10;        balance = self.game.player.bank_account.balance&#10;&#10;        info_lines = [&#10;            f&quot;Account Type: {account_type}&quot;,&#10;            f&quot;Current Balance: ${balance:.2f}&quot;&#10;        ]&#10;&#10;        if account_type == &quot;Savings&quot;:&#10;            interest_rate = self.game.player.bank_account.interest_rate * 100&#10;            annual_interest = balance * self.game.player.bank_account.interest_rate&#10;            info_lines.extend([&#10;                f&quot;Interest Rate: {interest_rate:.1f}% annually&quot;,&#10;                f&quot;Projected Annual Interest: ${annual_interest:.2f}&quot;&#10;            ])&#10;&#10;        if self.game.player.debit_card:&#10;            info_lines.append(&quot;You have a debit card linked to this account.&quot;)&#10;&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 100 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Transaction history&#10;        history_title = self.title_font.render(&quot;Transaction History&quot;, True, BLACK)&#10;        history_rect = history_title.get_rect(center=(SCREEN_WIDTH // 2, 250))&#10;        surface.blit(history_title, history_rect)&#10;&#10;        # Draw transaction list&#10;        if self.game.player.bank_account.transaction_history:&#10;            # Draw scrollable area background&#10;            scroll_area = pygame.Rect(100, 280, SCREEN_WIDTH - 200, 300)&#10;            pygame.draw.rect(surface, LIGHT_GRAY, scroll_area)&#10;            pygame.draw.rect(surface, BLACK, scroll_area, 2)  # Border&#10;&#10;            # Get visible transactions&#10;            visible_transactions = self.game.player.bank_account.transaction_history[&#10;                self.scroll_position:self.scroll_position + self.max_visible_transactions&#10;            ]&#10;&#10;            for i, transaction in enumerate(visible_transactions):&#10;                if transaction[&quot;type&quot;] == &quot;deposit&quot;:&#10;                    text = f&quot;Deposit: +${transaction['amount']:.2f}&quot;&#10;                    color = GREEN&#10;                elif transaction[&quot;type&quot;] == &quot;withdrawal&quot;:&#10;                    text = f&quot;Withdrawal: -${transaction['amount']:.2f}&quot;&#10;                    color = RED&#10;                elif transaction[&quot;type&quot;] == &quot;interest&quot;:&#10;                    text = f&quot;Interest: +${transaction['amount']:.2f}&quot;&#10;                    color = BLUE&#10;                else:&#10;                    text = f&quot;{transaction['type']}: ${transaction['amount']:.2f}&quot;&#10;                    color = BLACK&#10;&#10;                text_surface = self.text_font.render(text, True, color)&#10;                text_rect = text_surface.get_rect(midleft=(120, 300 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;        else:&#10;            no_transactions = self.text_font.render(&quot;No transactions yet.&quot;, True, BLACK)&#10;            no_transactions_rect = no_transactions.get_rect(center=(SCREEN_WIDTH // 2, 320))&#10;            surface.blit(no_transactions, no_transactions_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class DepositScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for depositing money to a bank account.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Amount input&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;&#10;        # Buttons&#10;        deposit_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 60,&#10;            200, 50,&#10;            &quot;Deposit&quot;,&#10;            action=self.make_deposit&#10;        )&#10;&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 130,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;&#10;        self.buttons = [deposit_button, back_button]&#10;&#10;        # Status message&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;&#10;    def make_deposit(self):&#10;        &quot;&quot;&quot;Make a deposit to the bank account.&quot;&quot;&quot;&#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;&#10;            if amount &gt; self.game.player.cash:&#10;                self.status_message = &quot;You don't have that much cash.&quot;&#10;                self.status_color = RED&#10;                return&#10;&#10;            # Make deposit&#10;            self.game.player.cash -= amount&#10;            self.game.player.bank_account.deposit(amount)&#10;&#10;            self.status_message = f&quot;Successfully deposited ${amount:.2f}.&quot;&#10;            self.status_color = GREEN&#10;&#10;            # Clear input&#10;            self.amount_input.text = &quot;&quot;&#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def handle_events(self, events):&#10;        &quot;&quot;&quot;Handle pygame events.&quot;&quot;&quot;&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the deposit screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Deposit to Bank&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Info text&#10;        info_lines = [&#10;            f&quot;Your current cash: ${self.game.player.cash:.2f}&quot;,&#10;            f&quot;Your current bank balance: ${self.game.player.bank_account.balance:.2f}&quot;,&#10;            &quot;&quot;,&#10;            &quot;How much would you like to deposit?&quot;&#10;        ]&#10;&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Draw amount input&#10;        self.amount_input.draw(surface)&#10;&#10;        # Draw status message&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 30))&#10;            surface.blit(status_surface, status_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class WithdrawScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for withdrawing money from a bank account.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Amount input&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;&#10;        # Buttons&#10;        withdraw_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 60,&#10;            200, 50,&#10;            &quot;Withdraw&quot;,&#10;            action=self.make_withdrawal&#10;        )&#10;&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 130,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;&#10;        self.buttons = [withdraw_button, back_button]&#10;&#10;        # Status message&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;&#10;    def make_withdrawal(self):&#10;        &quot;&quot;&quot;Make a withdrawal from the bank account.&quot;&quot;&quot;&#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;&#10;            if amount &gt; self.game.player.bank_account.balance:&#10;                self.status_message = &quot;You don't have that much in your account.&quot;&#10;                self.status_color = RED&#10;                return&#10;&#10;            # Make withdrawal&#10;            self.game.player.bank_account.withdraw(amount)&#10;            self.game.player.cash += amount&#10;&#10;            self.status_message = f&quot;Successfully withdrew ${amount:.2f}.&quot;&#10;            self.status_color = GREEN&#10;&#10;            # Clear input&#10;            self.amount_input.text = &quot;&quot;&#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def handle_events(self, events):&#10;        &quot;&quot;&quot;Handle pygame events.&quot;&quot;&quot;&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the withdraw screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Withdraw from Bank&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Info text&#10;        info_lines = [&#10;            f&quot;Your current cash: ${self.game.player.cash:.2f}&quot;,&#10;            f&quot;Your current bank balance: ${self.game.player.bank_account.balance:.2f}&quot;,&#10;            &quot;&quot;,&#10;            &quot;How much would you like to withdraw?&quot;&#10;        ]&#10;&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Draw amount input&#10;        self.amount_input.draw(surface)&#10;&#10;        # Draw status message&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 30))&#10;            surface.blit(status_surface, status_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class GetDebitCardScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for getting a debit card.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Buttons&#10;        get_card_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 50,&#10;            200, 50,&#10;            &quot;Get Debit Card&quot;,&#10;            action=self.get_debit_card&#10;        )&#10;&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 120,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;&#10;        self.buttons = [get_card_button, back_button]&#10;&#10;    def get_debit_card(self):&#10;        &quot;&quot;&quot;Get a debit card and go back to the game screen.&quot;&quot;&quot;&#10;        self.game.player.debit_card = Card(&quot;Debit&quot;)&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the debit card screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Get a Debit Card&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Card image (simple rectangle)&#10;        card_rect = pygame.Rect(SCREEN_WIDTH // 2 - 125, 150, 250, 150)&#10;        pygame.draw.rect(surface, BLUE, card_rect)&#10;        pygame.draw.rect(surface, BLACK, card_rect, 2)  # Border&#10;&#10;        # Card text&#10;        card_title = self.text_font.render(&quot;DEBIT&quot;, True, WHITE)&#10;        card_title_rect = card_title.get_rect(center=(SCREEN_WIDTH // 2, 180))&#10;        surface.blit(card_title, card_title_rect)&#10;&#10;        card_name = self.text_font.render(self.game.player.name, True, WHITE)&#10;        card_name_rect = card_name.get_rect(center=(SCREEN_WIDTH // 2, 220))&#10;        surface.blit(card_name, card_name_rect)&#10;&#10;        card_number = self.text_font.render(&quot;**** **** **** 1234&quot;, True, WHITE)&#10;        card_number_rect = card_number.get_rect(center=(SCREEN_WIDTH // 2, 260))&#10;        surface.blit(card_number, card_number_rect)&#10;&#10;        # Explanation text&#10;        text_lines = [&#10;            &quot;A debit card allows you to make purchases directly from your checking account.&quot;,&#10;            &quot;There is no fee for this card.&quot;,&#10;            &quot;&quot;,&#10;            &quot;Would you like to get a debit card?&quot;&#10;        ]&#10;&#10;        for i, line in enumerate(text_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 350 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;# Placeholder classes for the remaining financial screens&#10;# These would be implemented similarly to the above screens&#10;&#10;class CreditCardScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for applying for a credit card.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE, bold=True)&#10;        self.small_font = pygame.font.SysFont('Arial', FONT_SMALL)&#10;        self.message = &quot;&quot;&#10;        self.message_color = BLACK&#10;        self.approved = False&#10;        self.credit_limit = 0&#10;&#10;        # Create back button&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100, &#10;            SCREEN_HEIGHT - 70, &#10;            200, 50, &#10;            &quot;Back&quot;, &#10;            action=self.go_back&#10;        )&#10;&#10;        self.buttons = [back_button]&#10;&#10;        # Check eligibility and create apply button if eligible&#10;        self.check_eligibility()&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def check_eligibility(self):&#10;        # Check if player exists and is eligible for a credit card&#10;        if not self.game.player:&#10;            self.message = &quot;Game not started yet.&quot;&#10;            self.message_color = RED&#10;        elif self.game.player.age &lt; 18:&#10;            self.message = &quot;You must be at least 18 years old to apply for a credit card.&quot;&#10;            self.message_color = RED&#10;        elif self.game.player.credit_card:&#10;            self.message = &quot;You already have a credit card.&quot;&#10;            self.message_color = BLUE&#10;        elif not self.game.player.job:&#10;            self.message = &quot;You need a job to qualify for a credit card.&quot;&#10;            self.message_color = RED&#10;        else:&#10;            self.message = &quot;You are eligible to apply for a credit card. Your approval and credit limit will be based on your income and credit score.&quot;&#10;            self.message_color = GREEN&#10;&#10;            # Add apply button&#10;            apply_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT // 2,&#10;                200, 50,&#10;                &quot;Apply Now&quot;,&#10;                color=GREEN,&#10;                hover_color=LIGHT_GREEN,&#10;                action=self.apply_for_card&#10;            )&#10;&#10;            self.buttons.append(apply_button)&#10;&#10;    def apply_for_card(self):&#10;        # Calculate credit limit based on income and credit score&#10;        base_limit = min(self.game.player.salary * 0.2, 5000)  # 20% of salary or $5000, whichever is lower&#10;&#10;        # Adjust based on credit score&#10;        if self.game.player.credit_score &gt;= 750:&#10;            self.credit_limit = base_limit * 1.5&#10;        elif self.game.player.credit_score &gt;= 700:&#10;            self.credit_limit = base_limit * 1.2&#10;        elif self.game.player.credit_score &gt;= 650:&#10;            self.credit_limit = base_limit&#10;        elif self.game.player.credit_score &gt;= 600:&#10;            self.credit_limit = base_limit * 0.8&#10;        else:&#10;            self.credit_limit = base_limit * 0.5&#10;&#10;        # Approve the card&#10;        self.game.player.credit_card = Card(&quot;Credit&quot;, self.credit_limit)&#10;        self.approved = True&#10;&#10;        # Update message&#10;        self.message = f&quot;Congratulations! You've been approved for a credit card with a limit of ${self.credit_limit:.2f}. Use your credit card wisely to build your credit score.&quot;&#10;        self.message_color = GREEN&#10;&#10;        # Remove apply button&#10;        self.buttons = [self.buttons[0]]  # Keep only the back button&#10;&#10;        # Add view details button&#10;        details_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2,&#10;            200, 50,&#10;            &quot;View Card Details&quot;,&#10;            action=self.view_card_details&#10;        )&#10;&#10;        self.buttons.append(details_button)&#10;&#10;    def view_card_details(self):&#10;        from moneySmarts.screens.financial_screens import CreditCardDetailsScreen&#10;        self.game.gui_manager.set_screen(CreditCardDetailsScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;&#10;        # Draw header&#10;        header_rect = pygame.Rect(0, 0, SCREEN_WIDTH, 80)&#10;        pygame.draw.rect(surface, PURPLE, header_rect)&#10;&#10;        header_text = self.title_font.render(&quot;CREDIT CARD APPLICATION&quot;, True, WHITE)&#10;        header_rect = header_text.get_rect(center=(SCREEN_WIDTH // 2, 40))&#10;        surface.blit(header_text, header_rect)&#10;&#10;        # Draw player info&#10;        info_y = 100&#10;        &#10;        # Check if player exists before accessing attributes&#10;        if self.game.player:&#10;            credit_score_text = self.font.render(f&quot;Your Credit Score: {self.game.player.credit_score}&quot;, True, BLACK)&#10;            surface.blit(credit_score_text, (50, info_y))&#10;&#10;            if self.game.player.job:&#10;                income_text = self.font.render(f&quot;Annual Income: ${self.game.player.salary}&quot;, True, BLACK)&#10;                surface.blit(income_text, (50, info_y + 30))&#10;&#10;        # Draw message&#10;        message_lines = []&#10;        words = self.message.split()&#10;        current_line = []&#10;&#10;        for word in words:&#10;            current_line.append(word)&#10;            if len(' '.join(current_line)) &gt; 60:  # Adjust based on font size&#10;                message_lines.append(' '.join(current_line[:-1]))&#10;                current_line = [current_line[-1]]&#10;&#10;        if current_line:&#10;            message_lines.append(' '.join(current_line))&#10;&#10;        for i, line in enumerate(message_lines):&#10;            message_text = self.font.render(line, True, self.message_color)&#10;            message_rect = message_text.get_rect(center=(SCREEN_WIDTH // 2, 180 + i * 30))&#10;            surface.blit(message_text, message_rect)&#10;&#10;        # If approved, draw the credit card&#10;        if self.approved:&#10;            card_rect = pygame.Rect(SCREEN_WIDTH // 2 - 125, 250, 250, 150)&#10;            pygame.draw.rect(surface, PURPLE, card_rect)&#10;            pygame.draw.rect(surface, BLACK, card_rect, 2)  # Border&#10;&#10;            # Card text&#10;            card_title = self.font.render(&quot;CREDIT CARD&quot;, True, WHITE)&#10;            card_title_rect = card_title.get_rect(center=(SCREEN_WIDTH // 2, 280))&#10;            surface.blit(card_title, card_title_rect)&#10;&#10;            card_name = self.font.render(self.game.player.name, True, WHITE)&#10;            card_name_rect = card_name.get_rect(center=(SCREEN_WIDTH // 2, 320))&#10;            surface.blit(card_name, card_name_rect)&#10;&#10;            card_number = self.font.render(&quot;**** **** **** 1234&quot;, True, WHITE)&#10;            card_number_rect = card_number.get_rect(center=(SCREEN_WIDTH // 2, 350))&#10;            surface.blit(card_number, card_number_rect)&#10;&#10;            limit_text = self.small_font.render(f&quot;Credit Limit: ${self.credit_limit:.2f}&quot;, True, WHITE)&#10;            limit_rect = limit_text.get_rect(center=(SCREEN_WIDTH // 2, 380))&#10;            surface.blit(limit_text, limit_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class CreditCardDetailsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for viewing credit card details.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        &#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.small_font = pygame.font.SysFont('Arial', FONT_SMALL)&#10;        &#10;        # Transaction history scroll&#10;        self.scroll_position = 0&#10;        self.max_visible_transactions = 8&#10;        &#10;        # Buttons&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 220, &#10;            SCREEN_HEIGHT - 80, &#10;            200, 50, &#10;            &quot;Back&quot;, &#10;            action=self.go_back&#10;        )&#10;        &#10;        pay_button = Button(&#10;            SCREEN_WIDTH // 2 + 20, &#10;            SCREEN_HEIGHT - 80, &#10;            200, 50, &#10;            &quot;Make Payment&quot;, &#10;            action=self.make_payment&#10;        )&#10;        &#10;        scroll_up_button = Button(&#10;            SCREEN_WIDTH - 80, &#10;            200, &#10;            60, 30, &#10;            &quot;▲&quot;, &#10;            action=self.scroll_up&#10;        )&#10;        &#10;        scroll_down_button = Button(&#10;            SCREEN_WIDTH - 80, &#10;            SCREEN_HEIGHT - 200, &#10;            60, 30, &#10;            &quot;▼&quot;, &#10;            action=self.scroll_down&#10;        )&#10;        &#10;        self.buttons = [back_button, pay_button, scroll_up_button, scroll_down_button]&#10;&#10;    def scroll_up(self):&#10;        &quot;&quot;&quot;Scroll transaction history up.&quot;&quot;&quot;&#10;        if self.scroll_position &gt; 0:&#10;            self.scroll_position -= 1&#10;&#10;    def scroll_down(self):&#10;        &quot;&quot;&quot;Scroll transaction history down.&quot;&quot;&quot;&#10;        if self.game.player and self.game.player.credit_card:&#10;            if self.scroll_position &lt; max(0, len(self.game.player.credit_card.transaction_history) - self.max_visible_transactions):&#10;                self.scroll_position += 1&#10;&#10;    def make_payment(self):&#10;        &quot;&quot;&quot;Navigate to the payment screen.&quot;&quot;&quot;&#10;        self.game.gui_manager.set_screen(PayCreditCardScreen(self.game))&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        &#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Credit Card Details&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        &#10;        # Check if player exists and has been initialized&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;        &#10;        # Check if player has a credit card&#10;        if not self.game.player.credit_card:&#10;            no_card_text = self.text_font.render(&quot;You don't have a credit card yet.&quot;, True, BLACK)&#10;            no_card_rect = no_card_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_card_text, no_card_rect)&#10;            return&#10;        &#10;        # Credit card visual&#10;        card_rect = pygame.Rect(50, 100, 300, 180)&#10;        pygame.draw.rect(surface, PURPLE, card_rect)&#10;        pygame.draw.rect(surface, BLACK, card_rect, 2)  # Border&#10;        &#10;        # Card text&#10;        card_title = self.text_font.render(&quot;CREDIT CARD&quot;, True, WHITE)&#10;        card_title_rect = card_title.get_rect(center=(card_rect.centerx, card_rect.top + 30))&#10;        surface.blit(card_title, card_title_rect)&#10;        &#10;        card_name = self.text_font.render(self.game.player.name, True, WHITE)&#10;        card_name_rect = card_name.get_rect(center=(card_rect.centerx, card_rect.top + 80))&#10;        surface.blit(card_name, card_name_rect)&#10;        &#10;        card_number = self.text_font.render(&quot;**** **** **** 1234&quot;, True, WHITE)&#10;        card_number_rect = card_number.get_rect(center=(card_rect.centerx, card_rect.top + 120))&#10;        surface.blit(card_number, card_number_rect)&#10;        &#10;        limit_text = self.small_font.render(f&quot;Credit Limit: ${self.game.player.credit_card.limit:.2f}&quot;, True, WHITE)&#10;        limit_rect = limit_text.get_rect(center=(card_rect.centerx, card_rect.top + 150))&#10;        surface.blit(limit_text, limit_rect)&#10;&#10;        # Account information&#10;        info_x = 380&#10;        info_y = 120&#10;        &#10;        info_lines = [&#10;            f&quot;Credit Limit: ${self.game.player.credit_card.limit:.2f}&quot;,&#10;            f&quot;Current Balance: ${self.game.player.credit_card.balance:.2f}&quot;,&#10;            f&quot;Available Credit: ${self.game.player.credit_card.limit - self.game.player.credit_card.balance:.2f}&quot;&#10;        ]&#10;        &#10;        # Add minimum payment if there's a balance&#10;        if self.game.player.credit_card.balance &gt; 0:&#10;            min_payment = max(25, self.game.player.credit_card.balance * 0.03)&#10;            info_lines.append(f&quot;Minimum Payment: ${min_payment:.2f}&quot;)&#10;        &#10;        for i, line in enumerate(info_lines):&#10;            color = RED if &quot;Balance:&quot; in line and self.game.player.credit_card.balance &gt; 0 else BLACK&#10;            text_surface = self.text_font.render(line, True, color)&#10;            surface.blit(text_surface, (info_x, info_y + i * 35))&#10;        &#10;        # Transaction history&#10;        history_title = self.text_font.render(&quot;Transaction History:&quot;, True, BLACK)&#10;        surface.blit(history_title, (50, 300))&#10;        &#10;        # Transaction history area&#10;        history_rect = pygame.Rect(50, 330, SCREEN_WIDTH - 150, 250)&#10;        pygame.draw.rect(surface, LIGHT_GRAY, history_rect)&#10;        pygame.draw.rect(surface, BLACK, history_rect, 2)&#10;        &#10;        # Display transactions&#10;        if self.game.player.credit_card.transaction_history:&#10;            visible_transactions = self.game.player.credit_card.transaction_history[&#10;                self.scroll_position:self.scroll_position + self.max_visible_transactions&#10;            ]&#10;            &#10;            for i, transaction in enumerate(visible_transactions):&#10;                y_pos = 345 + i * 30&#10;                if transaction[&quot;type&quot;] == &quot;charge&quot;:&#10;                    text = f&quot;Charge: ${transaction['amount']:.2f}&quot;&#10;                    color = RED&#10;                elif transaction[&quot;type&quot;] == &quot;payment&quot;:&#10;                    text = f&quot;Payment: -${transaction['amount']:.2f}&quot;&#10;                    color = GREEN&#10;                else:&#10;                    text = f&quot;{transaction['type']}: ${transaction['amount']:.2f}&quot;&#10;                    color = BLACK&#10;                &#10;                text_surface = self.small_font.render(text, True, color)&#10;                surface.blit(text_surface, (60, y_pos))&#10;        else:&#10;            no_transactions = self.text_font.render(&quot;No transactions yet.&quot;, True, BLACK)&#10;            no_transactions_rect = no_transactions.get_rect(center=(history_rect.centerx, history_rect.centery))&#10;            surface.blit(no_transactions, no_transactions_rect)&#10;        &#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class PayCreditCardScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for paying a credit card.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        &#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        &#10;        # Calculate minimum payment (with null checks)&#10;        if self.game.player and self.game.player.credit_card:&#10;            self.min_payment = max(25, self.game.player.credit_card.balance * 0.03)&#10;        else:&#10;            self.min_payment = 25  # Default minimum payment&#10;        &#10;        # Amount input&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2 + 50,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;        &#10;        # Status message&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;        &#10;        # Buttons&#10;        min_payment_button = Button(&#10;            SCREEN_WIDTH // 2 - 320,&#10;            SCREEN_HEIGHT // 2 - 20,&#10;            200, 50,&#10;            f&quot;Pay Minimum (${self.min_payment:.2f})&quot;,&#10;            color=BLUE,&#10;            hover_color=LIGHT_BLUE,&#10;            action=self.pay_minimum&#10;        )&#10;        &#10;        # Calculate button text with null checks&#10;        if self.game.player and self.game.player.credit_card:&#10;            full_payment_text = f&quot;Pay Full (${self.game.player.credit_card.balance:.2f})&quot;&#10;        else:&#10;            full_payment_text = &quot;Pay Full (N/A)&quot;&#10;        &#10;        full_payment_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 - 20,&#10;            200, 50,&#10;            full_payment_text,&#10;            color=GREEN,&#10;            hover_color=LIGHT_GREEN,&#10;            action=self.pay_full&#10;        )&#10;        &#10;        custom_payment_button = Button(&#10;            SCREEN_WIDTH // 2 + 120,&#10;            SCREEN_HEIGHT // 2 - 20,&#10;            200, 50,&#10;            &quot;Pay Custom Amount&quot;,&#10;            action=self.pay_custom&#10;        )&#10;        &#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        &#10;        self.buttons = [min_payment_button, full_payment_button, custom_payment_button, back_button]&#10;&#10;    def pay_minimum(self):&#10;        &quot;&quot;&quot;Pay the minimum payment amount.&quot;&quot;&quot;&#10;        self.make_payment(self.min_payment)&#10;&#10;    def pay_full(self):&#10;        &quot;&quot;&quot;Pay the full balance.&quot;&quot;&quot;&#10;        self.make_payment(self.game.player.credit_card.balance)&#10;&#10;    def pay_custom(self):&#10;        &quot;&quot;&quot;Pay a custom amount from the input field.&quot;&quot;&quot;&#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;            if amount &lt; self.min_payment:&#10;                self.status_message = f&quot;Payment must be at least ${self.min_payment:.2f}.&quot;&#10;                self.status_color = RED&#10;                return&#10;            if amount &gt; self.game.player.credit_card.balance:&#10;                self.status_message = f&quot;Payment cannot exceed balance of ${self.game.player.credit_card.balance:.2f}.&quot;&#10;                self.status_color = RED&#10;                return&#10;            &#10;            self.make_payment(amount)&#10;            self.amount_input.text = &quot;&quot;  # Clear input after successful payment&#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;&#10;    def make_payment(self, amount):&#10;        &quot;&quot;&quot;Make a payment using available funds.&quot;&quot;&quot;&#10;        # Try to pay from cash first&#10;        if self.game.player.cash &gt;= amount:&#10;            self.game.player.cash -= amount&#10;            self.game.player.credit_card.pay(amount)&#10;            self.status_message = f&quot;Payment of ${amount:.2f} made successfully from cash.&quot;&#10;            self.status_color = GREEN&#10;            &#10;            # Update credit score for on-time payment&#10;            self.game.player.credit_score += 2&#10;            &#10;        # Try to pay from bank account&#10;        elif self.game.player.bank_account and self.game.player.bank_account.balance &gt;= amount:&#10;            self.game.player.bank_account.withdraw(amount)&#10;            self.game.player.credit_card.pay(amount)&#10;            self.status_message = f&quot;Payment of ${amount:.2f} made successfully from bank account.&quot;&#10;            self.status_color = GREEN&#10;            &#10;            # Update credit score for on-time payment&#10;            self.game.player.credit_score += 2&#10;            &#10;        else:&#10;            available_funds = self.game.player.cash&#10;            if self.game.player.bank_account:&#10;                available_funds += self.game.player.bank_account.balance&#10;            &#10;            self.status_message = f&quot;Insufficient funds. You have ${available_funds:.2f} available.&quot;&#10;            self.status_color = RED&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.financial_screens import CreditCardDetailsScreen&#10;        self.game.gui_manager.set_screen(CreditCardDetailsScreen(self.game))&#10;&#10;    def handle_events(self, events):&#10;        &quot;&quot;&quot;Handle pygame events.&quot;&quot;&quot;&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        &#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Pay Credit Card&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        &#10;        # Check if player exists and has credit card&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;        &#10;        if not self.game.player.credit_card:&#10;            no_card_text = self.text_font.render(&quot;You don't have a credit card yet.&quot;, True, BLACK)&#10;            no_card_rect = no_card_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_card_text, no_card_rect)&#10;            return&#10;        &#10;        # Current balance info&#10;        balance_info = [&#10;            f&quot;Current Balance: ${self.game.player.credit_card.balance:.2f}&quot;,&#10;            f&quot;Credit Limit: ${self.game.player.credit_card.limit:.2f}&quot;,&#10;            f&quot;Minimum Payment: ${self.min_payment:.2f}&quot;,&#10;            &quot;&quot;,&#10;            f&quot;Available Cash: ${self.game.player.cash:.2f}&quot;&#10;        ]&#10;        &#10;        if self.game.player.bank_account:&#10;            balance_info.append(f&quot;Bank Balance: ${self.game.player.bank_account.balance:.2f}&quot;)&#10;        &#10;        for i, line in enumerate(balance_info):&#10;            if line:  # Skip empty lines&#10;                color = RED if &quot;Current Balance:&quot; in line else BLACK&#10;                text_surface = self.text_font.render(line, True, color)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 100 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;        &#10;        # Custom amount input label&#10;        custom_label = self.text_font.render(&quot;Custom Amount:&quot;, True, BLACK)&#10;        custom_label_rect = custom_label.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 20))&#10;        surface.blit(custom_label, custom_label_rect)&#10;        &#10;        # Draw amount input&#10;        self.amount_input.draw(surface)&#10;        &#10;        # Draw status message&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 120))&#10;            surface.blit(status_surface, status_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class LoanDetailsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for viewing loan details.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        &#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.small_font = pygame.font.SysFont('Arial', FONT_SMALL)&#10;        &#10;        # Buttons&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        &#10;        extra_payment_button = Button(&#10;            SCREEN_WIDTH // 2 + 20,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Make Extra Payment&quot;,&#10;            action=self.make_extra_payment&#10;        )&#10;        &#10;        self.buttons = [back_button, extra_payment_button]&#10;&#10;    def make_extra_payment(self):&#10;        &quot;&quot;&quot;Navigate to extra payment screen.&quot;&quot;&quot;&#10;        self.game.gui_manager.set_screen(ExtraLoanPaymentScreen(self.game))&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        &#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Loan Details&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        &#10;        # Check if player exists and has been initialized&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;        &#10;        if not self.game.player.loans:&#10;            no_loans_text = self.text_font.render(&quot;You don't have any loans.&quot;, True, BLACK)&#10;            no_loans_rect = no_loans_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_loans_text, no_loans_rect)&#10;        else:&#10;            # Display loan information&#10;            y_pos = 120&#10;            total_monthly_payment = 0&#10;            total_remaining_balance = 0&#10;            &#10;            for i, loan in enumerate(self.game.player.loans):&#10;                # Loan header&#10;                loan_header = self.text_font.render(f&quot;{loan.loan_type} #{i+1}&quot;, True, BLUE)&#10;                surface.blit(loan_header, (50, y_pos))&#10;                y_pos += 40&#10;                &#10;                # Loan details&#10;                loan_details = [&#10;                    f&quot;Original Amount: ${loan.original_amount:.2f}&quot;,&#10;                    f&quot;Current Balance: ${loan.current_balance:.2f}&quot;,&#10;                    f&quot;Interest Rate: {loan.interest_rate * 100:.1f}%&quot;,&#10;                    f&quot;Monthly Payment: ${loan.monthly_payment:.2f}&quot;,&#10;                    f&quot;Term: {loan.term_years} years&quot;&#10;                ]&#10;                &#10;                # Calculate remaining time&#10;                if loan.monthly_payment &gt; 0:&#10;                    remaining_months = loan.current_balance / (loan.monthly_payment - (loan.current_balance * loan.interest_rate / 12))&#10;                    remaining_years = remaining_months / 12&#10;                    loan_details.append(f&quot;Time Remaining: {remaining_years:.1f} years&quot;)&#10;                    # Calculate total interest if paid normally&#10;                    total_interest = (loan.monthly_payment * remaining_months) - loan.current_balance&#10;                    loan_details.append(f&quot;Remaining Interest: ${total_interest:.2f}&quot;)&#10;                else:&#10;                    loan_details.append(&quot;Time Remaining: N/A&quot;)&#10;                    loan_details.append(&quot;Remaining Interest: N/A&quot;)&#10;&#10;                for detail in loan_details:&#10;                    color = RED if &quot;Current Balance:&quot; in detail else BLACK&#10;                    detail_surface = self.small_font.render(detail, True, color)&#10;                    surface.blit(detail_surface, (80, y_pos))&#10;                    y_pos += 25&#10;                &#10;                y_pos += 20  # Space between loans&#10;                total_monthly_payment += loan.monthly_payment&#10;                total_remaining_balance += loan.current_balance&#10;            &#10;            # Summary section&#10;            summary_y = SCREEN_HEIGHT - 200&#10;            summary_title = self.text_font.render(&quot;Summary&quot;, True, BLUE)&#10;            surface.blit(summary_title, (50, summary_y))&#10;            &#10;            summary_details = [&#10;                f&quot;Total Monthly Payments: ${total_monthly_payment:.2f}&quot;,&#10;                f&quot;Total Remaining Balance: ${total_remaining_balance:.2f}&quot;&#10;            ]&#10;            &#10;            for i, detail in enumerate(summary_details):&#10;                color = RED if total_remaining_balance &gt; 0 else BLACK&#10;                detail_surface = self.text_font.render(detail, True, color)&#10;                surface.blit(detail_surface, (50, summary_y + 30 + i * 25))&#10;        &#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class ExtraLoanPaymentScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for making an extra loan payment.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        &#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        &#10;        # Selected loan index&#10;        self.selected_loan_index = 0&#10;        &#10;        # Amount input&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2 + 100,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;        &#10;        # Status message&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;        &#10;        # Create buttons&#10;        self.create_buttons()&#10;&#10;    def create_buttons(self):&#10;        &quot;&quot;&quot;Create buttons for loan selection and payment.&quot;&quot;&quot;&#10;        self.buttons = []&#10;        &#10;        # Check if player exists and has loans&#10;        if not self.game.player or not self.game.player.loans:&#10;            # Just create back button&#10;            back_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 80,&#10;                200, 50,&#10;                &quot;Back&quot;,&#10;                action=self.go_back&#10;            )&#10;            self.buttons.append(back_button)&#10;            return&#10;        &#10;        # Loan selection buttons&#10;        if len(self.game.player.loans) &gt; 1:&#10;            for i, loan in enumerate(self.game.player.loans):&#10;                color = BLUE if i == self.selected_loan_index else GRAY&#10;                loan_button = Button(&#10;                    50 + i * 200,&#10;                    200,&#10;                    180, 50,&#10;                    f&quot;{loan.loan_type[:12]}...&quot;,&#10;                    color=color,&#10;                    action=lambda idx=i: self.select_loan(idx)&#10;                )&#10;                self.buttons.append(loan_button)&#10;        &#10;        # Payment button&#10;        pay_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 160,&#10;            200, 50,&#10;            &quot;Make Payment&quot;,&#10;            action=self.make_payment&#10;        )&#10;        self.buttons.append(pay_button)&#10;        &#10;        # Back button&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        self.buttons.append(back_button)&#10;&#10;    def select_loan(self, index):&#10;        &quot;&quot;&quot;Select a loan for payment.&quot;&quot;&quot;&#10;        self.selected_loan_index = index&#10;        self.create_buttons()  # Refresh buttons to show selection&#10;&#10;    def make_payment(self):&#10;        &quot;&quot;&quot;Make an extra payment on the selected loan.&quot;&quot;&quot;&#10;        if not self.game.player.loans:&#10;            self.status_message = &quot;You don't have any loans.&quot;&#10;            self.status_color = RED&#10;            return&#10;        &#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;            &#10;            selected_loan = self.game.player.loans[self.selected_loan_index]&#10;            &#10;            if amount &gt; selected_loan.current_balance:&#10;                self.status_message = f&quot;Payment cannot exceed loan balance of ${selected_loan.current_balance:.2f}.&quot;&#10;                self.status_color = RED&#10;                return&#10;            &#10;            # Try to pay from cash first&#10;            if self.game.player.cash &gt;= amount:&#10;                self.game.player.cash -= amount&#10;                selected_loan.make_payment(amount)&#10;                self.status_message = f&quot;Payment of ${amount:.2f} made successfully from cash.&quot;&#10;                self.status_color = GREEN&#10;                &#10;                # Check if loan is paid off&#10;                if selected_loan.current_balance &lt;= 0:&#10;                    self.game.player.loans.remove(selected_loan)&#10;                    self.status_message += &quot; Loan paid off!&quot;&#10;                    self.game.player.credit_score += 10  # Credit score boost for paying off loan&#10;                &#10;            # Try to pay from bank account&#10;            elif self.game.player.bank_account and self.game.player.bank_account.balance &gt;= amount:&#10;                self.game.player.bank_account.withdraw(amount)&#10;                selected_loan.make_payment(amount)&#10;                self.status_message = f&quot;Payment of ${amount:.2f} made successfully from bank account.&quot;&#10;                self.status_color = GREEN&#10;                &#10;                # Check if loan is paid off&#10;                if selected_loan.current_balance &lt;= 0:&#10;                    self.game.player.loans.remove(selected_loan)&#10;                    self.status_message += &quot; Loan paid off!&quot;&#10;                    self.game.player.credit_score += 10  # Credit score boost for paying off loan&#10;                &#10;            else:&#10;                available_funds = self.game.player.cash&#10;                if self.game.player.bank_account:&#10;                    available_funds += self.game.player.bank_account.balance&#10;                &#10;                self.status_message = f&quot;Insufficient funds. You have ${available_funds:.2f} available.&quot;&#10;                self.status_color = RED&#10;            &#10;            # Clear input after successful payment&#10;            if self.status_color == GREEN:&#10;                self.amount_input.text = &quot;&quot;&#10;                &#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.financial_screens import LoanDetailsScreen&#10;        self.game.gui_manager.set_screen(LoanDetailsScreen(self.game))&#10;&#10;    def handle_events(self, events):&#10;        &quot;&quot;&quot;Handle pygame events.&quot;&quot;&quot;&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        &#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Make Extra Loan Payment&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        &#10;        # Check if player exists&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;        &#10;        if not self.game.player.loans:&#10;            no_loans_text = self.text_font.render(&quot;You don't have any loans.&quot;, True, BLACK)&#10;            no_loans_rect = no_loans_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_loans_text, no_loans_rect)&#10;        else:&#10;            # Loan selection instruction&#10;            if len(self.game.player.loans) &gt; 1:&#10;                instruction_text = self.text_font.render(&quot;Select the loan you want to pay:&quot;, True, BLACK)&#10;                instruction_rect = instruction_text.get_rect(center=(SCREEN_WIDTH // 2, 120))&#10;                surface.blit(instruction_text, instruction_rect)&#10;            &#10;            # Selected loan details&#10;            selected_loan = self.game.player.loans[self.selected_loan_index]&#10;            &#10;            loan_info = [&#10;                f&quot;Selected Loan: {selected_loan.loan_type}&quot;,&#10;                f&quot;Current Balance: ${selected_loan.current_balance:.2f}&quot;,&#10;                f&quot;Monthly Payment: ${selected_loan.monthly_payment:.2f}&quot;,&#10;                f&quot;Interest Rate: {selected_loan.interest_rate * 100:.1f}%&quot;,&#10;                &quot;&quot;,&#10;                f&quot;Available Cash: ${self.game.player.cash:.2f}&quot;&#10;            ]&#10;            &#10;            if self.game.player.bank_account:&#10;                loan_info.append(f&quot;Bank Balance: ${self.game.player.bank_account.balance:.2f}&quot;)&#10;            &#10;            for i, line in enumerate(loan_info):&#10;                if line:  # Skip empty lines&#10;                    color = RED if &quot;Current Balance:&quot; in line else BLACK&#10;                    text_surface = self.text_font.render(line, True, color)&#10;                    text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 280 + i * 30))&#10;                    surface.blit(text_surface, text_rect)&#10;            &#10;            # Payment amount input label&#10;            payment_label = self.text_font.render(&quot;Extra Payment Amount:&quot;, True, BLACK)&#10;            payment_label_rect = payment_label.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 70))&#10;            surface.blit(payment_label, payment_label_rect)&#10;            &#10;            # Draw amount input&#10;            self.amount_input.draw(surface)&#10;            &#10;            # Benefit calculation&#10;            if self.amount_input.text:&#10;                try:&#10;                    extra_payment = float(self.amount_input.text)&#10;                    if extra_payment &gt; 0 and extra_payment &lt;= selected_loan.current_balance:&#10;                        # Calculate interest saved&#10;                        monthly_interest = selected_loan.interest_rate / 12&#10;                        interest_saved = extra_payment * monthly_interest&#10;                        &#10;                        benefit_text = f&quot;Interest saved this month: ${interest_saved:.2f}&quot;&#10;                        benefit_surface = self.text_font.render(benefit_text, True, GREEN)&#10;                        benefit_rect = benefit_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 130))&#10;                        surface.blit(benefit_surface, benefit_rect)&#10;                except ValueError:&#10;                    pass&#10;        &#10;        # Status message&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 200))&#10;            surface.blit(status_surface, status_rect)&#10;        &#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class AssetDetailsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for viewing asset details.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        &#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.small_font = pygame.font.SysFont('Arial', FONT_SMALL)&#10;        &#10;        # Buttons&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        &#10;        self.buttons = [back_button]&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        &#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Asset Details&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        &#10;        # Check if player exists and has been initialized&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;        &#10;        if not self.game.player.assets:&#10;            no_assets_text = self.text_font.render(&quot;You don't have any assets yet.&quot;, True, BLACK)&#10;            no_assets_rect = no_assets_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_assets_text, no_assets_rect)&#10;        else:&#10;            # Display asset information&#10;            y_pos = 120&#10;            total_current_value = 0&#10;            total_purchase_value = 0&#10;            &#10;            for i, asset in enumerate(self.game.player.assets):&#10;                # Asset header with icon&#10;                asset_header = self.text_font.render(f&quot;{asset.asset_type}: {asset.name}&quot;, True, BLUE)&#10;                surface.blit(asset_header, (50, y_pos))&#10;                y_pos += 40&#10;                &#10;                # Asset details&#10;                value_change = asset.current_value - asset.purchase_value&#10;                value_change_percent = (value_change / asset.purchase_value) * 100 if asset.purchase_value &gt; 0 else 0&#10;                &#10;                asset_details = [&#10;                    f&quot;Purchase Value: ${asset.purchase_value:.2f}&quot;,&#10;                    f&quot;Current Value: ${asset.current_value:.2f}&quot;,&#10;                    f&quot;Age: {asset.age} years&quot;,&#10;                    f&quot;Condition: {asset.condition}&quot;&#10;                ]&#10;                &#10;                # Add value change information&#10;                if value_change &gt;= 0:&#10;                    asset_details.append(f&quot;Appreciation: +${value_change:.2f} ({value_change_percent:.1f}%)&quot;)&#10;                else:&#10;                    asset_details.append(f&quot;Depreciation: ${abs(value_change):.2f} ({abs(value_change_percent):.1f}%)&quot;)&#10;                &#10;                # Asset-specific information&#10;                if asset.asset_type == &quot;Car&quot;:&#10;                    if asset.condition == &quot;Poor&quot;:&#10;                        asset_details.append(&quot;⚠️ Consider repairs or replacement&quot;)&#10;                    elif asset.current_value &lt; asset.purchase_value * 0.3:&#10;                        asset_details.append(&quot; Consider selling before further depreciation&quot;)&#10;                elif asset.asset_type == &quot;House&quot;:&#10;                    if value_change &gt; 0:&#10;                        asset_details.append(&quot; Property has appreciated in value&quot;)&#10;                    else:&#10;                        asset_details.append(&quot; Property value has declined&quot;)&#10;                &#10;                for j, detail in enumerate(asset_details):&#10;                    if &quot;Appreciation:&quot; in detail:&#10;                        color = GREEN&#10;                    elif &quot;Depreciation:&quot; in detail:&#10;                        color = RED&#10;                    elif &quot;Current Value:&quot; in detail:&#10;                        color = BLUE&#10;                    else:&#10;                        color = BLACK&#10;                    &#10;                    detail_surface = self.small_font.render(detail, True, color)&#10;                    surface.blit(detail_surface, (80, y_pos))&#10;                    y_pos += 25&#10;                &#10;                y_pos += 20  # Space between assets&#10;                total_current_value += asset.current_value&#10;                total_purchase_value += asset.purchase_value&#10;            &#10;            # Summary section&#10;            summary_y = SCREEN_HEIGHT - 200&#10;            summary_title = self.text_font.render(&quot;Asset Portfolio Summary&quot;, True, BLUE)&#10;            surface.blit(summary_title, (50, summary_y))&#10;            &#10;            total_change = total_current_value - total_purchase_value&#10;            total_change_percent = (total_change / total_purchase_value) * 100 if total_purchase_value &gt; 0 else 0&#10;            &#10;            summary_details = [&#10;                f&quot;Total Purchase Value: ${total_purchase_value:.2f}&quot;,&#10;                f&quot;Total Current Value: ${total_current_value:.2f}&quot;&#10;            ]&#10;            &#10;            if total_change &gt;= 0:&#10;                summary_details.append(f&quot;Total Appreciation: +${total_change:.2f} ({total_change_percent:.1f}%)&quot;)&#10;            else:&#10;                summary_details.append(f&quot;Total Depreciation: ${abs(total_change):.2f} ({abs(total_change_percent):.1f}%)&quot;)&#10;            &#10;            for i, detail in enumerate(summary_details):&#10;                if &quot;Total Appreciation:&quot; in detail:&#10;                    color = GREEN&#10;                elif &quot;Total Depreciation:&quot; in detail:&#10;                    color = RED&#10;                elif &quot;Total Current Value:&quot; in detail:&#10;                    color = BLUE&#10;                else:&#10;                    color = BLACK&#10;                &#10;                detail_surface = self.text_font.render(detail, True, color)&#10;                surface.blit(detail_surface, (50, summary_y + 30 + i * 25))&#10;            &#10;            # Portfolio advice&#10;            if total_change_percent &gt; 10:&#10;                advice = &quot; Your assets are performing well!&quot;&#10;                advice_color = GREEN&#10;            elif total_change_percent &lt; -20:&#10;                advice = &quot; Consider diversifying your asset portfolio&quot;&#10;                advice_color = RED&#10;            else:&#10;                advice = &quot; Your asset portfolio is stable&quot;&#10;                advice_color = BLACK&#10;            &#10;            advice_surface = self.small_font.render(advice, True, advice_color)&#10;            surface.blit(advice_surface, (50, summary_y + 120))&#10;        &#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class JobSearchScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for searching for a job.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Generate job options based on education and experience&#10;        self.job_options = self.generate_job_options()&#10;&#10;        # Create buttons for job options&#10;        self.buttons = [Button(SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT - 80, 200, 50, &quot;Back&quot;, action=self.go_back)]&#10;&#10;        # Add job option buttons if jobs are available&#10;        if self.job_options:&#10;            y_pos = 250&#10;            for i, job in enumerate(self.job_options):&#10;                self.buttons.append(&#10;                    Button(&#10;                        SCREEN_WIDTH // 2 - 200,&#10;                        y_pos + i * 60,&#10;                        400, 50,&#10;                        f&quot;{job['title']} - ${job['salary']}/year&quot;,&#10;                        action=lambda j=job: self.apply_for_job(j)&#10;                    )&#10;                )&#10;&#10;        # Status message&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;&#10;    def generate_job_options(self):&#10;        &quot;&quot;&quot;Generate job options based on player's education and experience.&quot;&quot;&quot;&#10;        # Check if player exists&#10;        if not self.game.player:&#10;            return []&#10;        &#10;        job_options = []&#10;&#10;        # Current job info&#10;        current_salary = self.game.player.salary if self.game.player.job else 0&#10;&#10;        # Base salary multiplier based on years of experience&#10;        experience_years = max(0, self.game.player.age - 18)  # Assume working age starts at 18&#10;        experience_multiplier = 1.0 + (experience_years * 0.03)  # 3% increase per year of experience&#10;&#10;        # Generate job options based on education&#10;        if self.game.player.education == &quot;High School&quot; or self.game.player.education == &quot;High School Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Retail Associate&quot;, &quot;salary&quot;: int(25000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Food Service Worker&quot;, &quot;salary&quot;: int(22000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Warehouse Worker&quot;, &quot;salary&quot;: int(28000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Office Clerk&quot;, &quot;salary&quot;: int(30000 * experience_multiplier)},&#10;            ]&#10;        elif self.game.player.education == &quot;Trade School&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Electrician&quot;, &quot;salary&quot;: int(45000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Plumber&quot;, &quot;salary&quot;: int(48000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;HVAC Technician&quot;, &quot;salary&quot;: int(50000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Automotive Mechanic&quot;, &quot;salary&quot;: int(42000 * experience_multiplier)},&#10;            ]&#10;        elif self.game.player.education == &quot;College Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Accountant&quot;, &quot;salary&quot;: int(60000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Marketing Manager&quot;, &quot;salary&quot;: int(65000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Software Developer&quot;, &quot;salary&quot;: int(75000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Financial Analyst&quot;, &quot;salary&quot;: int(70000 * experience_multiplier)},&#10;            ]&#10;        else:  # Default/basic jobs&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Retail Associate&quot;, &quot;salary&quot;: int(25000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Food Service Worker&quot;, &quot;salary&quot;: int(22000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Warehouse Worker&quot;, &quot;salary&quot;: int(28000 * experience_multiplier)},&#10;            ]&#10;&#10;        # Add some randomness to salaries (±10%)&#10;        for job in job_options:&#10;            job[&quot;salary&quot;] = int(job[&quot;salary&quot;] * random.uniform(0.9, 1.1))&#10;&#10;        # Filter out jobs that don't offer at least 5% more than current salary (if employed)&#10;        if self.game.player.job:&#10;            job_options = [job for job in job_options if job[&quot;salary&quot;] &gt;= current_salary * 1.05]&#10;&#10;        return job_options&#10;&#10;    def apply_for_job(self, job):&#10;        &quot;&quot;&quot;Apply for the selected job.&quot;&quot;&quot;&#10;        # Job application success chance based on qualifications&#10;        base_success_chance = 0.7  # 70% base chance&#10;&#10;        # Adjust for education&#10;        if self.game.player.education == &quot;College Graduate&quot;:&#10;            base_success_chance += 0.2&#10;        elif self.game.player.education == &quot;Trade School&quot;:&#10;            base_success_chance += 0.1&#10;&#10;        # Adjust for experience&#10;        experience_years = max(0, self.game.player.age - 18)&#10;        base_success_chance += min(0.2, experience_years * 0.01)  # Up to 20% bonus for experience&#10;&#10;        # Cap at 95% chance&#10;        success_chance = min(0.95, base_success_chance)&#10;&#10;        # Determine if application is successful&#10;        if random.random() &lt; success_chance:&#10;            old_job = self.game.player.job&#10;            old_salary = self.game.player.salary&#10;&#10;            self.game.player.job = job[&quot;title&quot;]&#10;            self.game.player.salary = job[&quot;salary&quot;]&#10;&#10;            if old_job:&#10;                salary_increase = self.game.player.salary - old_salary&#10;                percent_increase = (salary_increase / old_salary) * 100&#10;                self.status_message = f&quot;Congratulations! You got the job! That's a raise of ${salary_increase}/year ({percent_increase:.1f}%)!&quot;&#10;            else:&#10;                self.status_message = f&quot;Congratulations! You got the job! You are now earning ${self.game.player.salary}/year.&quot;&#10;&#10;            self.status_color = GREEN&#10;&#10;            # Disable job buttons after getting a job&#10;            self.buttons = [self.buttons[0]]  # Keep only the back button&#10;        else:&#10;            self.status_message = &quot;Unfortunately, the company decided to go with another candidate. Try again!&quot;&#10;            self.status_color = RED&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the job search screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Job Search&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Check if player exists&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;&#10;        # Current job info&#10;        current_job_text = f&quot;Current Job: {self.game.player.job if self.game.player.job else 'Unemployed'}&quot;&#10;        current_job_surface = self.text_font.render(current_job_text, True, BLACK)&#10;        current_job_rect = current_job_surface.get_rect(center=(SCREEN_WIDTH // 2, 100))&#10;        surface.blit(current_job_surface, current_job_rect)&#10;&#10;        if self.game.player.job:&#10;            salary_text = f&quot;Current Salary: ${self.game.player.salary}/year&quot;&#10;            salary_surface = self.text_font.render(salary_text, True, BLACK)&#10;            salary_rect = salary_surface.get_rect(center=(SCREEN_WIDTH // 2, 130))&#10;            surface.blit(salary_surface, salary_rect)&#10;&#10;        # Available jobs or no jobs message&#10;        if self.job_options:&#10;            jobs_title = self.text_font.render(&quot;Available Job Opportunities:&quot;, True, BLACK)&#10;            jobs_title_rect = jobs_title.get_rect(center=(SCREEN_WIDTH // 2, 180))&#10;            surface.blit(jobs_title, jobs_title_rect)&#10;&#10;            jobs_subtitle = self.text_font.render(&quot;Click on a job to apply&quot;, True, BLACK)&#10;            jobs_subtitle_rect = jobs_subtitle.get_rect(center=(SCREEN_WIDTH // 2, 210))&#10;            surface.blit(jobs_subtitle, jobs_subtitle_rect)&#10;        else:&#10;            no_jobs_text = &quot;No better job opportunities available at this time.&quot;&#10;            no_jobs_surface = self.text_font.render(no_jobs_text, True, BLACK)&#10;            no_jobs_rect = no_jobs_surface.get_rect(center=(SCREEN_WIDTH // 2, 200))&#10;            surface.blit(no_jobs_surface, no_jobs_rect)&#10;&#10;            advice_text = &quot;Keep building your skills and try again later!&quot;&#10;            advice_surface = self.text_font.render(advice_text, True, BLACK)&#10;            advice_rect = advice_surface.get_rect(center=(SCREEN_WIDTH // 2, 230))&#10;            surface.blit(advice_surface, advice_rect)&#10;&#10;        # Status message&#10;        if self.status_message:&#10;            # Split long messages into multiple lines&#10;            words = self.status_message.split()&#10;            lines = []&#10;            current_line = []&#10;&#10;            for word in words:&#10;                current_line.append(word)&#10;                if len(' '.join(current_line)) &gt; 50:  # Adjust based on your font size&#10;                    lines.append(' '.join(current_line[:-1]))&#10;                    current_line = [current_line[-1]]&#10;&#10;            if current_line:&#10;                lines.append(' '.join(current_line))&#10;&#10;            for i, line in enumerate(lines):&#10;                status_surface = self.text_font.render(line, True, self.status_color)&#10;                status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT - 150 + i * 30))&#10;                surface.blit(status_surface, status_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class SavingsDetailsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for viewing savings account details.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.scroll_position = 0&#10;        self.max_visible_transactions = 10&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        self.buttons = [back_button]&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        title_surface = self.title_font.render(&quot;Savings Account Details&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        account = self.game.player.savings_account&#10;        info_lines = [&#10;            f&quot;Current Balance: ${account.balance:.2f}&quot;,&#10;            f&quot;Interest Rate: {account.interest_rate*100:.2f}% annually&quot;,&#10;            f&quot;Projected Annual Interest: ${account.balance * account.interest_rate:.2f}&quot;&#10;        ]&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 100 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;        history_title = self.title_font.render(&quot;Transaction History&quot;, True, BLACK)&#10;        history_rect = history_title.get_rect(center=(SCREEN_WIDTH // 2, 250))&#10;        surface.blit(history_title, history_rect)&#10;        if account.transaction_history:&#10;            scroll_area = pygame.Rect(100, 280, SCREEN_WIDTH - 200, 300)&#10;            pygame.draw.rect(surface, LIGHT_GRAY, scroll_area)&#10;            pygame.draw.rect(surface, BLACK, scroll_area, 2)&#10;            visible_transactions = account.transaction_history[&#10;                self.scroll_position:self.scroll_position + self.max_visible_transactions&#10;            ]&#10;            for i, transaction in enumerate(visible_transactions):&#10;                if transaction[&quot;type&quot;] == &quot;deposit&quot;:&#10;                    text = f&quot;Deposit: +${transaction['amount']:.2f}&quot;&#10;                    color = GREEN&#10;                elif transaction[&quot;type&quot;] == &quot;withdrawal&quot;:&#10;                    text = f&quot;Withdrawal: -${transaction['amount']:.2f}&quot;&#10;                    color = RED&#10;                elif transaction[&quot;type&quot;] == &quot;interest&quot;:&#10;                    text = f&quot;Interest: +${transaction['amount']:.2f}&quot;&#10;                    color = BLUE&#10;                else:&#10;                    text = f&quot;{transaction['type']}: ${transaction['amount']:.2f}&quot;&#10;                    color = BLACK&#10;                text_surface = self.text_font.render(text, True, color)&#10;                text_rect = text_surface.get_rect(midleft=(120, 300 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;        else:&#10;            no_transactions = self.text_font.render(&quot;No transactions yet.&quot;, True, BLACK)&#10;            no_transactions_rect = no_transactions.get_rect(center=(SCREEN_WIDTH // 2, 320))&#10;            surface.blit(no_transactions, no_transactions_rect)&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class DepositToSavingsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for depositing money to savings account.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;        deposit_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 60,&#10;            200, 50,&#10;            &quot;Deposit&quot;,&#10;            action=self.make_deposit&#10;        )&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 130,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        self.buttons = [deposit_button, back_button]&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;    def make_deposit(self):&#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;            if amount &gt; self.game.player.cash:&#10;                self.status_message = &quot;You don't have that much cash.&quot;&#10;                self.status_color = RED&#10;                return&#10;            self.game.player.cash -= amount&#10;            self.game.player.savings_account.deposit(amount)&#10;            self.status_message = f&quot;Successfully deposited ${amount:.2f}.&quot;&#10;            self.status_color = GREEN&#10;            self.amount_input.text = &quot;&quot;&#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;    def handle_events(self, events):&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        title_surface = self.title_font.render(&quot;Deposit to Savings&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;        info_lines = [&#10;            f&quot;Your current cash: ${self.game.player.cash:.2f}&quot;,&#10;            f&quot;Your savings balance: ${self.game.player.savings_account.balance:.2f}&quot;,&#10;            &quot;&quot;,&#10;            &quot;How much would you like to deposit?&quot;&#10;        ]&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;        self.amount_input.draw(surface)&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 30))&#10;            surface.blit(status_surface, status_rect)&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class WithdrawFromSavingsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for withdrawing money from savings account.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;        withdraw_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 60,&#10;            200, 50,&#10;            &quot;Withdraw&quot;,&#10;            action=self.make_withdrawal&#10;        )&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 130,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        self.buttons = [withdraw_button, back_button]&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;    def make_withdrawal(self):&#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;            if amount &gt; self.game.player.savings_account.balance:&#10;                self.status_message = &quot;You don't have that much in your savings account.&quot;&#10;                self.status_color = RED&#10;                return&#10;            self.game.player.savings_account.withdraw(amount)&#10;            self.game.player.cash += amount&#10;            self.status_message = f&quot;Successfully withdrew ${amount:.2f}.&quot;&#10;            self.status_color = GREEN&#10;            self.amount_input.text = &quot;&quot;&#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;    def handle_events(self, events):&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        title_surface = self.title_font.render(&quot;Withdraw from Savings&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;        info_lines = [&#10;            f&quot;Your current cash: ${self.game.player.cash:.2f}&quot;,&#10;            f&quot;Your savings balance: ${self.game.player.savings_account.balance:.2f}&quot;,&#10;            &quot;&quot;,&#10;            &quot;How much would you like to withdraw?&quot;&#10;        ]&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;        self.amount_input.draw(surface)&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 30))&#10;            surface.blit(status_surface, status_rect)&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class BankingMenuScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Submenu for all banking and savings actions.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.title_font = pygame.font.Font(None, 48)&#10;        self.text_font = pygame.font.Font(None, 32)&#10;        self.buttons = []&#10;        self.create_buttons()&#10;        self.status_message = None&#10;        self.status_color = (0, 0, 0)&#10;&#10;    def create_buttons(self):&#10;        button_specs = [&#10;            (&quot;Deposit&quot;, self.go_to_deposit),&#10;            (&quot;Withdraw&quot;, self.go_to_withdraw),&#10;            (&quot;View Balance&quot;, self.go_to_view_balance),&#10;            (&quot;View Savings&quot;, self.go_to_view_savings),&#10;            (&quot;Open Account&quot;, self.go_to_open_account),&#10;            (&quot;Back&quot;, self.go_back)&#10;        ]&#10;        start_y = 180&#10;        for i, (label, callback) in enumerate(button_specs):&#10;            btn = Button(&#10;                SCREEN_WIDTH // 2 - 100,  # x&#10;                start_y + i * 60,         # y&#10;                200,                      # width&#10;                50,                       # height&#10;                label,                    # text&#10;                callback                  # action&#10;            )&#10;            self.buttons.append(btn)&#10;&#10;    def go_to_deposit(self):&#10;        self.game.set_screen(&quot;deposit&quot;)&#10;&#10;    def go_to_withdraw(self):&#10;        self.game.set_screen(&quot;withdraw&quot;)&#10;&#10;    def go_to_view_balance(self):&#10;        self.game.set_screen(&quot;view_balance&quot;)&#10;&#10;    def go_to_view_savings(self):&#10;        self.game.set_screen(&quot;view_savings&quot;)&#10;&#10;    def go_to_open_account(self):&#10;        self.game.set_screen(&quot;open_account&quot;)&#10;&#10;    def go_back(self):&#10;        self.game.set_screen(&quot;main_menu&quot;)&#10;&#10;    def handle_event(self, event):&#10;        for button in self.buttons:&#10;            button.handle_event(event)&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        title_surface = self.title_font.render(&quot;Banking Menu&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;        info_lines = [&#10;            f&quot;Cash: ${self.game.player.cash:.2f}&quot;,&#10;            f&quot;Checking: ${self.game.player.checking_account.balance:.2f}&quot;,&#10;            f&quot;Savings: ${self.game.player.savings_account.balance:.2f}&quot;&#10;        ]&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 140 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 180))&#10;            surface.blit(status_surface, status_rect)&#10;" />
              <option name="updatedContent" value="import pygame&#10;import random&#10;from moneySmarts.constants import *&#10;from moneySmarts.ui import Screen, Button, TextInput&#10;from moneySmarts.models import BankAccount, Card, Loan, Asset&#10;&#10;class BankAccountScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for opening a bank account.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Account type selection&#10;        self.selected_account_type = &quot;Checking&quot;&#10;&#10;        # Buttons&#10;        checking_button = Button(&#10;            SCREEN_WIDTH // 2 - 220,&#10;            SCREEN_HEIGHT // 2 - 50,&#10;            200, 50,&#10;            &quot;Checking Account&quot;,&#10;            color=BLUE if self.selected_account_type == &quot;Checking&quot; else GRAY,&#10;            action=self.select_checking&#10;        )&#10;&#10;        savings_button = Button(&#10;            SCREEN_WIDTH // 2 + 20,&#10;            SCREEN_HEIGHT // 2 - 50,&#10;            200, 50,&#10;            &quot;Savings Account&quot;,&#10;            color=BLUE if self.selected_account_type == &quot;Savings&quot; else GRAY,&#10;            action=self.select_savings&#10;        )&#10;&#10;        open_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 50,&#10;            200, 50,&#10;            &quot;Open Account&quot;,&#10;            action=self.open_account&#10;        )&#10;&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 120,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;&#10;        self.buttons = [checking_button, savings_button, open_button, back_button]&#10;&#10;        # Initial deposit input&#10;        self.deposit_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2 + 10,&#10;            300, 30,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10,&#10;            initial_text=&quot;50&quot;&#10;        )&#10;&#10;    def select_checking(self):&#10;        &quot;&quot;&quot;Select checking account type.&quot;&quot;&quot;&#10;        self.selected_account_type = &quot;Checking&quot;&#10;        self.buttons[0].color = BLUE&#10;        self.buttons[1].color = GRAY&#10;&#10;    def select_savings(self):&#10;        &quot;&quot;&quot;Select savings account type.&quot;&quot;&quot;&#10;        self.selected_account_type = &quot;Savings&quot;&#10;        self.buttons[0].color = GRAY&#10;        self.buttons[1].color = BLUE&#10;&#10;    def open_account(self):&#10;        &quot;&quot;&quot;Open the selected account type.&quot;&quot;&quot;&#10;        try:&#10;            deposit_amount = float(self.deposit_input.text)&#10;            if deposit_amount &lt;= 0:&#10;                return  # Invalid amount&#10;            if deposit_amount &gt; self.game.player.cash:&#10;                return  # Not enough cash&#10;&#10;            # Create account&#10;            if self.selected_account_type == &quot;Checking&quot;:&#10;                self.game.player.bank_account = BankAccount(&quot;Checking&quot;)&#10;                self.game.player.cash -= deposit_amount&#10;                self.game.player.bank_account.deposit(deposit_amount)&#10;                from moneySmarts.screens.base_screens import DebitCardScreen&#10;                self.game.gui_manager.set_screen(DebitCardScreen(self.game))&#10;            else:&#10;                self.game.player.savings_account = BankAccount(&quot;Savings&quot;)&#10;                self.game.player.cash -= deposit_amount&#10;                self.game.player.savings_account.deposit(deposit_amount)&#10;                from moneySmarts.screens.game_screen import GameScreen&#10;                self.game.gui_manager.set_screen(GameScreen(self.game))&#10;        except ValueError:&#10;            # Invalid input, do nothing&#10;            pass&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def handle_events(self, events):&#10;        &quot;&quot;&quot;Handle pygame events.&quot;&quot;&quot;&#10;        super().handle_events(events)&#10;        self.deposit_input.update(events)&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the bank account screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Open a Bank Account&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Explanation text&#10;        text_lines = [&#10;            &quot;You can open a checking account for everyday transactions&quot;,&#10;            &quot;or a savings account that earns interest.&quot;,&#10;            &quot;&quot;,&#10;            f&quot;Your current cash: ${self.game.player.cash:.2f}&quot;,&#10;            &quot;&quot;,&#10;            &quot;Initial deposit amount:&quot;&#10;        ]&#10;&#10;        for i, line in enumerate(text_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Draw deposit input&#10;        self.deposit_input.draw(surface)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class BankDetailsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for viewing bank account details.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Transaction history scroll&#10;        self.scroll_position = 0&#10;        self.max_visible_transactions = 10&#10;&#10;        # Buttons&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;&#10;        scroll_up_button = Button(&#10;            SCREEN_WIDTH - 80,&#10;            150,&#10;            60, 30,&#10;            &quot;▲&quot;,&#10;            action=self.scroll_up&#10;        )&#10;&#10;        scroll_down_button = Button(&#10;            SCREEN_WIDTH - 80,&#10;            SCREEN_HEIGHT - 150,&#10;            60, 30,&#10;            &quot;▼&quot;,&#10;            action=self.scroll_down&#10;        )&#10;&#10;        self.buttons = [back_button, scroll_up_button, scroll_down_button]&#10;&#10;    def scroll_up(self):&#10;        &quot;&quot;&quot;Scroll transaction history up.&quot;&quot;&quot;&#10;        if self.scroll_position &gt; 0:&#10;            self.scroll_position -= 1&#10;&#10;    def scroll_down(self):&#10;        &quot;&quot;&quot;Scroll transaction history down.&quot;&quot;&quot;&#10;        if self.scroll_position &lt; max(0, len(self.game.player.bank_account.transaction_history) - self.max_visible_transactions):&#10;            self.scroll_position += 1&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the bank details screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Bank Account Details&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Account info&#10;        account_type = self.game.player.bank_account.account_type&#10;        balance = self.game.player.bank_account.balance&#10;&#10;        info_lines = [&#10;            f&quot;Account Type: {account_type}&quot;,&#10;            f&quot;Current Balance: ${balance:.2f}&quot;&#10;        ]&#10;&#10;        if account_type == &quot;Savings&quot;:&#10;            interest_rate = self.game.player.bank_account.interest_rate * 100&#10;            annual_interest = balance * self.game.player.bank_account.interest_rate&#10;            info_lines.extend([&#10;                f&quot;Interest Rate: {interest_rate:.1f}% annually&quot;,&#10;                f&quot;Projected Annual Interest: ${annual_interest:.2f}&quot;&#10;            ])&#10;&#10;        if self.game.player.debit_card:&#10;            info_lines.append(&quot;You have a debit card linked to this account.&quot;)&#10;&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 100 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Transaction history&#10;        history_title = self.title_font.render(&quot;Transaction History&quot;, True, BLACK)&#10;        history_rect = history_title.get_rect(center=(SCREEN_WIDTH // 2, 250))&#10;        surface.blit(history_title, history_rect)&#10;&#10;        # Draw transaction list&#10;        if self.game.player.bank_account.transaction_history:&#10;            # Draw scrollable area background&#10;            scroll_area = pygame.Rect(100, 280, SCREEN_WIDTH - 200, 300)&#10;            pygame.draw.rect(surface, LIGHT_GRAY, scroll_area)&#10;            pygame.draw.rect(surface, BLACK, scroll_area, 2)  # Border&#10;&#10;            # Get visible transactions&#10;            visible_transactions = self.game.player.bank_account.transaction_history[&#10;                self.scroll_position:self.scroll_position + self.max_visible_transactions&#10;            ]&#10;&#10;            for i, transaction in enumerate(visible_transactions):&#10;                if transaction[&quot;type&quot;] == &quot;deposit&quot;:&#10;                    text = f&quot;Deposit: +${transaction['amount']:.2f}&quot;&#10;                    color = GREEN&#10;                elif transaction[&quot;type&quot;] == &quot;withdrawal&quot;:&#10;                    text = f&quot;Withdrawal: -${transaction['amount']:.2f}&quot;&#10;                    color = RED&#10;                elif transaction[&quot;type&quot;] == &quot;interest&quot;:&#10;                    text = f&quot;Interest: +${transaction['amount']:.2f}&quot;&#10;                    color = BLUE&#10;                else:&#10;                    text = f&quot;{transaction['type']}: ${transaction['amount']:.2f}&quot;&#10;                    color = BLACK&#10;&#10;                text_surface = self.text_font.render(text, True, color)&#10;                text_rect = text_surface.get_rect(midleft=(120, 300 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;        else:&#10;            no_transactions = self.text_font.render(&quot;No transactions yet.&quot;, True, BLACK)&#10;            no_transactions_rect = no_transactions.get_rect(center=(SCREEN_WIDTH // 2, 320))&#10;            surface.blit(no_transactions, no_transactions_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class DepositScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for depositing money to a bank account.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Amount input&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;&#10;        # Buttons&#10;        deposit_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 60,&#10;            200, 50,&#10;            &quot;Deposit&quot;,&#10;            action=self.make_deposit&#10;        )&#10;&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 130,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;&#10;        self.buttons = [deposit_button, back_button]&#10;&#10;        # Status message&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;&#10;    def make_deposit(self):&#10;        &quot;&quot;&quot;Make a deposit to the bank account.&quot;&quot;&quot;&#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;&#10;            if amount &gt; self.game.player.cash:&#10;                self.status_message = &quot;You don't have that much cash.&quot;&#10;                self.status_color = RED&#10;                return&#10;&#10;            # Make deposit&#10;            self.game.player.cash -= amount&#10;            self.game.player.bank_account.deposit(amount)&#10;&#10;            self.status_message = f&quot;Successfully deposited ${amount:.2f}.&quot;&#10;            self.status_color = GREEN&#10;&#10;            # Clear input&#10;            self.amount_input.text = &quot;&quot;&#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def handle_events(self, events):&#10;        &quot;&quot;&quot;Handle pygame events.&quot;&quot;&quot;&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the deposit screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Deposit to Bank&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Info text&#10;        info_lines = [&#10;            f&quot;Your current cash: ${self.game.player.cash:.2f}&quot;,&#10;            f&quot;Your current bank balance: ${self.game.player.bank_account.balance:.2f}&quot;,&#10;            &quot;&quot;,&#10;            &quot;How much would you like to deposit?&quot;&#10;        ]&#10;&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Draw amount input&#10;        self.amount_input.draw(surface)&#10;&#10;        # Draw status message&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 30))&#10;            surface.blit(status_surface, status_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class WithdrawScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for withdrawing money from a bank account.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Amount input&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;&#10;        # Buttons&#10;        withdraw_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 60,&#10;            200, 50,&#10;            &quot;Withdraw&quot;,&#10;            action=self.make_withdrawal&#10;        )&#10;&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 130,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;&#10;        self.buttons = [withdraw_button, back_button]&#10;&#10;        # Status message&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;&#10;    def make_withdrawal(self):&#10;        &quot;&quot;&quot;Make a withdrawal from the bank account.&quot;&quot;&quot;&#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;&#10;            if amount &gt; self.game.player.bank_account.balance:&#10;                self.status_message = &quot;You don't have that much in your account.&quot;&#10;                self.status_color = RED&#10;                return&#10;&#10;            # Make withdrawal&#10;            self.game.player.bank_account.withdraw(amount)&#10;            self.game.player.cash += amount&#10;&#10;            self.status_message = f&quot;Successfully withdrew ${amount:.2f}.&quot;&#10;            self.status_color = GREEN&#10;&#10;            # Clear input&#10;            self.amount_input.text = &quot;&quot;&#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def handle_events(self, events):&#10;        &quot;&quot;&quot;Handle pygame events.&quot;&quot;&quot;&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the withdraw screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Withdraw from Bank&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Info text&#10;        info_lines = [&#10;            f&quot;Your current cash: ${self.game.player.cash:.2f}&quot;,&#10;            f&quot;Your current bank balance: ${self.game.player.bank_account.balance:.2f}&quot;,&#10;            &quot;&quot;,&#10;            &quot;How much would you like to withdraw?&quot;&#10;        ]&#10;&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Draw amount input&#10;        self.amount_input.draw(surface)&#10;&#10;        # Draw status message&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 30))&#10;            surface.blit(status_surface, status_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class GetDebitCardScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for getting a debit card.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Buttons&#10;        get_card_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 50,&#10;            200, 50,&#10;            &quot;Get Debit Card&quot;,&#10;            action=self.get_debit_card&#10;        )&#10;&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 120,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;&#10;        self.buttons = [get_card_button, back_button]&#10;&#10;    def get_debit_card(self):&#10;        &quot;&quot;&quot;Get a debit card and go back to the game screen.&quot;&quot;&quot;&#10;        self.game.player.debit_card = Card(&quot;Debit&quot;)&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the debit card screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Get a Debit Card&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Card image (simple rectangle)&#10;        card_rect = pygame.Rect(SCREEN_WIDTH // 2 - 125, 150, 250, 150)&#10;        pygame.draw.rect(surface, BLUE, card_rect)&#10;        pygame.draw.rect(surface, BLACK, card_rect, 2)  # Border&#10;&#10;        # Card text&#10;        card_title = self.text_font.render(&quot;DEBIT&quot;, True, WHITE)&#10;        card_title_rect = card_title.get_rect(center=(SCREEN_WIDTH // 2, 180))&#10;        surface.blit(card_title, card_title_rect)&#10;&#10;        card_name = self.text_font.render(self.game.player.name, True, WHITE)&#10;        card_name_rect = card_name.get_rect(center=(SCREEN_WIDTH // 2, 220))&#10;        surface.blit(card_name, card_name_rect)&#10;&#10;        card_number = self.text_font.render(&quot;**** **** **** 1234&quot;, True, WHITE)&#10;        card_number_rect = card_number.get_rect(center=(SCREEN_WIDTH // 2, 260))&#10;        surface.blit(card_number, card_number_rect)&#10;&#10;        # Explanation text&#10;        text_lines = [&#10;            &quot;A debit card allows you to make purchases directly from your checking account.&quot;,&#10;            &quot;There is no fee for this card.&quot;,&#10;            &quot;&quot;,&#10;            &quot;Would you like to get a debit card?&quot;&#10;        ]&#10;&#10;        for i, line in enumerate(text_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 350 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;# Placeholder classes for the remaining financial screens&#10;# These would be implemented similarly to the above screens&#10;&#10;class CreditCardScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for applying for a credit card.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE, bold=True)&#10;        self.small_font = pygame.font.SysFont('Arial', FONT_SMALL)&#10;        self.message = &quot;&quot;&#10;        self.message_color = BLACK&#10;        self.approved = False&#10;        self.credit_limit = 0&#10;&#10;        # Create back button&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100, &#10;            SCREEN_HEIGHT - 70, &#10;            200, 50, &#10;            &quot;Back&quot;, &#10;            action=self.go_back&#10;        )&#10;&#10;        self.buttons = [back_button]&#10;&#10;        # Check eligibility and create apply button if eligible&#10;        self.check_eligibility()&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def check_eligibility(self):&#10;        # Check if player exists and is eligible for a credit card&#10;        if not self.game.player:&#10;            self.message = &quot;Game not started yet.&quot;&#10;            self.message_color = RED&#10;        elif self.game.player.age &lt; 18:&#10;            self.message = &quot;You must be at least 18 years old to apply for a credit card.&quot;&#10;            self.message_color = RED&#10;        elif self.game.player.credit_card:&#10;            self.message = &quot;You already have a credit card.&quot;&#10;            self.message_color = BLUE&#10;        elif not self.game.player.job:&#10;            self.message = &quot;You need a job to qualify for a credit card.&quot;&#10;            self.message_color = RED&#10;        else:&#10;            self.message = &quot;You are eligible to apply for a credit card. Your approval and credit limit will be based on your income and credit score.&quot;&#10;            self.message_color = GREEN&#10;&#10;            # Add apply button&#10;            apply_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT // 2,&#10;                200, 50,&#10;                &quot;Apply Now&quot;,&#10;                color=GREEN,&#10;                hover_color=LIGHT_GREEN,&#10;                action=self.apply_for_card&#10;            )&#10;&#10;            self.buttons.append(apply_button)&#10;&#10;    def apply_for_card(self):&#10;        # Calculate credit limit based on income and credit score&#10;        base_limit = min(self.game.player.salary * 0.2, 5000)  # 20% of salary or $5000, whichever is lower&#10;&#10;        # Adjust based on credit score&#10;        if self.game.player.credit_score &gt;= 750:&#10;            self.credit_limit = base_limit * 1.5&#10;        elif self.game.player.credit_score &gt;= 700:&#10;            self.credit_limit = base_limit * 1.2&#10;        elif self.game.player.credit_score &gt;= 650:&#10;            self.credit_limit = base_limit&#10;        elif self.game.player.credit_score &gt;= 600:&#10;            self.credit_limit = base_limit * 0.8&#10;        else:&#10;            self.credit_limit = base_limit * 0.5&#10;&#10;        # Approve the card&#10;        self.game.player.credit_card = Card(&quot;Credit&quot;, self.credit_limit)&#10;        self.approved = True&#10;&#10;        # Update message&#10;        self.message = f&quot;Congratulations! You've been approved for a credit card with a limit of ${self.credit_limit:.2f}. Use your credit card wisely to build your credit score.&quot;&#10;        self.message_color = GREEN&#10;&#10;        # Remove apply button&#10;        self.buttons = [self.buttons[0]]  # Keep only the back button&#10;&#10;        # Add view details button&#10;        details_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2,&#10;            200, 50,&#10;            &quot;View Card Details&quot;,&#10;            action=self.view_card_details&#10;        )&#10;&#10;        self.buttons.append(details_button)&#10;&#10;    def view_card_details(self):&#10;        from moneySmarts.screens.financial_screens import CreditCardDetailsScreen&#10;        self.game.gui_manager.set_screen(CreditCardDetailsScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;&#10;        # Draw header&#10;        header_rect = pygame.Rect(0, 0, SCREEN_WIDTH, 80)&#10;        pygame.draw.rect(surface, PURPLE, header_rect)&#10;&#10;        header_text = self.title_font.render(&quot;CREDIT CARD APPLICATION&quot;, True, WHITE)&#10;        header_rect = header_text.get_rect(center=(SCREEN_WIDTH // 2, 40))&#10;        surface.blit(header_text, header_rect)&#10;&#10;        # Draw player info&#10;        info_y = 100&#10;        &#10;        # Check if player exists before accessing attributes&#10;        if self.game.player:&#10;            credit_score_text = self.font.render(f&quot;Your Credit Score: {self.game.player.credit_score}&quot;, True, BLACK)&#10;            surface.blit(credit_score_text, (50, info_y))&#10;&#10;            if self.game.player.job:&#10;                income_text = self.font.render(f&quot;Annual Income: ${self.game.player.salary}&quot;, True, BLACK)&#10;                surface.blit(income_text, (50, info_y + 30))&#10;&#10;        # Draw message&#10;        message_lines = []&#10;        words = self.message.split()&#10;        current_line = []&#10;&#10;        for word in words:&#10;            current_line.append(word)&#10;            if len(' '.join(current_line)) &gt; 60:  # Adjust based on font size&#10;                message_lines.append(' '.join(current_line[:-1]))&#10;                current_line = [current_line[-1]]&#10;&#10;        if current_line:&#10;            message_lines.append(' '.join(current_line))&#10;&#10;        for i, line in enumerate(message_lines):&#10;            message_text = self.font.render(line, True, self.message_color)&#10;            message_rect = message_text.get_rect(center=(SCREEN_WIDTH // 2, 180 + i * 30))&#10;            surface.blit(message_text, message_rect)&#10;&#10;        # If approved, draw the credit card&#10;        if self.approved:&#10;            card_rect = pygame.Rect(SCREEN_WIDTH // 2 - 125, 250, 250, 150)&#10;            pygame.draw.rect(surface, PURPLE, card_rect)&#10;            pygame.draw.rect(surface, BLACK, card_rect, 2)  # Border&#10;&#10;            # Card text&#10;            card_title = self.font.render(&quot;CREDIT CARD&quot;, True, WHITE)&#10;            card_title_rect = card_title.get_rect(center=(SCREEN_WIDTH // 2, 280))&#10;            surface.blit(card_title, card_title_rect)&#10;&#10;            card_name = self.font.render(self.game.player.name, True, WHITE)&#10;            card_name_rect = card_name.get_rect(center=(SCREEN_WIDTH // 2, 320))&#10;            surface.blit(card_name, card_name_rect)&#10;&#10;            card_number = self.font.render(&quot;**** **** **** 1234&quot;, True, WHITE)&#10;            card_number_rect = card_number.get_rect(center=(SCREEN_WIDTH // 2, 350))&#10;            surface.blit(card_number, card_number_rect)&#10;&#10;            limit_text = self.small_font.render(f&quot;Credit Limit: ${self.credit_limit:.2f}&quot;, True, WHITE)&#10;            limit_rect = limit_text.get_rect(center=(SCREEN_WIDTH // 2, 380))&#10;            surface.blit(limit_text, limit_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class CreditCardDetailsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for viewing credit card details.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        &#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.small_font = pygame.font.SysFont('Arial', FONT_SMALL)&#10;        &#10;        # Transaction history scroll&#10;        self.scroll_position = 0&#10;        self.max_visible_transactions = 8&#10;        &#10;        # Buttons&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 220, &#10;            SCREEN_HEIGHT - 80, &#10;            200, 50, &#10;            &quot;Back&quot;, &#10;            action=self.go_back&#10;        )&#10;        &#10;        pay_button = Button(&#10;            SCREEN_WIDTH // 2 + 20, &#10;            SCREEN_HEIGHT - 80, &#10;            200, 50, &#10;            &quot;Make Payment&quot;, &#10;            action=self.make_payment&#10;        )&#10;        &#10;        scroll_up_button = Button(&#10;            SCREEN_WIDTH - 80, &#10;            200, &#10;            60, 30, &#10;            &quot;▲&quot;, &#10;            action=self.scroll_up&#10;        )&#10;        &#10;        scroll_down_button = Button(&#10;            SCREEN_WIDTH - 80, &#10;            SCREEN_HEIGHT - 200, &#10;            60, 30, &#10;            &quot;▼&quot;, &#10;            action=self.scroll_down&#10;        )&#10;        &#10;        self.buttons = [back_button, pay_button, scroll_up_button, scroll_down_button]&#10;&#10;    def scroll_up(self):&#10;        &quot;&quot;&quot;Scroll transaction history up.&quot;&quot;&quot;&#10;        if self.scroll_position &gt; 0:&#10;            self.scroll_position -= 1&#10;&#10;    def scroll_down(self):&#10;        &quot;&quot;&quot;Scroll transaction history down.&quot;&quot;&quot;&#10;        if self.game.player and self.game.player.credit_card:&#10;            if self.scroll_position &lt; max(0, len(self.game.player.credit_card.transaction_history) - self.max_visible_transactions):&#10;                self.scroll_position += 1&#10;&#10;    def make_payment(self):&#10;        &quot;&quot;&quot;Navigate to the payment screen.&quot;&quot;&quot;&#10;        self.game.gui_manager.set_screen(PayCreditCardScreen(self.game))&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        &#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Credit Card Details&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        &#10;        # Check if player exists and has been initialized&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;        &#10;        # Check if player has a credit card&#10;        if not self.game.player.credit_card:&#10;            no_card_text = self.text_font.render(&quot;You don't have a credit card yet.&quot;, True, BLACK)&#10;            no_card_rect = no_card_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_card_text, no_card_rect)&#10;            return&#10;        &#10;        # Credit card visual&#10;        card_rect = pygame.Rect(50, 100, 300, 180)&#10;        pygame.draw.rect(surface, PURPLE, card_rect)&#10;        pygame.draw.rect(surface, BLACK, card_rect, 2)  # Border&#10;        &#10;        # Card text&#10;        card_title = self.text_font.render(&quot;CREDIT CARD&quot;, True, WHITE)&#10;        card_title_rect = card_title.get_rect(center=(card_rect.centerx, card_rect.top + 30))&#10;        surface.blit(card_title, card_title_rect)&#10;        &#10;        card_name = self.text_font.render(self.game.player.name, True, WHITE)&#10;        card_name_rect = card_name.get_rect(center=(card_rect.centerx, card_rect.top + 80))&#10;        surface.blit(card_name, card_name_rect)&#10;        &#10;        card_number = self.text_font.render(&quot;**** **** **** 1234&quot;, True, WHITE)&#10;        card_number_rect = card_number.get_rect(center=(card_rect.centerx, card_rect.top + 120))&#10;        surface.blit(card_number, card_number_rect)&#10;        &#10;        limit_text = self.small_font.render(f&quot;Credit Limit: ${self.game.player.credit_card.limit:.2f}&quot;, True, WHITE)&#10;        limit_rect = limit_text.get_rect(center=(card_rect.centerx, card_rect.top + 150))&#10;        surface.blit(limit_text, limit_rect)&#10;&#10;        # Account information&#10;        info_x = 380&#10;        info_y = 120&#10;        &#10;        info_lines = [&#10;            f&quot;Credit Limit: ${self.game.player.credit_card.limit:.2f}&quot;,&#10;            f&quot;Current Balance: ${self.game.player.credit_card.balance:.2f}&quot;,&#10;            f&quot;Available Credit: ${self.game.player.credit_card.limit - self.game.player.credit_card.balance:.2f}&quot;&#10;        ]&#10;        &#10;        # Add minimum payment if there's a balance&#10;        if self.game.player.credit_card.balance &gt; 0:&#10;            min_payment = max(25, self.game.player.credit_card.balance * 0.03)&#10;            info_lines.append(f&quot;Minimum Payment: ${min_payment:.2f}&quot;)&#10;        &#10;        for i, line in enumerate(info_lines):&#10;            color = RED if &quot;Balance:&quot; in line and self.game.player.credit_card.balance &gt; 0 else BLACK&#10;            text_surface = self.text_font.render(line, True, color)&#10;            surface.blit(text_surface, (info_x, info_y + i * 35))&#10;        &#10;        # Transaction history&#10;        history_title = self.text_font.render(&quot;Transaction History:&quot;, True, BLACK)&#10;        surface.blit(history_title, (50, 300))&#10;        &#10;        # Transaction history area&#10;        history_rect = pygame.Rect(50, 330, SCREEN_WIDTH - 150, 250)&#10;        pygame.draw.rect(surface, LIGHT_GRAY, history_rect)&#10;        pygame.draw.rect(surface, BLACK, history_rect, 2)&#10;        &#10;        # Display transactions&#10;        if self.game.player.credit_card.transaction_history:&#10;            visible_transactions = self.game.player.credit_card.transaction_history[&#10;                self.scroll_position:self.scroll_position + self.max_visible_transactions&#10;            ]&#10;            &#10;            for i, transaction in enumerate(visible_transactions):&#10;                y_pos = 345 + i * 30&#10;                if transaction[&quot;type&quot;] == &quot;charge&quot;:&#10;                    text = f&quot;Charge: ${transaction['amount']:.2f}&quot;&#10;                    color = RED&#10;                elif transaction[&quot;type&quot;] == &quot;payment&quot;:&#10;                    text = f&quot;Payment: -${transaction['amount']:.2f}&quot;&#10;                    color = GREEN&#10;                else:&#10;                    text = f&quot;{transaction['type']}: ${transaction['amount']:.2f}&quot;&#10;                    color = BLACK&#10;                &#10;                text_surface = self.small_font.render(text, True, color)&#10;                surface.blit(text_surface, (60, y_pos))&#10;        else:&#10;            no_transactions = self.text_font.render(&quot;No transactions yet.&quot;, True, BLACK)&#10;            no_transactions_rect = no_transactions.get_rect(center=(history_rect.centerx, history_rect.centery))&#10;            surface.blit(no_transactions, no_transactions_rect)&#10;        &#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class PayCreditCardScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for paying a credit card.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        &#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        &#10;        # Calculate minimum payment (with null checks)&#10;        if self.game.player and self.game.player.credit_card:&#10;            self.min_payment = max(25, self.game.player.credit_card.balance * 0.03)&#10;        else:&#10;            self.min_payment = 25  # Default minimum payment&#10;        &#10;        # Amount input&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2 + 50,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;        &#10;        # Status message&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;        &#10;        # Buttons&#10;        min_payment_button = Button(&#10;            SCREEN_WIDTH // 2 - 320,&#10;            SCREEN_HEIGHT // 2 - 20,&#10;            200, 50,&#10;            f&quot;Pay Minimum (${self.min_payment:.2f})&quot;,&#10;            color=BLUE,&#10;            hover_color=LIGHT_BLUE,&#10;            action=self.pay_minimum&#10;        )&#10;        &#10;        # Calculate button text with null checks&#10;        if self.game.player and self.game.player.credit_card:&#10;            full_payment_text = f&quot;Pay Full (${self.game.player.credit_card.balance:.2f})&quot;&#10;        else:&#10;            full_payment_text = &quot;Pay Full (N/A)&quot;&#10;        &#10;        full_payment_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 - 20,&#10;            200, 50,&#10;            full_payment_text,&#10;            color=GREEN,&#10;            hover_color=LIGHT_GREEN,&#10;            action=self.pay_full&#10;        )&#10;        &#10;        custom_payment_button = Button(&#10;            SCREEN_WIDTH // 2 + 120,&#10;            SCREEN_HEIGHT // 2 - 20,&#10;            200, 50,&#10;            &quot;Pay Custom Amount&quot;,&#10;            action=self.pay_custom&#10;        )&#10;        &#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        &#10;        self.buttons = [min_payment_button, full_payment_button, custom_payment_button, back_button]&#10;&#10;    def pay_minimum(self):&#10;        &quot;&quot;&quot;Pay the minimum payment amount.&quot;&quot;&quot;&#10;        self.make_payment(self.min_payment)&#10;&#10;    def pay_full(self):&#10;        &quot;&quot;&quot;Pay the full balance.&quot;&quot;&quot;&#10;        self.make_payment(self.game.player.credit_card.balance)&#10;&#10;    def pay_custom(self):&#10;        &quot;&quot;&quot;Pay a custom amount from the input field.&quot;&quot;&quot;&#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;            if amount &lt; self.min_payment:&#10;                self.status_message = f&quot;Payment must be at least ${self.min_payment:.2f}.&quot;&#10;                self.status_color = RED&#10;                return&#10;            if amount &gt; self.game.player.credit_card.balance:&#10;                self.status_message = f&quot;Payment cannot exceed balance of ${self.game.player.credit_card.balance:.2f}.&quot;&#10;                self.status_color = RED&#10;                return&#10;            &#10;            self.make_payment(amount)&#10;            self.amount_input.text = &quot;&quot;  # Clear input after successful payment&#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;&#10;    def make_payment(self, amount):&#10;        &quot;&quot;&quot;Make a payment using available funds.&quot;&quot;&quot;&#10;        # Try to pay from cash first&#10;        if self.game.player.cash &gt;= amount:&#10;            self.game.player.cash -= amount&#10;            self.game.player.credit_card.pay(amount)&#10;            self.status_message = f&quot;Payment of ${amount:.2f} made successfully from cash.&quot;&#10;            self.status_color = GREEN&#10;            &#10;            # Update credit score for on-time payment&#10;            self.game.player.credit_score += 2&#10;            &#10;        # Try to pay from bank account&#10;        elif self.game.player.bank_account and self.game.player.bank_account.balance &gt;= amount:&#10;            self.game.player.bank_account.withdraw(amount)&#10;            self.game.player.credit_card.pay(amount)&#10;            self.status_message = f&quot;Payment of ${amount:.2f} made successfully from bank account.&quot;&#10;            self.status_color = GREEN&#10;            &#10;            # Update credit score for on-time payment&#10;            self.game.player.credit_score += 2&#10;            &#10;        else:&#10;            available_funds = self.game.player.cash&#10;            if self.game.player.bank_account:&#10;                available_funds += self.game.player.bank_account.balance&#10;            &#10;            self.status_message = f&quot;Insufficient funds. You have ${available_funds:.2f} available.&quot;&#10;            self.status_color = RED&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.financial_screens import CreditCardDetailsScreen&#10;        self.game.gui_manager.set_screen(CreditCardDetailsScreen(self.game))&#10;&#10;    def handle_events(self, events):&#10;        &quot;&quot;&quot;Handle pygame events.&quot;&quot;&quot;&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        &#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Pay Credit Card&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        &#10;        # Check if player exists and has credit card&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;        &#10;        if not self.game.player.credit_card:&#10;            no_card_text = self.text_font.render(&quot;You don't have a credit card yet.&quot;, True, BLACK)&#10;            no_card_rect = no_card_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_card_text, no_card_rect)&#10;            return&#10;        &#10;        # Current balance info&#10;        balance_info = [&#10;            f&quot;Current Balance: ${self.game.player.credit_card.balance:.2f}&quot;,&#10;            f&quot;Credit Limit: ${self.game.player.credit_card.limit:.2f}&quot;,&#10;            f&quot;Minimum Payment: ${self.min_payment:.2f}&quot;,&#10;            &quot;&quot;,&#10;            f&quot;Available Cash: ${self.game.player.cash:.2f}&quot;&#10;        ]&#10;        &#10;        if self.game.player.bank_account:&#10;            balance_info.append(f&quot;Bank Balance: ${self.game.player.bank_account.balance:.2f}&quot;)&#10;        &#10;        for i, line in enumerate(balance_info):&#10;            if line:  # Skip empty lines&#10;                color = RED if &quot;Current Balance:&quot; in line else BLACK&#10;                text_surface = self.text_font.render(line, True, color)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 100 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;        &#10;        # Custom amount input label&#10;        custom_label = self.text_font.render(&quot;Custom Amount:&quot;, True, BLACK)&#10;        custom_label_rect = custom_label.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 20))&#10;        surface.blit(custom_label, custom_label_rect)&#10;        &#10;        # Draw amount input&#10;        self.amount_input.draw(surface)&#10;        &#10;        # Draw status message&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 120))&#10;            surface.blit(status_surface, status_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class LoanDetailsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for viewing loan details.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        &#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.small_font = pygame.font.SysFont('Arial', FONT_SMALL)&#10;        &#10;        # Buttons&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        &#10;        extra_payment_button = Button(&#10;            SCREEN_WIDTH // 2 + 20,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Make Extra Payment&quot;,&#10;            action=self.make_extra_payment&#10;        )&#10;        &#10;        self.buttons = [back_button, extra_payment_button]&#10;&#10;    def make_extra_payment(self):&#10;        &quot;&quot;&quot;Navigate to extra payment screen.&quot;&quot;&quot;&#10;        self.game.gui_manager.set_screen(ExtraLoanPaymentScreen(self.game))&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        &#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Loan Details&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        &#10;        # Check if player exists and has been initialized&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;        &#10;        if not self.game.player.loans:&#10;            no_loans_text = self.text_font.render(&quot;You don't have any loans.&quot;, True, BLACK)&#10;            no_loans_rect = no_loans_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_loans_text, no_loans_rect)&#10;        else:&#10;            # Display loan information&#10;            y_pos = 120&#10;            total_monthly_payment = 0&#10;            total_remaining_balance = 0&#10;            &#10;            for i, loan in enumerate(self.game.player.loans):&#10;                # Loan header&#10;                loan_header = self.text_font.render(f&quot;{loan.loan_type} #{i+1}&quot;, True, BLUE)&#10;                surface.blit(loan_header, (50, y_pos))&#10;                y_pos += 40&#10;                &#10;                # Loan details&#10;                loan_details = [&#10;                    f&quot;Original Amount: ${loan.original_amount:.2f}&quot;,&#10;                    f&quot;Current Balance: ${loan.current_balance:.2f}&quot;,&#10;                    f&quot;Interest Rate: {loan.interest_rate * 100:.1f}%&quot;,&#10;                    f&quot;Monthly Payment: ${loan.monthly_payment:.2f}&quot;,&#10;                    f&quot;Term: {loan.term_years} years&quot;&#10;                ]&#10;                &#10;                # Calculate remaining time&#10;                if loan.monthly_payment &gt; 0:&#10;                    remaining_months = loan.current_balance / (loan.monthly_payment - (loan.current_balance * loan.interest_rate / 12))&#10;                    remaining_years = remaining_months / 12&#10;                    loan_details.append(f&quot;Time Remaining: {remaining_years:.1f} years&quot;)&#10;                    # Calculate total interest if paid normally&#10;                    total_interest = (loan.monthly_payment * remaining_months) - loan.current_balance&#10;                    loan_details.append(f&quot;Remaining Interest: ${total_interest:.2f}&quot;)&#10;                else:&#10;                    loan_details.append(&quot;Time Remaining: N/A&quot;)&#10;                    loan_details.append(&quot;Remaining Interest: N/A&quot;)&#10;&#10;                for detail in loan_details:&#10;                    color = RED if &quot;Current Balance:&quot; in detail else BLACK&#10;                    detail_surface = self.small_font.render(detail, True, color)&#10;                    surface.blit(detail_surface, (80, y_pos))&#10;                    y_pos += 25&#10;                &#10;                y_pos += 20  # Space between loans&#10;                total_monthly_payment += loan.monthly_payment&#10;                total_remaining_balance += loan.current_balance&#10;            &#10;            # Summary section&#10;            summary_y = SCREEN_HEIGHT - 200&#10;            summary_title = self.text_font.render(&quot;Summary&quot;, True, BLUE)&#10;            surface.blit(summary_title, (50, summary_y))&#10;            &#10;            summary_details = [&#10;                f&quot;Total Monthly Payments: ${total_monthly_payment:.2f}&quot;,&#10;                f&quot;Total Remaining Balance: ${total_remaining_balance:.2f}&quot;&#10;            ]&#10;            &#10;            for i, detail in enumerate(summary_details):&#10;                color = RED if total_remaining_balance &gt; 0 else BLACK&#10;                detail_surface = self.text_font.render(detail, True, color)&#10;                surface.blit(detail_surface, (50, summary_y + 30 + i * 25))&#10;        &#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class ExtraLoanPaymentScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for making an extra loan payment.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        &#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        &#10;        # Selected loan index&#10;        self.selected_loan_index = 0&#10;        &#10;        # Amount input&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2 + 100,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;        &#10;        # Status message&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;        &#10;        # Create buttons&#10;        self.create_buttons()&#10;&#10;    def create_buttons(self):&#10;        &quot;&quot;&quot;Create buttons for loan selection and payment.&quot;&quot;&quot;&#10;        self.buttons = []&#10;        &#10;        # Check if player exists and has loans&#10;        if not self.game.player or not self.game.player.loans:&#10;            # Just create back button&#10;            back_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 80,&#10;                200, 50,&#10;                &quot;Back&quot;,&#10;                action=self.go_back&#10;            )&#10;            self.buttons.append(back_button)&#10;            return&#10;        &#10;        # Loan selection buttons&#10;        if len(self.game.player.loans) &gt; 1:&#10;            for i, loan in enumerate(self.game.player.loans):&#10;                color = BLUE if i == self.selected_loan_index else GRAY&#10;                loan_button = Button(&#10;                    50 + i * 200,&#10;                    200,&#10;                    180, 50,&#10;                    f&quot;{loan.loan_type[:12]}...&quot;,&#10;                    color=color,&#10;                    action=lambda idx=i: self.select_loan(idx)&#10;                )&#10;                self.buttons.append(loan_button)&#10;        &#10;        # Payment button&#10;        pay_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 160,&#10;            200, 50,&#10;            &quot;Make Payment&quot;,&#10;            action=self.make_payment&#10;        )&#10;        self.buttons.append(pay_button)&#10;        &#10;        # Back button&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        self.buttons.append(back_button)&#10;&#10;    def select_loan(self, index):&#10;        &quot;&quot;&quot;Select a loan for payment.&quot;&quot;&quot;&#10;        self.selected_loan_index = index&#10;        self.create_buttons()  # Refresh buttons to show selection&#10;&#10;    def make_payment(self):&#10;        &quot;&quot;&quot;Make an extra payment on the selected loan.&quot;&quot;&quot;&#10;        if not self.game.player.loans:&#10;            self.status_message = &quot;You don't have any loans.&quot;&#10;            self.status_color = RED&#10;            return&#10;        &#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;            &#10;            selected_loan = self.game.player.loans[self.selected_loan_index]&#10;            &#10;            if amount &gt; selected_loan.current_balance:&#10;                self.status_message = f&quot;Payment cannot exceed loan balance of ${selected_loan.current_balance:.2f}.&quot;&#10;                self.status_color = RED&#10;                return&#10;            &#10;            # Try to pay from cash first&#10;            if self.game.player.cash &gt;= amount:&#10;                self.game.player.cash -= amount&#10;                selected_loan.make_payment(amount)&#10;                self.status_message = f&quot;Payment of ${amount:.2f} made successfully from cash.&quot;&#10;                self.status_color = GREEN&#10;                &#10;                # Check if loan is paid off&#10;                if selected_loan.current_balance &lt;= 0:&#10;                    self.game.player.loans.remove(selected_loan)&#10;                    self.status_message += &quot; Loan paid off!&quot;&#10;                    self.game.player.credit_score += 10  # Credit score boost for paying off loan&#10;                &#10;            # Try to pay from bank account&#10;            elif self.game.player.bank_account and self.game.player.bank_account.balance &gt;= amount:&#10;                self.game.player.bank_account.withdraw(amount)&#10;                selected_loan.make_payment(amount)&#10;                self.status_message = f&quot;Payment of ${amount:.2f} made successfully from bank account.&quot;&#10;                self.status_color = GREEN&#10;                &#10;                # Check if loan is paid off&#10;                if selected_loan.current_balance &lt;= 0:&#10;                    self.game.player.loans.remove(selected_loan)&#10;                    self.status_message += &quot; Loan paid off!&quot;&#10;                    self.game.player.credit_score += 10  # Credit score boost for paying off loan&#10;                &#10;            else:&#10;                available_funds = self.game.player.cash&#10;                if self.game.player.bank_account:&#10;                    available_funds += self.game.player.bank_account.balance&#10;                &#10;                self.status_message = f&quot;Insufficient funds. You have ${available_funds:.2f} available.&quot;&#10;                self.status_color = RED&#10;            &#10;            # Clear input after successful payment&#10;            if self.status_color == GREEN:&#10;                self.amount_input.text = &quot;&quot;&#10;                &#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.financial_screens import LoanDetailsScreen&#10;        self.game.gui_manager.set_screen(LoanDetailsScreen(self.game))&#10;&#10;    def handle_events(self, events):&#10;        &quot;&quot;&quot;Handle pygame events.&quot;&quot;&quot;&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        &#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Make Extra Loan Payment&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        &#10;        # Check if player exists&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;        &#10;        if not self.game.player.loans:&#10;            no_loans_text = self.text_font.render(&quot;You don't have any loans.&quot;, True, BLACK)&#10;            no_loans_rect = no_loans_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_loans_text, no_loans_rect)&#10;        else:&#10;            # Loan selection instruction&#10;            if len(self.game.player.loans) &gt; 1:&#10;                instruction_text = self.text_font.render(&quot;Select the loan you want to pay:&quot;, True, BLACK)&#10;                instruction_rect = instruction_text.get_rect(center=(SCREEN_WIDTH // 2, 120))&#10;                surface.blit(instruction_text, instruction_rect)&#10;            &#10;            # Selected loan details&#10;            selected_loan = self.game.player.loans[self.selected_loan_index]&#10;            &#10;            loan_info = [&#10;                f&quot;Selected Loan: {selected_loan.loan_type}&quot;,&#10;                f&quot;Current Balance: ${selected_loan.current_balance:.2f}&quot;,&#10;                f&quot;Monthly Payment: ${selected_loan.monthly_payment:.2f}&quot;,&#10;                f&quot;Interest Rate: {selected_loan.interest_rate * 100:.1f}%&quot;,&#10;                &quot;&quot;,&#10;                f&quot;Available Cash: ${self.game.player.cash:.2f}&quot;&#10;            ]&#10;            &#10;            if self.game.player.bank_account:&#10;                loan_info.append(f&quot;Bank Balance: ${self.game.player.bank_account.balance:.2f}&quot;)&#10;            &#10;            for i, line in enumerate(loan_info):&#10;                if line:  # Skip empty lines&#10;                    color = RED if &quot;Current Balance:&quot; in line else BLACK&#10;                    text_surface = self.text_font.render(line, True, color)&#10;                    text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 280 + i * 30))&#10;                    surface.blit(text_surface, text_rect)&#10;            &#10;            # Payment amount input label&#10;            payment_label = self.text_font.render(&quot;Extra Payment Amount:&quot;, True, BLACK)&#10;            payment_label_rect = payment_label.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 70))&#10;            surface.blit(payment_label, payment_label_rect)&#10;            &#10;            # Draw amount input&#10;            self.amount_input.draw(surface)&#10;            &#10;            # Benefit calculation&#10;            if self.amount_input.text:&#10;                try:&#10;                    extra_payment = float(self.amount_input.text)&#10;                    if extra_payment &gt; 0 and extra_payment &lt;= selected_loan.current_balance:&#10;                        # Calculate interest saved&#10;                        monthly_interest = selected_loan.interest_rate / 12&#10;                        interest_saved = extra_payment * monthly_interest&#10;                        &#10;                        benefit_text = f&quot;Interest saved this month: ${interest_saved:.2f}&quot;&#10;                        benefit_surface = self.text_font.render(benefit_text, True, GREEN)&#10;                        benefit_rect = benefit_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 130))&#10;                        surface.blit(benefit_surface, benefit_rect)&#10;                except ValueError:&#10;                    pass&#10;        &#10;        # Status message&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 200))&#10;            surface.blit(status_surface, status_rect)&#10;        &#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class AssetDetailsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for viewing asset details.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        &#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.small_font = pygame.font.SysFont('Arial', FONT_SMALL)&#10;        &#10;        # Buttons&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        &#10;        self.buttons = [back_button]&#10;&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        &#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Asset Details&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        &#10;        # Check if player exists and has been initialized&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;        &#10;        if not self.game.player.assets:&#10;            no_assets_text = self.text_font.render(&quot;You don't have any assets yet.&quot;, True, BLACK)&#10;            no_assets_rect = no_assets_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_assets_text, no_assets_rect)&#10;        else:&#10;            # Display asset information&#10;            y_pos = 120&#10;            total_current_value = 0&#10;            total_purchase_value = 0&#10;            &#10;            for i, asset in enumerate(self.game.player.assets):&#10;                # Asset header with icon&#10;                asset_header = self.text_font.render(f&quot;{asset.asset_type}: {asset.name}&quot;, True, BLUE)&#10;                surface.blit(asset_header, (50, y_pos))&#10;                y_pos += 40&#10;                &#10;                # Asset details&#10;                value_change = asset.current_value - asset.purchase_value&#10;                value_change_percent = (value_change / asset.purchase_value) * 100 if asset.purchase_value &gt; 0 else 0&#10;                &#10;                asset_details = [&#10;                    f&quot;Purchase Value: ${asset.purchase_value:.2f}&quot;,&#10;                    f&quot;Current Value: ${asset.current_value:.2f}&quot;,&#10;                    f&quot;Age: {asset.age} years&quot;,&#10;                    f&quot;Condition: {asset.condition}&quot;&#10;                ]&#10;                &#10;                # Add value change information&#10;                if value_change &gt;= 0:&#10;                    asset_details.append(f&quot;Appreciation: +${value_change:.2f} ({value_change_percent:.1f}%)&quot;)&#10;                else:&#10;                    asset_details.append(f&quot;Depreciation: ${abs(value_change):.2f} ({abs(value_change_percent):.1f}%)&quot;)&#10;                &#10;                # Asset-specific information&#10;                if asset.asset_type == &quot;Car&quot;:&#10;                    if asset.condition == &quot;Poor&quot;:&#10;                        asset_details.append(&quot;⚠️ Consider repairs or replacement&quot;)&#10;                    elif asset.current_value &lt; asset.purchase_value * 0.3:&#10;                        asset_details.append(&quot; Consider selling before further depreciation&quot;)&#10;                elif asset.asset_type == &quot;House&quot;:&#10;                    if value_change &gt; 0:&#10;                        asset_details.append(&quot; Property has appreciated in value&quot;)&#10;                    else:&#10;                        asset_details.append(&quot; Property value has declined&quot;)&#10;                &#10;                for j, detail in enumerate(asset_details):&#10;                    if &quot;Appreciation:&quot; in detail:&#10;                        color = GREEN&#10;                    elif &quot;Depreciation:&quot; in detail:&#10;                        color = RED&#10;                    elif &quot;Current Value:&quot; in detail:&#10;                        color = BLUE&#10;                    else:&#10;                        color = BLACK&#10;                    &#10;                    detail_surface = self.small_font.render(detail, True, color)&#10;                    surface.blit(detail_surface, (80, y_pos))&#10;                    y_pos += 25&#10;                &#10;                y_pos += 20  # Space between assets&#10;                total_current_value += asset.current_value&#10;                total_purchase_value += asset.purchase_value&#10;            &#10;            # Summary section&#10;            summary_y = SCREEN_HEIGHT - 200&#10;            summary_title = self.text_font.render(&quot;Asset Portfolio Summary&quot;, True, BLUE)&#10;            surface.blit(summary_title, (50, summary_y))&#10;            &#10;            total_change = total_current_value - total_purchase_value&#10;            total_change_percent = (total_change / total_purchase_value) * 100 if total_purchase_value &gt; 0 else 0&#10;            &#10;            summary_details = [&#10;                f&quot;Total Purchase Value: ${total_purchase_value:.2f}&quot;,&#10;                f&quot;Total Current Value: ${total_current_value:.2f}&quot;&#10;            ]&#10;            &#10;            if total_change &gt;= 0:&#10;                summary_details.append(f&quot;Total Appreciation: +${total_change:.2f} ({total_change_percent:.1f}%)&quot;)&#10;            else:&#10;                summary_details.append(f&quot;Total Depreciation: ${abs(total_change):.2f} ({abs(total_change_percent):.1f}%)&quot;)&#10;            &#10;            for i, detail in enumerate(summary_details):&#10;                if &quot;Total Appreciation:&quot; in detail:&#10;                    color = GREEN&#10;                elif &quot;Total Depreciation:&quot; in detail:&#10;                    color = RED&#10;                elif &quot;Total Current Value:&quot; in detail:&#10;                    color = BLUE&#10;                else:&#10;                    color = BLACK&#10;                &#10;                detail_surface = self.text_font.render(detail, True, color)&#10;                surface.blit(detail_surface, (50, summary_y + 30 + i * 25))&#10;            &#10;            # Portfolio advice&#10;            if total_change_percent &gt; 10:&#10;                advice = &quot; Your assets are performing well!&quot;&#10;                advice_color = GREEN&#10;            elif total_change_percent &lt; -20:&#10;                advice = &quot; Consider diversifying your asset portfolio&quot;&#10;                advice_color = RED&#10;            else:&#10;                advice = &quot; Your asset portfolio is stable&quot;&#10;                advice_color = BLACK&#10;            &#10;            advice_surface = self.small_font.render(advice, True, advice_color)&#10;            surface.blit(advice_surface, (50, summary_y + 120))&#10;        &#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class JobSearchScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for searching for a job.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title and fonts&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Generate job options based on education and experience&#10;        self.job_options = self.generate_job_options()&#10;&#10;        # Create buttons for job options&#10;        self.buttons = [Button(SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT - 80, 200, 50, &quot;Back&quot;, action=self.go_back)]&#10;&#10;        # Add job option buttons if jobs are available&#10;        if self.job_options:&#10;            y_pos = 250&#10;            for i, job in enumerate(self.job_options):&#10;                self.buttons.append(&#10;                    Button(&#10;                        SCREEN_WIDTH // 2 - 200,&#10;                        y_pos + i * 60,&#10;                        400, 50,&#10;                        f&quot;{job['title']} - ${job['salary']}/year&quot;,&#10;                        action=lambda j=job: self.apply_for_job(j)&#10;                    )&#10;                )&#10;&#10;        # Status message&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;&#10;    def generate_job_options(self):&#10;        &quot;&quot;&quot;Generate job options based on player's education and experience.&quot;&quot;&quot;&#10;        # Check if player exists&#10;        if not self.game.player:&#10;            return []&#10;        &#10;        job_options = []&#10;&#10;        # Current job info&#10;        current_salary = self.game.player.salary if self.game.player.job else 0&#10;&#10;        # Base salary multiplier based on years of experience&#10;        experience_years = max(0, self.game.player.age - 18)  # Assume working age starts at 18&#10;        experience_multiplier = 1.0 + (experience_years * 0.03)  # 3% increase per year of experience&#10;&#10;        # Generate job options based on education&#10;        if self.game.player.education == &quot;High School&quot; or self.game.player.education == &quot;High School Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Retail Associate&quot;, &quot;salary&quot;: int(25000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Food Service Worker&quot;, &quot;salary&quot;: int(22000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Warehouse Worker&quot;, &quot;salary&quot;: int(28000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Office Clerk&quot;, &quot;salary&quot;: int(30000 * experience_multiplier)},&#10;            ]&#10;        elif self.game.player.education == &quot;Trade School&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Electrician&quot;, &quot;salary&quot;: int(45000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Plumber&quot;, &quot;salary&quot;: int(48000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;HVAC Technician&quot;, &quot;salary&quot;: int(50000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Automotive Mechanic&quot;, &quot;salary&quot;: int(42000 * experience_multiplier)},&#10;            ]&#10;        elif self.game.player.education == &quot;College Graduate&quot;:&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Accountant&quot;, &quot;salary&quot;: int(60000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Marketing Manager&quot;, &quot;salary&quot;: int(65000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Software Developer&quot;, &quot;salary&quot;: int(75000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Financial Analyst&quot;, &quot;salary&quot;: int(70000 * experience_multiplier)},&#10;            ]&#10;        else:  # Default/basic jobs&#10;            job_options = [&#10;                {&quot;title&quot;: &quot;Retail Associate&quot;, &quot;salary&quot;: int(25000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Food Service Worker&quot;, &quot;salary&quot;: int(22000 * experience_multiplier)},&#10;                {&quot;title&quot;: &quot;Warehouse Worker&quot;, &quot;salary&quot;: int(28000 * experience_multiplier)},&#10;            ]&#10;&#10;        # Add some randomness to salaries (±10%)&#10;        for job in job_options:&#10;            job[&quot;salary&quot;] = int(job[&quot;salary&quot;] * random.uniform(0.9, 1.1))&#10;&#10;        # Filter out jobs that don't offer at least 5% more than current salary (if employed)&#10;        if self.game.player.job:&#10;            job_options = [job for job in job_options if job[&quot;salary&quot;] &gt;= current_salary * 1.05]&#10;&#10;        return job_options&#10;&#10;    def apply_for_job(self, job):&#10;        &quot;&quot;&quot;Apply for the selected job.&quot;&quot;&quot;&#10;        # Job application success chance based on qualifications&#10;        base_success_chance = 0.7  # 70% base chance&#10;&#10;        # Adjust for education&#10;        if self.game.player.education == &quot;College Graduate&quot;:&#10;            base_success_chance += 0.2&#10;        elif self.game.player.education == &quot;Trade School&quot;:&#10;            base_success_chance += 0.1&#10;&#10;        # Adjust for experience&#10;        experience_years = max(0, self.game.player.age - 18)&#10;        base_success_chance += min(0.2, experience_years * 0.01)  # Up to 20% bonus for experience&#10;&#10;        # Cap at 95% chance&#10;        success_chance = min(0.95, base_success_chance)&#10;&#10;        # Determine if application is successful&#10;        if random.random() &lt; success_chance:&#10;            old_job = self.game.player.job&#10;            old_salary = self.game.player.salary&#10;&#10;            self.game.player.job = job[&quot;title&quot;]&#10;            self.game.player.salary = job[&quot;salary&quot;]&#10;&#10;            if old_job:&#10;                salary_increase = self.game.player.salary - old_salary&#10;                percent_increase = (salary_increase / old_salary) * 100&#10;                self.status_message = f&quot;Congratulations! You got the job! That's a raise of ${salary_increase}/year ({percent_increase:.1f}%)!&quot;&#10;            else:&#10;                self.status_message = f&quot;Congratulations! You got the job! You are now earning ${self.game.player.salary}/year.&quot;&#10;&#10;            self.status_color = GREEN&#10;&#10;            # Disable job buttons after getting a job&#10;            self.buttons = [self.buttons[0]]  # Keep only the back button&#10;        else:&#10;            self.status_message = &quot;Unfortunately, the company decided to go with another candidate. Try again!&quot;&#10;            self.status_color = RED&#10;&#10;    def go_back(self):&#10;        &quot;&quot;&quot;Go back to the game screen.&quot;&quot;&quot;&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the job search screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;Job Search&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Check if player exists&#10;        if not self.game.player:&#10;            no_player_text = self.text_font.render(&quot;Game not started yet.&quot;, True, BLACK)&#10;            no_player_rect = no_player_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#10;            surface.blit(no_player_text, no_player_rect)&#10;            return&#10;&#10;        # Current job info&#10;        current_job_text = f&quot;Current Job: {self.game.player.job if self.game.player.job else 'Unemployed'}&quot;&#10;        current_job_surface = self.text_font.render(current_job_text, True, BLACK)&#10;        current_job_rect = current_job_surface.get_rect(center=(SCREEN_WIDTH // 2, 100))&#10;        surface.blit(current_job_surface, current_job_rect)&#10;&#10;        if self.game.player.job:&#10;            salary_text = f&quot;Current Salary: ${self.game.player.salary}/year&quot;&#10;            salary_surface = self.text_font.render(salary_text, True, BLACK)&#10;            salary_rect = salary_surface.get_rect(center=(SCREEN_WIDTH // 2, 130))&#10;            surface.blit(salary_surface, salary_rect)&#10;&#10;        # Available jobs or no jobs message&#10;        if self.job_options:&#10;            jobs_title = self.text_font.render(&quot;Available Job Opportunities:&quot;, True, BLACK)&#10;            jobs_title_rect = jobs_title.get_rect(center=(SCREEN_WIDTH // 2, 180))&#10;            surface.blit(jobs_title, jobs_title_rect)&#10;&#10;            jobs_subtitle = self.text_font.render(&quot;Click on a job to apply&quot;, True, BLACK)&#10;            jobs_subtitle_rect = jobs_subtitle.get_rect(center=(SCREEN_WIDTH // 2, 210))&#10;            surface.blit(jobs_subtitle, jobs_subtitle_rect)&#10;        else:&#10;            no_jobs_text = &quot;No better job opportunities available at this time.&quot;&#10;            no_jobs_surface = self.text_font.render(no_jobs_text, True, BLACK)&#10;            no_jobs_rect = no_jobs_surface.get_rect(center=(SCREEN_WIDTH // 2, 200))&#10;            surface.blit(no_jobs_surface, no_jobs_rect)&#10;&#10;            advice_text = &quot;Keep building your skills and try again later!&quot;&#10;            advice_surface = self.text_font.render(advice_text, True, BLACK)&#10;            advice_rect = advice_surface.get_rect(center=(SCREEN_WIDTH // 2, 230))&#10;            surface.blit(advice_surface, advice_rect)&#10;&#10;        # Status message&#10;        if self.status_message:&#10;            # Split long messages into multiple lines&#10;            words = self.status_message.split()&#10;            lines = []&#10;            current_line = []&#10;&#10;            for word in words:&#10;                current_line.append(word)&#10;                if len(' '.join(current_line)) &gt; 50:  # Adjust based on your font size&#10;                    lines.append(' '.join(current_line[:-1]))&#10;                    current_line = [current_line[-1]]&#10;&#10;            if current_line:&#10;                lines.append(' '.join(current_line))&#10;&#10;            for i, line in enumerate(lines):&#10;                status_surface = self.text_font.render(line, True, self.status_color)&#10;                status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT - 150 + i * 30))&#10;                surface.blit(status_surface, status_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class SavingsDetailsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for viewing savings account details.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.scroll_position = 0&#10;        self.max_visible_transactions = 10&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 80,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        self.buttons = [back_button]&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        title_surface = self.title_font.render(&quot;Savings Account Details&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 50))&#10;        surface.blit(title_surface, title_rect)&#10;        account = self.game.player.savings_account&#10;        info_lines = [&#10;            f&quot;Current Balance: ${account.balance:.2f}&quot;,&#10;            f&quot;Interest Rate: {account.interest_rate*100:.2f}% annually&quot;,&#10;            f&quot;Projected Annual Interest: ${account.balance * account.interest_rate:.2f}&quot;&#10;        ]&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 100 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;        history_title = self.title_font.render(&quot;Transaction History&quot;, True, BLACK)&#10;        history_rect = history_title.get_rect(center=(SCREEN_WIDTH // 2, 250))&#10;        surface.blit(history_title, history_rect)&#10;        if account.transaction_history:&#10;            scroll_area = pygame.Rect(100, 280, SCREEN_WIDTH - 200, 300)&#10;            pygame.draw.rect(surface, LIGHT_GRAY, scroll_area)&#10;            pygame.draw.rect(surface, BLACK, scroll_area, 2)&#10;            visible_transactions = account.transaction_history[&#10;                self.scroll_position:self.scroll_position + self.max_visible_transactions&#10;            ]&#10;            for i, transaction in enumerate(visible_transactions):&#10;                if transaction[&quot;type&quot;] == &quot;deposit&quot;:&#10;                    text = f&quot;Deposit: +${transaction['amount']:.2f}&quot;&#10;                    color = GREEN&#10;                elif transaction[&quot;type&quot;] == &quot;withdrawal&quot;:&#10;                    text = f&quot;Withdrawal: -${transaction['amount']:.2f}&quot;&#10;                    color = RED&#10;                elif transaction[&quot;type&quot;] == &quot;interest&quot;:&#10;                    text = f&quot;Interest: +${transaction['amount']:.2f}&quot;&#10;                    color = BLUE&#10;                else:&#10;                    text = f&quot;{transaction['type']}: ${transaction['amount']:.2f}&quot;&#10;                    color = BLACK&#10;                text_surface = self.text_font.render(text, True, color)&#10;                text_rect = text_surface.get_rect(midleft=(120, 300 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;        else:&#10;            no_transactions = self.text_font.render(&quot;No transactions yet.&quot;, True, BLACK)&#10;            no_transactions_rect = no_transactions.get_rect(center=(SCREEN_WIDTH // 2, 320))&#10;            surface.blit(no_transactions, no_transactions_rect)&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class DepositToSavingsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for depositing money to savings account.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;        deposit_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 60,&#10;            200, 50,&#10;            &quot;Deposit&quot;,&#10;            action=self.make_deposit&#10;        )&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 130,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        self.buttons = [deposit_button, back_button]&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;    def make_deposit(self):&#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;            if amount &gt; self.game.player.cash:&#10;                self.status_message = &quot;You don't have that much cash.&quot;&#10;                self.status_color = RED&#10;                return&#10;            self.game.player.cash -= amount&#10;            self.game.player.savings_account.deposit(amount)&#10;            self.status_message = f&quot;Successfully deposited ${amount:.2f}.&quot;&#10;            self.status_color = GREEN&#10;            self.amount_input.text = &quot;&quot;&#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;    def handle_events(self, events):&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        title_surface = self.title_font.render(&quot;Deposit to Savings&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;        info_lines = [&#10;            f&quot;Your current cash: ${self.game.player.cash:.2f}&quot;,&#10;            f&quot;Your savings balance: ${self.game.player.savings_account.balance:.2f}&quot;,&#10;            &quot;&quot;,&#10;            &quot;How much would you like to deposit?&quot;&#10;        ]&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;        self.amount_input.draw(surface)&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 30))&#10;            surface.blit(status_surface, status_rect)&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class WithdrawFromSavingsScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for withdrawing money from savings account.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        self.amount_input = TextInput(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT // 2,&#10;            300, 40,&#10;            font_size=FONT_MEDIUM,&#10;            max_length=10&#10;        )&#10;        withdraw_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 60,&#10;            200, 50,&#10;            &quot;Withdraw&quot;,&#10;            action=self.make_withdrawal&#10;        )&#10;        back_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT // 2 + 130,&#10;            200, 50,&#10;            &quot;Back&quot;,&#10;            action=self.go_back&#10;        )&#10;        self.buttons = [withdraw_button, back_button]&#10;        self.status_message = &quot;&quot;&#10;        self.status_color = BLACK&#10;    def make_withdrawal(self):&#10;        try:&#10;            amount = float(self.amount_input.text)&#10;            if amount &lt;= 0:&#10;                self.status_message = &quot;Please enter a positive amount.&quot;&#10;                self.status_color = RED&#10;                return&#10;            if amount &gt; self.game.player.savings_account.balance:&#10;                self.status_message = &quot;You don't have that much in your savings account.&quot;&#10;                self.status_color = RED&#10;                return&#10;            self.game.player.savings_account.withdraw(amount)&#10;            self.game.player.cash += amount&#10;            self.status_message = f&quot;Successfully withdrew ${amount:.2f}.&quot;&#10;            self.status_color = GREEN&#10;            self.amount_input.text = &quot;&quot;&#10;        except ValueError:&#10;            self.status_message = &quot;Please enter a valid number.&quot;&#10;            self.status_color = RED&#10;    def go_back(self):&#10;        from moneySmarts.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;    def handle_events(self, events):&#10;        super().handle_events(events)&#10;        self.amount_input.update(events)&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        title_surface = self.title_font.render(&quot;Withdraw from Savings&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;        info_lines = [&#10;            f&quot;Your current cash: ${self.game.player.cash:.2f}&quot;,&#10;            f&quot;Your savings balance: ${self.game.player.savings_account.balance:.2f}&quot;,&#10;            &quot;&quot;,&#10;            &quot;How much would you like to withdraw?&quot;&#10;        ]&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;        self.amount_input.draw(surface)&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 30))&#10;            surface.blit(status_surface, status_rect)&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class BankingMenuScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Submenu for all banking and savings actions.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.title_font = pygame.font.Font(None, 48)&#10;        self.text_font = pygame.font.Font(None, 32)&#10;        self.buttons = []&#10;        self.create_buttons()&#10;        self.status_message = None&#10;        self.status_color = (0, 0, 0)&#10;&#10;    def create_buttons(self):&#10;        button_specs = [&#10;            (&quot;Deposit&quot;, self.go_to_deposit),&#10;            (&quot;Withdraw&quot;, self.go_to_withdraw),&#10;            (&quot;View Balance&quot;, self.go_to_view_balance),&#10;            (&quot;View Savings&quot;, self.go_to_view_savings),&#10;            (&quot;Open Account&quot;, self.go_to_open_account),&#10;            (&quot;Back&quot;, self.go_back)&#10;        ]&#10;        start_y = 180&#10;        for i, (label, callback) in enumerate(button_specs):&#10;            btn = Button(&#10;                SCREEN_WIDTH // 2 - 100,  # x&#10;                start_y + i * 60,         # y&#10;                200,                      # width&#10;                50,                       # height&#10;                label,                    # text&#10;                callback                  # action&#10;            )&#10;            self.buttons.append(btn)&#10;&#10;    def go_to_deposit(self):&#10;        self.game.set_screen(&quot;deposit&quot;)&#10;&#10;    def go_to_withdraw(self):&#10;        self.game.set_screen(&quot;withdraw&quot;)&#10;&#10;    def go_to_view_balance(self):&#10;        self.game.set_screen(&quot;view_balance&quot;)&#10;&#10;    def go_to_view_savings(self):&#10;        self.game.set_screen(&quot;view_savings&quot;)&#10;&#10;    def go_to_open_account(self):&#10;        self.game.set_screen(&quot;open_account&quot;)&#10;&#10;    def go_back(self):&#10;        self.game.set_screen(&quot;main_menu&quot;)&#10;&#10;    def handle_event(self, event):&#10;        for button in self.buttons:&#10;            button.handle_event(event)&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        title_surface = self.title_font.render(&quot;Banking Menu&quot;, True, BLACK)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;        info_lines = [&#10;            f&quot;Cash: ${self.game.player.cash:.2f}&quot;,&#10;            f&quot;Checking: ${getattr(self.game.player, 'checking_account', None).balance:.2f}&quot; if hasattr(self.game.player, 'checking_account') and self.game.player.checking_account else &quot;Checking: $0.00&quot;,&#10;            f&quot;Savings: ${getattr(self.game.player, 'savings_account', None).balance:.2f}&quot; if hasattr(self.game.player, 'savings_account') and self.game.player.savings_account else &quot;Savings: $0.00&quot;&#10;        ]&#10;        for i, line in enumerate(info_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 140 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;        if self.status_message:&#10;            status_surface = self.text_font.render(self.status_message, True, self.status_color)&#10;            status_rect = status_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 180))&#10;            surface.blit(status_surface, status_rect)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/moneySmartz/screens/game_screen.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/moneySmartz/screens/game_screen.py" />
              <option name="originalContent" value="import pygame&#10;import random&#10;from pygame.locals import *&#10;from moneySmartz.constants import *&#10;from moneySmartz.ui import Screen, Button&#10;&#10;class GameScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    The main game screen that shows the player's status and allows them to take actions.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.create_buttons()&#10;&#10;    def create_buttons(self):&#10;        &quot;&quot;&quot;Create the buttons for the game screen.&quot;&quot;&quot;&#10;        # Clear existing buttons&#10;        self.buttons = []&#10;&#10;        # Continue button (always present)&#10;        continue_button = Button(&#10;            SCREEN_WIDTH - 220, &#10;            SCREEN_HEIGHT - 60,&#10;            200, 50,&#10;            &quot;Continue to Next Month&quot;,&#10;            action=self.continue_to_next_month&#10;        )&#10;        self.buttons.append(continue_button)&#10;&#10;        # Banking buttons&#10;        if not self.game.player.bank_account:&#10;            bank_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;Open Bank Account&quot;,&#10;                action=self.open_bank_account&#10;            )&#10;            self.buttons.append(bank_button)&#10;        else:&#10;            view_bank_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Bank Account&quot;,&#10;                action=self.view_bank_account&#10;            )&#10;            self.buttons.append(view_bank_button)&#10;&#10;            deposit_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Deposit to Bank&quot;,&#10;                action=self.deposit_to_bank&#10;            )&#10;            self.buttons.append(deposit_button)&#10;&#10;            withdraw_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;Withdraw from Bank&quot;,&#10;                action=self.withdraw_from_bank&#10;            )&#10;            self.buttons.append(withdraw_button)&#10;&#10;            if not self.game.player.debit_card:&#10;                debit_button = Button(&#10;                    20, &#10;                    SCREEN_HEIGHT - 90,&#10;                    200, 50,&#10;                    &quot;Get Debit Card&quot;,&#10;                    action=self.get_debit_card&#10;                )&#10;                self.buttons.append(debit_button)&#10;&#10;        # Credit card buttons&#10;        if not self.game.player.credit_card and self.game.player.age &gt;= 18:&#10;            credit_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;Apply for Credit Card&quot;,&#10;                action=self.apply_for_credit_card&#10;            )&#10;            self.buttons.append(credit_button)&#10;        elif self.game.player.credit_card:&#10;            view_credit_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Credit Card&quot;,&#10;                action=self.view_credit_card&#10;            )&#10;            self.buttons.append(view_credit_button)&#10;&#10;            if self.game.player.credit_card.balance &gt; 0:&#10;                pay_credit_button = Button(&#10;                    240, &#10;                    SCREEN_HEIGHT - 210,&#10;                    200, 50,&#10;                    &quot;Pay Credit Card&quot;,&#10;                    action=self.pay_credit_card&#10;                )&#10;                self.buttons.append(pay_credit_button)&#10;&#10;        # Loan buttons&#10;        if self.game.player.loans:&#10;            view_loans_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;View Loans&quot;,&#10;                action=self.view_loans&#10;            )&#10;            self.buttons.append(view_loans_button)&#10;&#10;            pay_loan_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Make Extra Loan Payment&quot;,&#10;                action=self.make_extra_loan_payment&#10;            )&#10;            self.buttons.append(pay_loan_button)&#10;&#10;        # Asset buttons&#10;        if self.game.player.assets:&#10;            view_assets_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Assets&quot;,&#10;                action=self.view_assets&#10;            )&#10;            self.buttons.append(view_assets_button)&#10;&#10;        # Job buttons&#10;        if not self.game.player.job and self.game.player.age &gt;= 16:&#10;            job_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Look for a Job&quot;,&#10;                action=self.look_for_job&#10;            )&#10;            self.buttons.append(job_button)&#10;        elif self.game.player.job and random.random() &lt; 0.1:  # 10% chance of job opportunity each month&#10;            better_job_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Look for a Better Job&quot;,&#10;                action=self.look_for_job&#10;            )&#10;            self.buttons.append(better_job_button)&#10;&#10;        # --- System Control Buttons ---&#10;        pause_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            20,&#10;            90, 40,&#10;            &quot;Pause&quot;,&#10;            action=self.pause_game&#10;        )&#10;        self.buttons.append(pause_button)&#10;&#10;        play_button = Button(&#10;            SCREEN_WIDTH - 120,&#10;            20,&#10;            90, 40,&#10;            &quot;Play&quot;,&#10;            action=self.play_game&#10;        )&#10;        self.buttons.append(play_button)&#10;&#10;        save_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            70,&#10;            90, 40,&#10;            &quot;Save&quot;,&#10;            action=self.save_game&#10;        )&#10;        self.buttons.append(save_button)&#10;&#10;        quit_button = Button(&#10;            SCREEN_WIDTH - 120,&#10;            70,&#10;            90, 40,&#10;            &quot;Quit&quot;,&#10;            action=self.quit_game&#10;        )&#10;        self.buttons.append(quit_button)&#10;&#10;        # --- Shop Button ---&#10;        shop_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            SCREEN_HEIGHT - 120,&#10;            200, 50,&#10;            &quot;Shop&quot;,&#10;            action=self.open_shop&#10;        )&#10;        self.buttons.append(shop_button)&#10;&#10;    def continue_to_next_month(self):&#10;        &quot;&quot;&quot;Continue to the next month.&quot;&quot;&quot;&#10;        # Increment month&#10;        self.game.current_month += 1&#10;        if self.game.current_month &gt; 12:&#10;            self.game.current_month = 1&#10;            self.game.current_year += 1&#10;            self.game.player.age += 1&#10;            &#10;            # Apply interest to savings&#10;            if self.game.player.bank_account and self.game.player.bank_account.account_type == &quot;Savings&quot;:&#10;                self.game.player.bank_account.apply_interest()&#10;            &#10;            # Age assets&#10;            for asset in self.game.player.assets:&#10;                asset.age_asset()&#10;        &#10;        # Process monthly finances&#10;        self.game.process_monthly_finances()&#10;        &#10;        # Random events&#10;        if random.random() &lt; 0.3:  # 30% chance of an event each month&#10;            self.game.trigger_random_event()&#10;            # Don't proceed further until event is handled&#10;            return&#10;        &#10;        # Life stage events based on age&#10;        life_event_triggered = self.game.check_life_stage_events_gui()&#10;        &#10;        # If no life event was triggered, refresh the game screen&#10;        if not life_event_triggered:&#10;            # Check game over conditions&#10;            if self.game.player.age &gt;= 65:  # Retirement age&#10;                self.game.end_game_gui(&quot;retirement&quot;)&#10;            else:&#10;                # Refresh buttons (in case player status changed)&#10;                self.create_buttons()&#10;&#10;    def open_bank_account(self):&#10;        &quot;&quot;&quot;Open a bank account screen.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import BankAccountScreen&#10;        self.game.gui_manager.set_screen(BankAccountScreen(self.game))&#10;&#10;    def view_bank_account(self):&#10;        &quot;&quot;&quot;View bank account details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import BankDetailsScreen&#10;        self.game.gui_manager.set_screen(BankDetailsScreen(self.game))&#10;&#10;    def deposit_to_bank(self):&#10;        &quot;&quot;&quot;Deposit money to bank account.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import DepositScreen&#10;        self.game.gui_manager.set_screen(DepositScreen(self.game))&#10;&#10;    def withdraw_from_bank(self):&#10;        &quot;&quot;&quot;Withdraw money from bank account.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import WithdrawScreen&#10;        self.game.gui_manager.set_screen(WithdrawScreen(self.game))&#10;&#10;    def get_debit_card(self):&#10;        &quot;&quot;&quot;Get a debit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import GetDebitCardScreen&#10;        self.game.gui_manager.set_screen(GetDebitCardScreen(self.game))&#10;&#10;    def apply_for_credit_card(self):&#10;        &quot;&quot;&quot;Apply for a credit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import CreditCardScreen&#10;        self.game.gui_manager.set_screen(CreditCardScreen(self.game))&#10;&#10;    def view_credit_card(self):&#10;        &quot;&quot;&quot;View credit card details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import CreditCardDetailsScreen&#10;        self.game.gui_manager.set_screen(CreditCardDetailsScreen(self.game))&#10;&#10;    def pay_credit_card(self):&#10;        &quot;&quot;&quot;Make a payment on the credit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import PayCreditCardScreen&#10;        self.game.gui_manager.set_screen(PayCreditCardScreen(self.game))&#10;&#10;    def view_loans(self):&#10;        &quot;&quot;&quot;View loan details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import LoanDetailsScreen&#10;        self.game.gui_manager.set_screen(LoanDetailsScreen(self.game))&#10;&#10;    def make_extra_loan_payment(self):&#10;        &quot;&quot;&quot;Make an extra payment on a loan.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import ExtraLoanPaymentScreen&#10;        self.game.gui_manager.set_screen(ExtraLoanPaymentScreen(self.game))&#10;&#10;    def view_assets(self):&#10;        &quot;&quot;&quot;View asset details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import AssetDetailsScreen&#10;        self.game.gui_manager.set_screen(AssetDetailsScreen(self.game))&#10;&#10;    def look_for_job(self):&#10;        &quot;&quot;&quot;Look for a job or a better job.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import JobSearchScreen&#10;        self.game.gui_manager.set_screen(JobSearchScreen(self.game))&#10;&#10;    def open_shop(self):&#10;        &quot;&quot;&quot;Open the shop screen.&quot;&quot;&quot;&#10;        from moneySmartz.screens.shop_screen import ShopScreen&#10;        self.game.gui_manager.set_screen(ShopScreen(self.game))&#10;&#10;    def pause_game(self):&#10;        &quot;&quot;&quot;Pause the game (stops updates, disables actions).&quot;&quot;&quot;&#10;        self.game.paused = True&#10;        # Optionally, show a pause overlay or message&#10;&#10;    def play_game(self):&#10;        &quot;&quot;&quot;Resume the game from pause.&quot;&quot;&quot;&#10;        self.game.paused = False&#10;        # Optionally, hide pause overlay or message&#10;&#10;    def save_game(self):&#10;        &quot;&quot;&quot;Save the current game state.&quot;&quot;&quot;&#10;        self.game.save_state()&#10;        # Optionally, show a 'Game Saved' message&#10;&#10;    def quit_game(self):&#10;        &quot;&quot;&quot;Quit the game and return to main menu or exit.&quot;&quot;&quot;&#10;        self.game.quit()&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the game screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Header&#10;        pygame.draw.rect(surface, BLUE, (0, 0, SCREEN_WIDTH, 80))&#10;&#10;        # Title&#10;        title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        title_surface = title_font.render(f&quot;MONTH: {self.game.current_month}/YEAR: {self.game.current_year + 2023}&quot;, True, WHITE)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 25))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        age_surface = title_font.render(f&quot;AGE: {self.game.player.age}&quot;, True, WHITE)&#10;        age_rect = age_surface.get_rect(center=(SCREEN_WIDTH // 2, 55))&#10;        surface.blit(age_surface, age_rect)&#10;&#10;        # Player info section&#10;        info_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Name and education&#10;        self.draw_text(surface, f&quot;Name: {self.game.player.name}&quot;, 20, 100)&#10;        self.draw_text(surface, f&quot;Education: {self.game.player.education}&quot;, 20, 130)&#10;&#10;        # Job and salary&#10;        job_text = f&quot;Job: {self.game.player.job if self.game.player.job else 'Unemployed'}&quot;&#10;        self.draw_text(surface, job_text, 20, 160)&#10;&#10;        if self.game.player.job:&#10;            salary_text = f&quot;Salary: ${self.game.player.salary}/year (${self.game.player.salary/12:.2f}/month)&quot;&#10;            self.draw_text(surface, salary_text, 40, 190)&#10;&#10;        # Financial info&#10;        self.draw_text(surface, f&quot;Cash: ${self.game.player.cash:.2f}&quot;, 20, 230)&#10;&#10;        if self.game.player.bank_account:&#10;            bank_text = f&quot;Bank Account ({self.game.player.bank_account.account_type}): ${self.game.player.bank_account.balance:.2f}&quot;&#10;            self.draw_text(surface, bank_text, 20, 260)&#10;&#10;        if self.game.player.credit_card:&#10;            credit_text = f&quot;Credit Card: ${self.game.player.credit_card.balance:.2f}/{self.game.player.credit_card.limit:.2f}&quot;&#10;            self.draw_text(surface, credit_text, 20, 290)&#10;&#10;        self.draw_text(surface, f&quot;Credit Score: {self.game.player.credit_score}&quot;, 20, 320)&#10;&#10;        # Loans&#10;        if self.game.player.loans:&#10;            self.draw_text(surface, &quot;LOANS:&quot;, 400, 100)&#10;            for i, loan in enumerate(self.game.player.loans):&#10;                loan_text = f&quot;{loan.loan_type}: ${loan.current_balance:.2f} (${loan.monthly_payment:.2f}/month)&quot;&#10;                self.draw_text(surface, loan_text, 420, 130 + i * 30)&#10;&#10;        # Assets&#10;        if self.game.player.assets:&#10;            self.draw_text(surface, &quot;ASSETS:&quot;, 400, 230)&#10;            for i, asset in enumerate(self.game.player.assets):&#10;                asset_text = f&quot;{asset.name}: ${asset.current_value:.2f} ({asset.condition})&quot;&#10;                self.draw_text(surface, asset_text, 420, 260 + i * 30)&#10;&#10;        # Family&#10;        if self.game.player.family:&#10;            self.draw_text(surface, &quot;FAMILY:&quot;, 700, 100)&#10;            for i, member in enumerate(self.game.player.family):&#10;                if member[&quot;relation&quot;] == &quot;Spouse&quot;:&#10;                    family_text = f&quot;Spouse: Age {member['age'] + self.game.current_year}&quot;&#10;                else:&#10;                    family_text = f&quot;{member['relation']}: {member['name']}, Age {member['age'] + self.game.current_year}&quot;&#10;                self.draw_text(surface, family_text, 720, 130 + i * 30)&#10;&#10;        # Calculate and display net worth&#10;        cash = self.game.player.cash&#10;        bank_balance = self.game.player.bank_account.balance if self.game.player.bank_account else 0&#10;        credit_card_debt = self.game.player.credit_card.balance if self.game.player.credit_card else 0&#10;&#10;        loan_debt = 0&#10;        for loan in self.game.player.loans:&#10;            loan_debt += loan.current_balance&#10;&#10;        asset_value = 0&#10;        for asset in self.game.player.assets:&#10;            asset_value += asset.current_value&#10;&#10;        net_worth = cash + bank_balance - credit_card_debt - loan_debt + asset_value&#10;&#10;        # Net worth with color based on value&#10;        if net_worth &gt;= 0:&#10;            net_worth_color = GREEN&#10;        else:&#10;            net_worth_color = RED&#10;&#10;        net_worth_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        net_worth_text = f&quot;NET WORTH: ${net_worth:.2f}&quot;&#10;        net_worth_surface = net_worth_font.render(net_worth_text, True, net_worth_color)&#10;        net_worth_rect = net_worth_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT - 330))&#10;        surface.blit(net_worth_surface, net_worth_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;    def draw_text(self, surface, text, x, y, is_title=False):&#10;        &quot;&quot;&quot;Helper method to draw text.&quot;&quot;&quot;&#10;        font = pygame.font.SysFont('Arial', FONT_LARGE if is_title else FONT_MEDIUM)&#10;        text_surface = font.render(text, True, BLACK)&#10;        surface.blit(text_surface, (x, y))&#10;" />
              <option name="updatedContent" value="import pygame&#10;import random&#10;from pygame.locals import *&#10;from moneySmartz.constants import *&#10;from moneySmartz.ui import Screen, Button&#10;&#10;class GameScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    The main game screen that shows the player's status and allows them to take actions.&#10;    &quot;&quot;&quot;&#10;    play_startup_music = False  # Disable music for this screen&#10;    &#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.create_buttons()&#10;&#10;    def create_buttons(self):&#10;        &quot;&quot;&quot;Create the buttons for the game screen.&quot;&quot;&quot;&#10;        # Clear existing buttons&#10;        self.buttons = []&#10;&#10;        # Continue button (always present)&#10;        continue_button = Button(&#10;            SCREEN_WIDTH - 220, &#10;            SCREEN_HEIGHT - 60,&#10;            200, 50,&#10;            &quot;Continue to Next Month&quot;,&#10;            action=self.continue_to_next_month&#10;        )&#10;        self.buttons.append(continue_button)&#10;&#10;        # Banking buttons&#10;        if not self.game.player.bank_account:&#10;            bank_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;Open Bank Account&quot;,&#10;                action=self.open_bank_account&#10;            )&#10;            self.buttons.append(bank_button)&#10;        else:&#10;            view_bank_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Bank Account&quot;,&#10;                action=self.view_bank_account&#10;            )&#10;            self.buttons.append(view_bank_button)&#10;&#10;            deposit_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Deposit to Bank&quot;,&#10;                action=self.deposit_to_bank&#10;            )&#10;            self.buttons.append(deposit_button)&#10;&#10;            withdraw_button = Button(&#10;                20, &#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;Withdraw from Bank&quot;,&#10;                action=self.withdraw_from_bank&#10;            )&#10;            self.buttons.append(withdraw_button)&#10;&#10;            if not self.game.player.debit_card:&#10;                debit_button = Button(&#10;                    20, &#10;                    SCREEN_HEIGHT - 90,&#10;                    200, 50,&#10;                    &quot;Get Debit Card&quot;,&#10;                    action=self.get_debit_card&#10;                )&#10;                self.buttons.append(debit_button)&#10;&#10;        # Credit card buttons&#10;        if not self.game.player.credit_card and self.game.player.age &gt;= 18:&#10;            credit_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;Apply for Credit Card&quot;,&#10;                action=self.apply_for_credit_card&#10;            )&#10;            self.buttons.append(credit_button)&#10;        elif self.game.player.credit_card:&#10;            view_credit_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Credit Card&quot;,&#10;                action=self.view_credit_card&#10;            )&#10;            self.buttons.append(view_credit_button)&#10;&#10;            if self.game.player.credit_card.balance &gt; 0:&#10;                pay_credit_button = Button(&#10;                    240, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Pay Credit Card&quot;,&#10;                action=self.pay_credit_card&#10;            )&#10;            self.buttons.append(pay_credit_button)&#10;&#10;        # Loan buttons&#10;        if self.game.player.loans:&#10;            view_loans_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;View Loans&quot;,&#10;                action=self.view_loans&#10;            )&#10;            self.buttons.append(view_loans_button)&#10;&#10;            pay_loan_button = Button(&#10;                240, &#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Make Extra Loan Payment&quot;,&#10;                action=self.make_extra_loan_payment&#10;            )&#10;            self.buttons.append(pay_loan_button)&#10;&#10;        # Asset buttons&#10;        if self.game.player.assets:&#10;            view_assets_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 270,&#10;                200, 50,&#10;                &quot;View Assets&quot;,&#10;                action=self.view_assets&#10;            )&#10;            self.buttons.append(view_assets_button)&#10;&#10;        # Job buttons&#10;        if not self.game.player.job and self.game.player.age &gt;= 16:&#10;            job_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Look for a Job&quot;,&#10;                action=self.look_for_job&#10;            )&#10;            self.buttons.append(job_button)&#10;        elif self.game.player.job and random.random() &lt; 0.1:  # 10% chance of job opportunity each month&#10;            better_job_button = Button(&#10;                460, &#10;                SCREEN_HEIGHT - 210,&#10;                200, 50,&#10;                &quot;Look for a Better Job&quot;,&#10;                action=self.look_for_job&#10;            )&#10;            self.buttons.append(better_job_button)&#10;&#10;        # --- System Control Buttons ---&#10;        # Move these buttons down below the top banner (e.g., y=100 and y=150)&#10;        pause_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            100,&#10;            90, 40,&#10;            &quot;Pause&quot;,&#10;            action=self.pause_game&#10;        )&#10;        self.buttons.append(pause_button)&#10;&#10;        play_button = Button(&#10;            SCREEN_WIDTH - 120,&#10;            100,&#10;            90, 40,&#10;            &quot;Play&quot;,&#10;            action=self.play_game&#10;        )&#10;        self.buttons.append(play_button)&#10;&#10;        save_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            150,&#10;            90, 40,&#10;            &quot;Save&quot;,&#10;            action=self.save_game&#10;        )&#10;        self.buttons.append(save_button)&#10;&#10;        load_button = Button(&#10;            SCREEN_WIDTH - 120,&#10;            150,&#10;            90, 40,&#10;            &quot;Load&quot;,&#10;            action=self.load_game&#10;        )&#10;        self.buttons.append(load_button)&#10;&#10;        quit_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            200,&#10;            190, 40,&#10;            &quot;Quit&quot;,&#10;            action=self.quit_game&#10;        )&#10;        self.buttons.append(quit_button)&#10;&#10;        # --- Shop Button ---&#10;        shop_button = Button(&#10;            SCREEN_WIDTH - 220,&#10;            SCREEN_HEIGHT - 120,&#10;            200, 50,&#10;            &quot;Shop&quot;,&#10;            action=self.open_shop&#10;        )&#10;        self.buttons.append(shop_button)&#10;&#10;    def continue_to_next_month(self):&#10;        &quot;&quot;&quot;Continue to the next month.&quot;&quot;&quot;&#10;        # Increment month&#10;        self.game.current_month += 1&#10;        if self.game.current_month &gt; 12:&#10;            self.game.current_month = 1&#10;            self.game.current_year += 1&#10;            self.game.player.age += 1&#10;            &#10;            # Apply interest to savings&#10;            if self.game.player.bank_account and self.game.player.bank_account.account_type == &quot;Savings&quot;:&#10;                self.game.player.bank_account.apply_interest()&#10;            &#10;            # Age assets&#10;            for asset in self.game.player.assets:&#10;                asset.age_asset()&#10;        &#10;        # Process monthly finances&#10;        self.game.process_monthly_finances()&#10;        &#10;        # Random events&#10;        if random.random() &lt; 0.3:  # 30% chance of an event each month&#10;            self.game.trigger_random_event()&#10;            # Don't proceed further until event is handled&#10;            return&#10;        &#10;        # Life stage events based on age&#10;        life_event_triggered = self.game.check_life_stage_events_gui()&#10;        &#10;        # If no life event was triggered, refresh the game screen&#10;        if not life_event_triggered:&#10;            # Check game over conditions&#10;            if self.game.player.age &gt;= 65:  # Retirement age&#10;                self.game.end_game_gui(&quot;retirement&quot;)&#10;            else:&#10;                # Refresh buttons (in case player status changed)&#10;                self.create_buttons()&#10;&#10;    def open_bank_account(self):&#10;        &quot;&quot;&quot;Open a bank account screen.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import BankAccountScreen&#10;        self.game.gui_manager.set_screen(BankAccountScreen(self.game))&#10;&#10;    def view_bank_account(self):&#10;        &quot;&quot;&quot;View bank account details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import BankDetailsScreen&#10;        self.game.gui_manager.set_screen(BankDetailsScreen(self.game))&#10;&#10;    def deposit_to_bank(self):&#10;        &quot;&quot;&quot;Deposit money to bank account.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import DepositScreen&#10;        self.game.gui_manager.set_screen(DepositScreen(self.game))&#10;&#10;    def withdraw_from_bank(self):&#10;        &quot;&quot;&quot;Withdraw money from bank account.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import WithdrawScreen&#10;        self.game.gui_manager.set_screen(WithdrawScreen(self.game))&#10;&#10;    def get_debit_card(self):&#10;        &quot;&quot;&quot;Get a debit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import GetDebitCardScreen&#10;        self.game.gui_manager.set_screen(GetDebitCardScreen(self.game))&#10;&#10;    def apply_for_credit_card(self):&#10;        &quot;&quot;&quot;Apply for a credit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import CreditCardScreen&#10;        self.game.gui_manager.set_screen(CreditCardScreen(self.game))&#10;&#10;    def view_credit_card(self):&#10;        &quot;&quot;&quot;View credit card details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import CreditCardDetailsScreen&#10;        self.game.gui_manager.set_screen(CreditCardDetailsScreen(self.game))&#10;&#10;    def pay_credit_card(self):&#10;        &quot;&quot;&quot;Make a payment on the credit card.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import PayCreditCardScreen&#10;        self.game.gui_manager.set_screen(PayCreditCardScreen(self.game))&#10;&#10;    def view_loans(self):&#10;        &quot;&quot;&quot;View loan details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import LoanDetailsScreen&#10;        self.game.gui_manager.set_screen(LoanDetailsScreen(self.game))&#10;&#10;    def make_extra_loan_payment(self):&#10;        &quot;&quot;&quot;Make an extra payment on a loan.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import ExtraLoanPaymentScreen&#10;        self.game.gui_manager.set_screen(ExtraLoanPaymentScreen(self.game))&#10;&#10;    def view_assets(self):&#10;        &quot;&quot;&quot;View asset details.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import AssetDetailsScreen&#10;        self.game.gui_manager.set_screen(AssetDetailsScreen(self.game))&#10;&#10;    def look_for_job(self):&#10;        &quot;&quot;&quot;Look for a job or a better job.&quot;&quot;&quot;&#10;        from moneySmartz.screens.financial_screens import JobSearchScreen&#10;        self.game.gui_manager.set_screen(JobSearchScreen(self.game))&#10;&#10;    def open_shop(self):&#10;        &quot;&quot;&quot;Open the shop screen.&quot;&quot;&quot;&#10;        from moneySmartz.screens.shop_screen import ShopScreen&#10;        self.game.gui_manager.set_screen(ShopScreen(self.game))&#10;&#10;    def pause_game(self):&#10;        &quot;&quot;&quot;Pause the game (stops updates, disables actions).&quot;&quot;&quot;&#10;        self.game.paused = True&#10;        # Optionally, show a pause overlay or message&#10;&#10;    def play_game(self):&#10;        &quot;&quot;&quot;Resume the game from pause.&quot;&quot;&quot;&#10;        self.game.paused = False&#10;        # Optionally, hide pause overlay or message&#10;&#10;    def save_game(self):&#10;        &quot;&quot;&quot;Save the current game state.&quot;&quot;&quot;&#10;        self.game.save_state()&#10;        # Optionally, show a 'Game Saved' message&#10;&#10;    def load_game(self):&#10;        &quot;&quot;&quot;Load the saved game state.&quot;&quot;&quot;&#10;        self.game.load_state()&#10;        self.create_buttons()  # Refresh buttons after loading&#10;&#10;    def quit_game(self):&#10;        &quot;&quot;&quot;Quit the game and return to main menu or exit.&quot;&quot;&quot;&#10;        self.game.quit()&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the game screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Header&#10;        pygame.draw.rect(surface, BLUE, (0, 0, SCREEN_WIDTH, 80))&#10;&#10;        # Title&#10;        title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        title_surface = title_font.render(f&quot;MONTH: {self.game.current_month}/YEAR: {self.game.current_year + 2023}&quot;, True, WHITE)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 25))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        age_surface = title_font.render(f&quot;AGE: {self.game.player.age}&quot;, True, WHITE)&#10;        age_rect = age_surface.get_rect(center=(SCREEN_WIDTH // 2, 55))&#10;        surface.blit(age_surface, age_rect)&#10;&#10;        # Player info section&#10;        info_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Name and education&#10;        self.draw_text(surface, f&quot;Name: {self.game.player.name}&quot;, 20, 100)&#10;        self.draw_text(surface, f&quot;Education: {self.game.player.education}&quot;, 20, 130)&#10;&#10;        # Job and salary&#10;        job_text = f&quot;Job: {self.game.player.job if self.game.player.job else 'Unemployed'}&quot;&#10;        self.draw_text(surface, job_text, 20, 160)&#10;&#10;        if self.game.player.job:&#10;            salary_text = f&quot;Salary: ${self.game.player.salary}/year (${self.game.player.salary/12:.2f}/month)&quot;&#10;            self.draw_text(surface, salary_text, 40, 190)&#10;&#10;        # Financial info&#10;        self.draw_text(surface, f&quot;Cash: ${self.game.player.cash:.2f}&quot;, 20, 230)&#10;&#10;        if self.game.player.bank_account:&#10;            bank_text = f&quot;Bank Account ({self.game.player.bank_account.account_type}): ${self.game.player.bank_account.balance:.2f}&quot;&#10;            self.draw_text(surface, bank_text, 20, 260)&#10;&#10;        if self.game.player.credit_card:&#10;            credit_text = f&quot;Credit Card: ${self.game.player.credit_card.balance:.2f}/{self.game.player.credit_card.limit:.2f}&quot;&#10;            self.draw_text(surface, credit_text, 20, 290)&#10;&#10;        self.draw_text(surface, f&quot;Credit Score: {self.game.player.credit_score}&quot;, 20, 320)&#10;&#10;        # Loans&#10;        if self.game.player.loans:&#10;            self.draw_text(surface, &quot;LOANS:&quot;, 400, 100)&#10;            for i, loan in enumerate(self.game.player.loans):&#10;                loan_text = f&quot;{loan.loan_type}: ${loan.current_balance:.2f} (${loan.monthly_payment:.2f}/month)&quot;&#10;                self.draw_text(surface, loan_text, 420, 130 + i * 30)&#10;&#10;        # Assets&#10;        if self.game.player.assets:&#10;            self.draw_text(surface, &quot;ASSETS:&quot;, 400, 230)&#10;            for i, asset in enumerate(self.game.player.assets):&#10;                asset_text = f&quot;{asset.name}: ${asset.current_value:.2f} ({asset.condition})&quot;&#10;                self.draw_text(surface, asset_text, 420, 260 + i * 30)&#10;&#10;        # Family&#10;        if self.game.player.family:&#10;            self.draw_text(surface, &quot;FAMILY:&quot;, 700, 100)&#10;            for i, member in enumerate(self.game.player.family):&#10;                if member[&quot;relation&quot;] == &quot;Spouse&quot;:&#10;                    family_text = f&quot;Spouse: Age {member['age'] + self.game.current_year}&quot;&#10;                else:&#10;                    family_text = f&quot;{member['relation']}: {member['name']}, Age {member['age'] + self.game.current_year}&quot;&#10;                self.draw_text(surface, family_text, 720, 130 + i * 30)&#10;&#10;        # Calculate and display net worth&#10;        cash = self.game.player.cash&#10;        bank_balance = self.game.player.bank_account.balance if self.game.player.bank_account else 0&#10;        credit_card_debt = self.game.player.credit_card.balance if self.game.player.credit_card else 0&#10;&#10;        loan_debt = 0&#10;        for loan in self.game.player.loans:&#10;            loan_debt += loan.current_balance&#10;&#10;        asset_value = 0&#10;        for asset in self.game.player.assets:&#10;            asset_value += asset.current_value&#10;&#10;        net_worth = cash + bank_balance - credit_card_debt - loan_debt + asset_value&#10;&#10;        # Net worth with color based on value&#10;        if net_worth &gt;= 0:&#10;            net_worth_color = GREEN&#10;        else:&#10;            net_worth_color = RED&#10;&#10;        net_worth_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        net_worth_text = f&quot;NET WORTH: ${net_worth:.2f}&quot;&#10;        net_worth_surface = net_worth_font.render(net_worth_text, True, net_worth_color)&#10;        net_worth_rect = net_worth_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT - 330))&#10;        surface.blit(net_worth_surface, net_worth_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;    def draw_text(self, surface, text, x, y, is_title=False):&#10;        &quot;&quot;&quot;Helper method to draw text.&quot;&quot;&quot;&#10;        font = pygame.font.SysFont('Arial', FONT_LARGE if is_title else FONT_MEDIUM)&#10;        text_surface = font.render(text, True, BLACK)&#10;        surface.blit(text_surface, (x, y))" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/moneySmartz/screens/life_event_screens.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/moneySmartz/screens/life_event_screens.py" />
              <option name="originalContent" value="import pygame&#10;import random&#10;from pygame.locals import *&#10;from moneySmartz.constants import *&#10;from moneySmartz.ui import Screen, Button, TextInput&#10;from moneySmartz.models import Loan, Asset, Card&#10;&#10;BROWN = (139, 69, 19)&#10;&#10;class HighSchoolGraduationScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for high school graduation event.&#10;    &quot;&quot;&quot;&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Buttons&#10;        college_button = Button(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT - 210,&#10;            300, 50,&#10;            &quot;Go to College ($20,000/year)&quot;,&#10;            action=self.go_to_college&#10;        )&#10;&#10;        trade_button = Button(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT - 150,&#10;            300, 50,&#10;            &quot;Go to Trade School ($10,000)&quot;,&#10;            action=self.go_to_trade_school&#10;        )&#10;&#10;        work_button = Button(&#10;            SCREEN_WIDTH // 2 - 150,&#10;            SCREEN_HEIGHT - 90,&#10;            300, 50,&#10;            &quot;Start Working Full-time&quot;,&#10;            action=self.start_working&#10;        )&#10;&#10;        self.buttons = [college_button, trade_button, work_button]&#10;&#10;    def go_to_college(self):&#10;        &quot;&quot;&quot;Choose to go to college.&quot;&quot;&quot;&#10;        # Check if player can afford college&#10;        annual_cost = 20000&#10;        if self.game.player.cash &gt;= annual_cost:&#10;            self.game.player.cash -= annual_cost&#10;        elif self.game.player.bank_account and self.game.player.bank_account.balance &gt;= annual_cost:&#10;            self.game.player.bank_account.withdraw(annual_cost)&#10;        else:&#10;            # Need a student loan&#10;            loan_amount = 80000  # 4 years of college&#10;            loan = Loan(&quot;Student&quot;, loan_amount, 0.05, 20)  # 5% interest, 20-year term&#10;            self.game.player.loans.append(loan)&#10;&#10;        self.game.player.education = &quot;College (In Progress)&quot;&#10;&#10;        # Return to game screen&#10;        from moneySmartz.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def go_to_trade_school(self):&#10;        &quot;&quot;&quot;Choose to go to trade school.&quot;&quot;&quot;&#10;        # Check if player can afford trade school&#10;        cost = 10000&#10;        if self.game.player.cash &gt;= cost:&#10;            self.game.player.cash -= cost&#10;        elif self.game.player.bank_account and self.game.player.bank_account.balance &gt;= cost:&#10;            self.game.player.bank_account.withdraw(cost)&#10;        else:&#10;            # Need a student loan&#10;            loan = Loan(&quot;Student&quot;, cost, 0.05, 10)  # 5% interest, 10-year term&#10;            self.game.player.loans.append(loan)&#10;&#10;        self.game.player.education = &quot;Trade School&quot;&#10;&#10;        # Return to game screen&#10;        from moneySmartz.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def start_working(self):&#10;        &quot;&quot;&quot;Choose to start working full-time.&quot;&quot;&quot;&#10;        self.game.player.education = &quot;High School Graduate&quot;&#10;&#10;        # Go to job search screen&#10;        from moneySmartz.screens.financial_screens import JobSearchScreen&#10;        self.game.gui_manager.set_screen(JobSearchScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the high school graduation screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;HIGH SCHOOL GRADUATION&quot;, True, BLUE)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Graduation cap image (simple triangle and rectangle)&#10;        cap_center_x = SCREEN_WIDTH // 2&#10;        cap_center_y = 180&#10;&#10;        # Draw cap&#10;        pygame.draw.rect(surface, BLACK, (cap_center_x - 50, cap_center_y - 10, 100, 20))&#10;&#10;        # Draw tassel&#10;        pygame.draw.line(surface, YELLOW, (cap_center_x + 40, cap_center_y), (cap_center_x + 60, cap_center_y + 30), 5)&#10;        pygame.draw.circle(surface, YELLOW, (cap_center_x + 60, cap_center_y + 40), 10)&#10;&#10;        # Draw top&#10;        pygame.draw.polygon(surface, BLACK, [&#10;            (cap_center_x - 50, cap_center_y - 10),&#10;            (cap_center_x + 50, cap_center_y - 10),&#10;            (cap_center_x, cap_center_y - 60)&#10;        ])&#10;&#10;        # Explanation text&#10;        text_lines = [&#10;            &quot;Congratulations! You've graduated from high school.&quot;,&#10;            &quot;It's time to make some important decisions about your future.&quot;,&#10;            &quot;&quot;,&#10;            &quot;You can go to college, which costs $20,000 per year for 4 years,&quot;,&#10;            &quot;but may lead to higher-paying jobs in the future.&quot;,&#10;            &quot;&quot;,&#10;            &quot;You can go to trade school, which costs $10,000 for 2 years,&quot;,&#10;            &quot;and can lead to specialized technical careers.&quot;,&#10;            &quot;&quot;,&#10;            &quot;Or you can start working full-time right away with your high school diploma.&quot;,&#10;            &quot;&quot;,&#10;            &quot;What would you like to do?&quot;&#10;        ]&#10;&#10;        for i, line in enumerate(text_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 250 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class CollegeGraduationScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for college graduation event.&#10;    &quot;&quot;&quot;&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Buttons&#10;        continue_button = Button(&#10;            SCREEN_WIDTH // 2 - 100,&#10;            SCREEN_HEIGHT - 90,&#10;            200, 50,&#10;            &quot;Continue&quot;,&#10;            action=self.continue_to_job_search&#10;        )&#10;&#10;        self.buttons = [continue_button]&#10;&#10;    def continue_to_job_search(self):&#10;        &quot;&quot;&quot;Continue to job search after graduation.&quot;&quot;&quot;&#10;        # Update education status&#10;        self.game.player.education = &quot;College Graduate&quot;&#10;&#10;        # Boost credit score&#10;        self.game.player.credit_score += 20  # Education boosts credit score&#10;&#10;        # Go to job search screen&#10;        from moneySmartz.screens.financial_screens import JobSearchScreen&#10;        self.game.gui_manager.set_screen(JobSearchScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the college graduation screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;COLLEGE GRADUATION&quot;, True, BLUE)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        # Graduation cap image (simple triangle and rectangle)&#10;        cap_center_x = SCREEN_WIDTH // 2&#10;        cap_center_y = 180&#10;&#10;        # Draw cap&#10;        pygame.draw.rect(surface, BLACK, (cap_center_x - 50, cap_center_y - 10, 100, 20))&#10;&#10;        # Draw tassel&#10;        pygame.draw.line(surface, YELLOW, (cap_center_x + 40, cap_center_y), (cap_center_x + 60, cap_center_y + 30), 5)&#10;        pygame.draw.circle(surface, YELLOW, (cap_center_x + 60, cap_center_y + 40), 10)&#10;&#10;        # Draw top&#10;        pygame.draw.polygon(surface, BLACK, [&#10;            (cap_center_x - 50, cap_center_y - 10),&#10;            (cap_center_x + 50, cap_center_y - 10),&#10;            (cap_center_x, cap_center_y - 60)&#10;        ])&#10;&#10;        # Explanation text&#10;        text_lines = [&#10;            &quot;Congratulations! You've graduated from college with a bachelor's degree.&quot;,&#10;            &quot;Your education will open up better job opportunities.&quot;,&#10;            &quot;&quot;,&#10;            &quot;Your credit score has increased due to your educational achievement.&quot;,&#10;            f&quot;Your credit score is now {self.game.player.credit_score}.&quot;,&#10;            &quot;&quot;,&#10;            &quot;With your new degree, you have access to better job opportunities.&quot;,&#10;            &quot;Let's look for a job that matches your qualifications!&quot;&#10;        ]&#10;&#10;        for i, line in enumerate(text_lines):&#10;            text_surface = self.text_font.render(line, True, BLACK)&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 250 + i * 30))&#10;            surface.blit(text_surface, text_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class CarPurchaseScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for car purchase opportunity.&#10;    &quot;&quot;&quot;&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # Car options&#10;        self.car_options = [&#10;            {&quot;name&quot;: &quot;Used Economy Car&quot;, &quot;value&quot;: 5000},&#10;            {&quot;name&quot;: &quot;New Economy Car&quot;, &quot;value&quot;: 18000},&#10;            {&quot;name&quot;: &quot;Used Luxury Car&quot;, &quot;value&quot;: 15000},&#10;            {&quot;name&quot;: &quot;New Luxury Car&quot;, &quot;value&quot;: 35000},&#10;        ]&#10;&#10;        # Selected car&#10;        self.selected_car = None&#10;&#10;        # Payment method&#10;        self.payment_method = None&#10;&#10;        # State (0 = car selection, 1 = payment selection, 2 = confirmation)&#10;        self.state = 0&#10;&#10;        # Create car selection buttons&#10;        self.create_car_buttons()&#10;&#10;    def create_car_buttons(self):&#10;        &quot;&quot;&quot;Create buttons for car selection.&quot;&quot;&quot;&#10;        self.buttons = []&#10;&#10;        if self.state == 0:&#10;            # Car selection buttons&#10;            for i, car in enumerate(self.car_options):&#10;                car_button = Button(&#10;                    SCREEN_WIDTH // 2 - 150,&#10;                    250 + i * 60,&#10;                    300, 50,&#10;                    f&quot;{car['name']} - ${car['value']}&quot;,&#10;                    action=lambda c=car: self.select_car(c)&#10;                )&#10;                self.buttons.append(car_button)&#10;&#10;            # Skip button&#10;            skip_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Skip for Now&quot;,&#10;                action=self.skip_purchase&#10;            )&#10;            self.buttons.append(skip_button)&#10;&#10;        elif self.state == 1:&#10;            # Payment method buttons&#10;            payment_options = [&quot;Cash&quot;]&#10;&#10;            if self.game.player.bank_account and self.game.player.bank_account.balance &gt;= self.selected_car['value']:&#10;                payment_options.append(&quot;Bank Account&quot;)&#10;&#10;            payment_options.append(&quot;Auto Loan&quot;)&#10;&#10;            for i, method in enumerate(payment_options):&#10;                method_button = Button(&#10;                    SCREEN_WIDTH // 2 - 100,&#10;                    300 + i * 60,&#10;                    200, 50,&#10;                    method,&#10;                    action=lambda m=method: self.select_payment_method(m)&#10;                )&#10;                self.buttons.append(method_button)&#10;&#10;            # Back button&#10;            back_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Back&quot;,&#10;                action=self.go_back_to_car_selection&#10;            )&#10;            self.buttons.append(back_button)&#10;&#10;        elif self.state == 2:&#10;            # Confirmation button&#10;            confirm_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Continue&quot;,&#10;                action=self.confirm_purchase&#10;            )&#10;            self.buttons.append(confirm_button)&#10;&#10;    def select_car(self, car):&#10;        &quot;&quot;&quot;Select a car to purchase.&quot;&quot;&quot;&#10;        self.selected_car = car&#10;        self.state = 1&#10;        self.create_car_buttons()&#10;&#10;    def go_back_to_car_selection(self):&#10;        &quot;&quot;&quot;Go back to car selection.&quot;&quot;&quot;&#10;        self.state = 0&#10;        self.create_car_buttons()&#10;&#10;    def select_payment_method(self, method):&#10;        &quot;&quot;&quot;Select a payment method.&quot;&quot;&quot;&#10;        self.payment_method = method&#10;&#10;        # Process payment&#10;        if method == &quot;Cash&quot; and self.game.player.cash &gt;= self.selected_car['value']:&#10;            self.game.player.cash -= self.selected_car['value']&#10;        elif method == &quot;Bank Account&quot;:&#10;            self.game.player.bank_account.withdraw(self.selected_car['value'])&#10;        else:  # Auto Loan&#10;            # Determine loan terms based on credit score&#10;            if self.game.player.credit_score &gt;= 700:&#10;                interest_rate = 0.03  # 3%&#10;            elif self.game.player.credit_score &gt;= 650:&#10;                interest_rate = 0.05  # 5%&#10;            else:&#10;                interest_rate = 0.08  # 8%&#10;&#10;            loan = Loan(&quot;Auto&quot;, self.selected_car['value'], interest_rate, 5)  # 5-year auto loan&#10;            self.game.player.loans.append(loan)&#10;&#10;        # Add car to assets&#10;        self.game.player.assets.append(Asset(&quot;Car&quot;, self.selected_car['name'], self.selected_car['value']))&#10;&#10;        # Move to confirmation&#10;        self.state = 2&#10;        self.create_car_buttons()&#10;&#10;    def skip_purchase(self):&#10;        &quot;&quot;&quot;Skip car purchase.&quot;&quot;&quot;&#10;        from moneySmartz.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def confirm_purchase(self):&#10;        &quot;&quot;&quot;Confirm purchase and return to game.&quot;&quot;&quot;&#10;        from moneySmartz.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the car purchase screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;CAR PURCHASE OPPORTUNITY&quot;, True, BLUE)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        if self.state == 0:&#10;            # Car selection state&#10;            text_lines = [&#10;                &quot;You're now at an age where having your own car could be beneficial.&quot;,&#10;                &quot;Would you like to look at some car options?&quot;,&#10;                &quot;&quot;,&#10;                &quot;Select a car to purchase:&quot;&#10;            ]&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;        elif self.state == 1:&#10;            # Payment method selection state&#10;            text_lines = [&#10;                f&quot;You've selected the {self.selected_car['name']} for ${self.selected_car['value']}.&quot;,&#10;                &quot;&quot;,&#10;                &quot;How would you like to pay?&quot;&#10;            ]&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;        elif self.state == 2:&#10;            # Confirmation state&#10;            text_lines = [&#10;                f&quot;Congratulations on your new {self.selected_car['name']}!&quot;,&#10;                &quot;&quot;,&#10;                f&quot;You paid using {self.payment_method}.&quot;&#10;            ]&#10;&#10;            if self.payment_method == &quot;Auto Loan&quot;:&#10;                loan = self.game.player.loans[-1]  # The loan we just added&#10;                text_lines.extend([&#10;                    &quot;&quot;,&#10;                    f&quot;Your auto loan details:&quot;,&#10;                    f&quot;Amount: ${loan.original_amount:.2f}&quot;,&#10;                    f&quot;Interest Rate: {loan.interest_rate*100:.1f}%&quot;,&#10;                    f&quot;Monthly Payment: ${loan.monthly_payment:.2f}&quot;,&#10;                    f&quot;Term: {loan.term_years} years&quot;&#10;                ])&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;            # Draw car image (simple rectangle)&#10;            car_rect = pygame.Rect(SCREEN_WIDTH // 2 - 100, 350, 200, 100)&#10;            pygame.draw.rect(surface, BLUE, car_rect)&#10;            pygame.draw.rect(surface, BLACK, car_rect, 2)  # Border&#10;&#10;            # Draw wheels&#10;            pygame.draw.circle(surface, BLACK, (SCREEN_WIDTH // 2 - 60, 450), 20)&#10;            pygame.draw.circle(surface, BLACK, (SCREEN_WIDTH // 2 + 60, 450), 20)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class HousingScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for house purchase opportunity.&#10;    &quot;&quot;&quot;&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # House options&#10;        self.house_options = [&#10;            {&quot;name&quot;: &quot;Small Starter Home&quot;, &quot;value&quot;: 150000},&#10;            {&quot;name&quot;: &quot;Mid-size Family Home&quot;, &quot;value&quot;: 250000},&#10;            {&quot;name&quot;: &quot;Large Luxury Home&quot;, &quot;value&quot;: 500000},&#10;            {&quot;name&quot;: &quot;Urban Condo&quot;, &quot;value&quot;: 200000},&#10;        ]&#10;&#10;        # Selected house&#10;        self.selected_house = None&#10;&#10;        # Payment method for down payment&#10;        self.payment_method = None&#10;&#10;        # State (0 = house selection, 1 = payment selection, 2 = confirmation)&#10;        self.state = 0&#10;&#10;        # Create house selection buttons&#10;        self.create_house_buttons()&#10;&#10;    def create_house_buttons(self):&#10;        &quot;&quot;&quot;Create buttons for house selection.&quot;&quot;&quot;&#10;        self.buttons = []&#10;&#10;        if self.state == 0:&#10;            # House selection buttons&#10;            for i, house in enumerate(self.house_options):&#10;                house_button = Button(&#10;                    SCREEN_WIDTH // 2 - 150,&#10;                    250 + i * 60,&#10;                    300, 50,&#10;                    f&quot;{house['name']} - ${house['value']}&quot;,&#10;                    action=lambda h=house: self.select_house(h)&#10;                )&#10;                self.buttons.append(house_button)&#10;&#10;            # Skip button&#10;            skip_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Skip for Now&quot;,&#10;                action=self.skip_purchase&#10;            )&#10;            self.buttons.append(skip_button)&#10;&#10;        elif self.state == 1:&#10;            # Payment method buttons for down payment&#10;            payment_options = []&#10;&#10;            down_payment = self.selected_house['value'] * 0.2&#10;&#10;            if self.game.player.cash &gt;= down_payment:&#10;                payment_options.append(&quot;Cash&quot;)&#10;&#10;            if self.game.player.bank_account and self.game.player.bank_account.balance &gt;= down_payment:&#10;                payment_options.append(&quot;Bank Account&quot;)&#10;&#10;            if not payment_options:&#10;                # Not enough money for down payment&#10;                self.state = 3  # Special state for not enough money&#10;                self.create_house_buttons()&#10;                return&#10;&#10;            for i, method in enumerate(payment_options):&#10;                method_button = Button(&#10;                    SCREEN_WIDTH // 2 - 100,&#10;                    300 + i * 60,&#10;                    200, 50,&#10;                    method,&#10;                    action=lambda m=method: self.select_payment_method(m)&#10;                )&#10;                self.buttons.append(method_button)&#10;&#10;            # Back button&#10;            back_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Back&quot;,&#10;                action=self.go_back_to_house_selection&#10;            )&#10;            self.buttons.append(back_button)&#10;&#10;        elif self.state == 2:&#10;            # Confirmation button&#10;            confirm_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Continue&quot;,&#10;                action=self.confirm_purchase&#10;            )&#10;            self.buttons.append(confirm_button)&#10;&#10;        elif self.state == 3:&#10;            # Not enough money state&#10;            back_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Back&quot;,&#10;                action=self.go_back_to_house_selection&#10;            )&#10;            self.buttons.append(back_button)&#10;&#10;            skip_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;Skip for Now&quot;,&#10;                action=self.skip_purchase&#10;            )&#10;            self.buttons.append(skip_button)&#10;&#10;    def select_house(self, house):&#10;        &quot;&quot;&quot;Select a house to purchase.&quot;&quot;&quot;&#10;        self.selected_house = house&#10;        self.state = 1&#10;        self.create_house_buttons()&#10;&#10;    def go_back_to_house_selection(self):&#10;        &quot;&quot;&quot;Go back to house selection.&quot;&quot;&quot;&#10;        self.state = 0&#10;        self.create_house_buttons()&#10;&#10;    def select_payment_method(self, method):&#10;        &quot;&quot;&quot;Select a payment method for down payment.&quot;&quot;&quot;&#10;        self.payment_method = method&#10;&#10;        # Calculate down payment (20% is standard)&#10;        down_payment = self.selected_house['value'] * 0.2&#10;        loan_amount = self.selected_house['value'] - down_payment&#10;&#10;        # Process down payment&#10;        if method == &quot;Cash&quot;:&#10;            self.game.player.cash -= down_payment&#10;        else:  # Bank Account&#10;            self.game.player.bank_account.withdraw(down_payment)&#10;&#10;        # Create mortgage&#10;        if self.game.player.credit_score &gt;= 750:&#10;            interest_rate = 0.035  # 3.5%&#10;        elif self.game.player.credit_score &gt;= 700:&#10;            interest_rate = 0.04   # 4.0%&#10;        elif self.game.player.credit_score &gt;= 650:&#10;            interest_rate = 0.045  # 4.5%&#10;        else:&#10;            interest_rate = 0.055  # 5.5%&#10;&#10;        loan = Loan(&quot;Mortgage&quot;, loan_amount, interest_rate, 30)  # 30-year mortgage&#10;        self.game.player.loans.append(loan)&#10;&#10;        # Add house to assets&#10;        self.game.player.assets.append(Asset(&quot;House&quot;, self.selected_house['name'], self.selected_house['value']))&#10;&#10;        # Move to confirmation&#10;        self.state = 2&#10;        self.create_house_buttons()&#10;&#10;    def skip_purchase(self):&#10;        &quot;&quot;&quot;Skip house purchase.&quot;&quot;&quot;&#10;        from moneySmartz.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def confirm_purchase(self):&#10;        &quot;&quot;&quot;Confirm purchase and return to game.&quot;&quot;&quot;&#10;        from moneySmartz.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the housing screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;HOUSE PURCHASE OPPORTUNITY&quot;, True, BLUE)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        if self.state == 0:&#10;            # House selection state&#10;            text_lines = [&#10;                &quot;You're now at a stage in life where buying a house could be a good investment.&quot;,&#10;                &quot;Would you like to look at some housing options?&quot;,&#10;                &quot;&quot;,&#10;                &quot;Select a house to purchase:&quot;&#10;            ]&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;        elif self.state == 1:&#10;            # Payment method selection state&#10;            down_payment = self.selected_house['value'] * 0.2&#10;&#10;            text_lines = [&#10;                f&quot;You've selected the {self.selected_house['name']} for ${self.selected_house['value']}.&quot;,&#10;                f&quot;A standard mortgage requires a 20% down payment of ${down_payment:.2f}.&quot;,&#10;                &quot;&quot;,&#10;                &quot;How would you like to pay the down payment?&quot;&#10;            ]&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;        elif self.state == 2:&#10;            # Confirmation state&#10;            loan = self.game.player.loans[-1]  # The loan we just added&#10;            down_payment = self.selected_house['value'] * 0.2&#10;&#10;            text_lines = [&#10;                f&quot;Congratulations on your new {self.selected_house['name']}!&quot;,&#10;                &quot;&quot;,&#10;                f&quot;You paid the down payment of ${down_payment:.2f} using {self.payment_method}.&quot;,&#10;                &quot;&quot;,&#10;                f&quot;Your mortgage details:&quot;,&#10;                f&quot;Loan Amount: ${loan.original_amount:.2f}&quot;,&#10;                f&quot;Interest Rate: {loan.interest_rate*100:.1f}%&quot;,&#10;                f&quot;Monthly Payment: ${loan.monthly_payment:.2f}&quot;,&#10;                f&quot;Term: {loan.term_years} years&quot;&#10;            ]&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;            # Draw house image (simple house shape)&#10;            house_rect = pygame.Rect(SCREEN_WIDTH // 2 - 75, 400, 150, 100)&#10;            pygame.draw.rect(surface, LIGHT_BLUE, house_rect)&#10;&#10;            # Draw roof&#10;            pygame.draw.polygon(surface, RED, [&#10;                (SCREEN_WIDTH // 2 - 85, 400),&#10;                (SCREEN_WIDTH // 2 + 85, 400),&#10;                (SCREEN_WIDTH // 2, 350)&#10;            ])&#10;&#10;            # Draw door&#10;            door_rect = pygame.Rect(SCREEN_WIDTH // 2 - 15, 450, 30, 50)&#10;            pygame.draw.rect(surface, BROWN, door_rect)&#10;&#10;            # Draw window&#10;            window_rect = pygame.Rect(SCREEN_WIDTH // 2 - 50, 420, 25, 25)&#10;            pygame.draw.rect(surface, WHITE, window_rect)&#10;            pygame.draw.rect(surface, BLACK, window_rect, 2)  # Border&#10;&#10;            window_rect2 = pygame.Rect(SCREEN_WIDTH // 2 + 25, 420, 25, 25)&#10;            pygame.draw.rect(surface, WHITE, window_rect2)&#10;            pygame.draw.rect(surface, BLACK, window_rect2, 2)  # Border&#10;&#10;        elif self.state == 3:&#10;            # Not enough money state&#10;            down_payment = self.selected_house['value'] * 0.2&#10;&#10;            text_lines = [&#10;                f&quot;You've selected the {self.selected_house['name']} for ${self.selected_house['value']}.&quot;,&#10;                f&quot;A standard mortgage requires a 20% down payment of ${down_payment:.2f}.&quot;,&#10;                &quot;&quot;,&#10;                &quot;You don't have enough money for the down payment.&quot;,&#10;                &quot;You'll need to save up more money before buying a house.&quot;,&#10;                &quot;&quot;,&#10;                &quot;Would you like to select a different house or skip for now?&quot;&#10;            ]&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;class FamilyPlanningScreen(Screen):&#10;    &quot;&quot;&quot;&#10;    Screen for family planning opportunity.&#10;    &quot;&quot;&quot;&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;&#10;        # Title&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;&#10;        # State (0 = initial, 1 = spouse added, 2 = children question, 3 = confirmation)&#10;        self.state = 0&#10;&#10;        # Spouse info&#10;        self.spouse_age = self.game.player.age - random.randint(-3, 3)  # Spouse age is close to player age&#10;        self.spouse_has_job = random.random() &lt; 0.7  # 70% chance of spouse having a job&#10;&#10;        if self.spouse_has_job:&#10;            self.spouse_income = int(self.game.player.salary * random.uniform(0.5, 1.5))  # Spouse income relative to player&#10;        else:&#10;            self.spouse_income = 0&#10;&#10;        # Children info&#10;        self.num_children = random.randint(1, 3)  # Random number of children&#10;&#10;        # Create buttons&#10;        self.create_buttons()&#10;&#10;    def create_buttons(self):&#10;        &quot;&quot;&quot;Create buttons based on current state.&quot;&quot;&quot;&#10;        self.buttons = []&#10;&#10;        if self.state == 0:&#10;            # Initial state - start family or skip&#10;            start_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;Start a Family&quot;,&#10;                action=self.start_family&#10;            )&#10;&#10;            skip_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Not Now&quot;,&#10;                action=self.skip_family&#10;            )&#10;&#10;            self.buttons = [start_button, skip_button]&#10;&#10;        elif self.state == 1:&#10;            # Spouse added - have children or not&#10;            children_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 150,&#10;                200, 50,&#10;                &quot;Have Children&quot;,&#10;                action=self.have_children&#10;            )&#10;&#10;            no_children_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;No Children&quot;,&#10;                action=self.no_children&#10;            )&#10;&#10;            self.buttons = [children_button, no_children_button]&#10;&#10;        elif self.state == 2 or self.state == 3:&#10;            # Confirmation&#10;            continue_button = Button(&#10;                SCREEN_WIDTH // 2 - 100,&#10;                SCREEN_HEIGHT - 90,&#10;                200, 50,&#10;                &quot;Continue&quot;,&#10;                action=self.continue_to_game&#10;            )&#10;&#10;            self.buttons = [continue_button]&#10;&#10;    def start_family(self):&#10;        &quot;&quot;&quot;Start a family by adding a spouse.&quot;&quot;&quot;&#10;        # Add spouse to family&#10;        self.game.player.family.append({&quot;relation&quot;: &quot;Spouse&quot;, &quot;age&quot;: self.spouse_age})&#10;&#10;        # Add spouse income if applicable&#10;        if self.spouse_has_job:&#10;            self.game.player.salary += self.spouse_income&#10;&#10;        # Move to next state&#10;        self.state = 1&#10;        self.create_buttons()&#10;&#10;    def have_children(self):&#10;        &quot;&quot;&quot;Have children.&quot;&quot;&quot;&#10;        # Add children to family&#10;        for i in range(self.num_children):&#10;            child_name = f&quot;Child {i+1}&quot;  # Placeholder name&#10;            child_age = 0  # Newborn&#10;            self.game.player.family.append({&quot;relation&quot;: &quot;Child&quot;, &quot;name&quot;: child_name, &quot;age&quot;: child_age})&#10;&#10;        # Move to confirmation state&#10;        self.state = 2&#10;        self.create_buttons()&#10;&#10;    def no_children(self):&#10;        &quot;&quot;&quot;Choose not to have children.&quot;&quot;&quot;&#10;        # Move to confirmation state&#10;        self.state = 3&#10;        self.create_buttons()&#10;&#10;    def skip_family(self):&#10;        &quot;&quot;&quot;Skip family planning for now.&quot;&quot;&quot;&#10;        from moneySmartz.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def continue_to_game(self):&#10;        &quot;&quot;&quot;Continue to game after family planning.&quot;&quot;&quot;&#10;        from moneySmartz.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;&#10;    def draw(self, surface):&#10;        &quot;&quot;&quot;Draw the family planning screen.&quot;&quot;&quot;&#10;        # Background&#10;        surface.fill(WHITE)&#10;&#10;        # Title&#10;        title_surface = self.title_font.render(&quot;FAMILY PLANNING&quot;, True, BLUE)&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#10;        surface.blit(title_surface, title_rect)&#10;&#10;        if self.state == 0:&#10;            # Initial state&#10;            text_lines = [&#10;                &quot;You've reached a stage in life where starting a family might be a consideration.&quot;,&#10;                &quot;Starting a family will increase your monthly expenses but can bring joy to your life.&quot;,&#10;                &quot;&quot;,&#10;                &quot;Would you like to start a family?&quot;&#10;            ]&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;            # Draw family image (simple stick figures)&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 - 50, 300, 40, is_male=True)&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 + 50, 300, 40, is_male=False)&#10;&#10;        elif self.state == 1:&#10;            # Spouse added state&#10;            text_lines = [&#10;                &quot;Congratulations! You've gotten married.&quot;,&#10;                f&quot;Your spouse is {self.spouse_age} years old.&quot;&#10;            ]&#10;&#10;            if self.spouse_has_job:&#10;                text_lines.extend([&#10;                    f&quot;Your spouse has a job that adds ${self.spouse_income}/year to your family income.&quot;,&#10;                    f&quot;Your combined family income is now ${self.game.player.salary}/year.&quot;&#10;                ])&#10;            else:&#10;                text_lines.append(&quot;Your spouse doesn't currently have a job.&quot;)&#10;&#10;            text_lines.extend([&#10;                &quot;&quot;,&#10;                &quot;Would you like to have children?&quot;&#10;            ])&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;            # Draw family image (simple stick figures)&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 - 50, 300, 40, is_male=True)&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 + 50, 300, 40, is_male=False)&#10;&#10;        elif self.state == 2:&#10;            # Children added state&#10;            text_lines = [&#10;                f&quot;Congratulations! You now have {self.num_children} {'child' if self.num_children == 1 else 'children'}.&quot;,&#10;                &quot;Having children will increase your monthly expenses.&quot;,&#10;                &quot;&quot;,&#10;                &quot;Your monthly expenses have increased to account for your growing family.&quot;&#10;            ]&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;            # Draw family image (simple stick figures)&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 - 100, 300, 40, is_male=True)&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 + 100, 300, 40, is_male=False)&#10;&#10;            # Draw children&#10;            child_positions = self.distribute_children(self.num_children, SCREEN_WIDTH // 2, 350, 150)&#10;            for pos in child_positions:&#10;                self.draw_stick_figure(surface, pos[0], pos[1], 25, is_child=True)&#10;&#10;        elif self.state == 3:&#10;            # No children state&#10;            text_lines = [&#10;                &quot;You've decided not to have children at this time.&quot;,&#10;                &quot;You can always reconsider this decision in the future.&quot;&#10;            ]&#10;&#10;            for i, line in enumerate(text_lines):&#10;                text_surface = self.text_font.render(line, True, BLACK)&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#10;                surface.blit(text_surface, text_rect)&#10;&#10;            # Draw family image (simple stick figures)&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 - 50, 300, 40, is_male=True)&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 + 50, 300, 40, is_male=False)&#10;&#10;        # Draw buttons&#10;        for button in self.buttons:&#10;            button.draw(surface)&#10;&#10;    def draw_stick_figure(self, surface, x, y, size, is_male=True, is_child=False):&#10;        &quot;&quot;&quot;Draw a simple stick figure.&quot;&quot;&quot;&#10;        # Head&#10;        head_radius = size // 4&#10;        pygame.draw.circle(surface, BLACK, (x, y - size // 2 + head_radius), head_radius, 2)&#10;&#10;        # Body&#10;        body_length = size // 2&#10;        pygame.draw.line(surface, BLACK, (x, y - size // 2 + head_radius * 2), (x, y - size // 2 + head_radius * 2 + body_length), 2)&#10;&#10;        # Arms&#10;        arm_length = size // 3&#10;        pygame.draw.line(surface, BLACK, (x, y - size // 2 + head_radius * 2 + body_length // 3), &#10;                         (x - arm_length, y - size // 2 + head_radius * 2 + body_length // 3), 2)&#10;        pygame.draw.line(surface, BLACK, (x, y - size // 2 + head_radius * 2 + body_length // 3), &#10;                         (x + arm_length, y - size // 2 + head_radius * 2 + body_length // 3), 2)&#10;&#10;        # Legs&#10;        leg_length = size // 2&#10;        pygame.draw.line(surface, BLACK, (x, y - size // 2 + head_radius * 2 + body_length), &#10;                         (x - arm_length // 2, y - size // 2 + head_radius * 2 + body_length + leg_length), 2)&#10;        pygame.draw.line(surface, BLACK, (x, y - size // 2 + head_radius * 2 + body_length), &#10;                         (x + arm_length // 2, y - size // 2 + head_radius * 2 + body_length + leg_length), 2)&#10;&#10;        # Gender/age specific details&#10;        if is_child:&#10;            # Smaller figure already handled by size parameter&#10;            pass&#10;        elif is_male:&#10;            # Bow tie for male&#10;            pygame.draw.circle(surface, RED, (x, y - size // 2 + head_radius * 2 + body_length // 6), 3)&#10;        else:&#10;            # Skirt for female&#10;            pygame.draw.polygon(surface, PURPLE, [&#10;                (x, y - size // 2 + head_radius * 2 + body_length),&#10;                (x - arm_length, y - size // 2 + head_radius * 2 + body_length + leg_length // 2),&#10;                (x + arm_length, y - size // 2 + head_radius * 2 + body_length + leg_length // 2)&#10;            ], 2)&#10;&#10;    def distribute_children(self, num_children, center_x, y, width):&#10;        &quot;&quot;&quot;Calculate positions for children stick figures.&quot;&quot;&quot;&#10;        positions = []&#10;&#10;        if num_children == 1:&#10;            positions.append((center_x, y))&#10;        else:&#10;            spacing = width / (num_children - 1) if num_children &gt; 1 else 0&#10;            for i in range(num_children):&#10;                x = center_x - width // 2 + i * spacing&#10;                positions.append((x, y))&#10;&#10;        return positions&#10;&#10;" />
              <option name="updatedContent" value="import pygame&#13;&#10;import random&#13;&#10;from pygame.locals import *&#13;&#10;from moneySmartz.constants import *&#13;&#10;from moneySmartz.ui import Screen, Button, TextInput&#13;&#10;from moneySmartz.models import Loan, Asset, Card&#13;&#10;&#13;&#10;BROWN = (139, 69, 19)&#13;&#10;&#13;&#10;class HighSchoolGraduationScreen(Screen):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Screen for high school graduation event.&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    def __init__(self, game):&#13;&#10;        super().__init__(game)&#13;&#10;&#13;&#10;        # Title&#13;&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#13;&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#13;&#10;&#13;&#10;        # Buttons&#13;&#10;        college_button = Button(&#13;&#10;            SCREEN_WIDTH // 2 - 150,&#13;&#10;            SCREEN_HEIGHT - 210,&#13;&#10;            300, 50,&#13;&#10;            &quot;Go to College ($20,000/year)&quot;,&#13;&#10;            action=self.go_to_college&#13;&#10;        )&#13;&#10;&#13;&#10;        trade_button = Button(&#13;&#10;            SCREEN_WIDTH // 2 - 150,&#13;&#10;            SCREEN_HEIGHT - 150,&#13;&#10;            300, 50,&#13;&#10;            &quot;Go to Trade School ($10,000)&quot;,&#13;&#10;            action=self.go_to_trade_school&#13;&#10;        )&#13;&#10;&#13;&#10;        work_button = Button(&#13;&#10;            SCREEN_WIDTH // 2 - 150,&#13;&#10;            SCREEN_HEIGHT - 90,&#13;&#10;            300, 50,&#13;&#10;            &quot;Start Working Full-time&quot;,&#13;&#10;            action=self.start_working&#13;&#10;        )&#13;&#10;&#13;&#10;        self.buttons = [college_button, trade_button, work_button]&#13;&#10;&#13;&#10;    def show_recurring_bill_popup(self, bill_name, amount):&#13;&#10;        # Simple recurring bill popup logic&#13;&#10;        self.recurring_bill_message = f&quot;New recurring bill: {bill_name} - ${amount}/month.&quot;&#13;&#10;        self.show_recurring_bill = True&#13;&#10;        self.recurring_bill_btn = Button(&#13;&#10;            SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 + 40, 200, 50, &quot;OK&quot;, action=self.close_recurring_bill_popup&#13;&#10;        )&#13;&#10;&#13;&#10;    def close_recurring_bill_popup(self):&#13;&#10;        self.show_recurring_bill = False&#13;&#10;        self.recurring_bill_message = &quot;&quot;&#13;&#10;        self.recurring_bill_btn = None&#13;&#10;&#13;&#10;    def go_to_college(self):&#13;&#10;        &quot;&quot;&quot;Choose to go to college.&quot;&quot;&quot;&#13;&#10;        # Check if player can afford college&#13;&#10;        annual_cost = 20000&#13;&#10;        if self.game.player.cash &gt;= annual_cost:&#13;&#10;            self.game.player.cash -= annual_cost&#13;&#10;        elif self.game.player.bank_account and self.game.player.bank_account.balance &gt;= annual_cost:&#13;&#10;            self.game.player.bank_account.withdraw(annual_cost)&#13;&#10;        else:&#13;&#10;            # Need a student loan&#13;&#10;            loan_amount = 80000  # 4 years of college&#13;&#10;            loan = Loan(&quot;Student&quot;, loan_amount, 0.05, 20)  # 5% interest, 20-year term&#13;&#10;            self.game.player.loans.append(loan)&#13;&#10;&#13;&#10;        self.game.player.education = &quot;College (In Progress)&quot;&#13;&#10;        self.show_recurring_bill_popup(&quot;College Tuition&quot;, 20000 // 12)&#13;&#10;&#13;&#10;        # Return to game screen&#13;&#10;        from moneySmartz.screens.game_screen import GameScreen&#13;&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#13;&#10;&#13;&#10;    def go_to_trade_school(self):&#13;&#10;        &quot;&quot;&quot;Choose to go to trade school.&quot;&quot;&quot;&#13;&#10;        # Check if player can afford trade school&#13;&#10;        cost = 10000&#13;&#10;        if self.game.player.cash &gt;= cost:&#13;&#10;            self.game.player.cash -= cost&#13;&#10;        elif self.game.player.bank_account and self.game.player.bank_account.balance &gt;= cost:&#13;&#10;            self.game.player.bank_account.withdraw(cost)&#13;&#10;        else:&#13;&#10;            # Need a student loan&#13;&#10;            loan = Loan(&quot;Student&quot;, cost, 0.05, 10)  # 5% interest, 10-year term&#13;&#10;            self.game.player.loans.append(loan)&#13;&#10;&#13;&#10;        self.game.player.education = &quot;Trade School&quot;&#13;&#10;        self.show_recurring_bill_popup(&quot;Trade School Tuition&quot;, 10000 // 24)&#13;&#10;&#13;&#10;        # Return to game screen&#13;&#10;        from moneySmartz.screens.game_screen import GameScreen&#13;&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#13;&#10;&#13;&#10;    def start_working(self):&#13;&#10;        &quot;&quot;&quot;Choose to start working full-time.&quot;&quot;&quot;&#13;&#10;        self.game.player.education = &quot;High School Graduate&quot;&#13;&#10;        self.show_recurring_bill_popup(&quot;Rent&quot;, 800)&#13;&#10;&#13;&#10;        # Go to job search screen&#13;&#10;        from moneySmartz.screens.financial_screens import JobSearchScreen&#13;&#10;        self.game.gui_manager.set_screen(JobSearchScreen(self.game))&#13;&#10;&#13;&#10;    def draw(self, surface):&#13;&#10;        &quot;&quot;&quot;Draw the high school graduation screen.&quot;&quot;&quot;&#13;&#10;        # Background&#13;&#10;        surface.fill(WHITE)&#13;&#10;&#13;&#10;        # Title&#13;&#10;        title_surface = self.title_font.render(&quot;HIGH SCHOOL GRADUATION&quot;, True, BLUE)&#13;&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#13;&#10;        surface.blit(title_surface, title_rect)&#13;&#10;&#13;&#10;        # Graduation cap image (simple triangle and rectangle)&#13;&#10;        cap_center_x = SCREEN_WIDTH // 2&#13;&#10;        cap_center_y = 180&#13;&#10;&#13;&#10;        # Draw cap&#13;&#10;        pygame.draw.rect(surface, BLACK, (cap_center_x - 50, cap_center_y - 10, 100, 20))&#13;&#10;&#13;&#10;        # Draw tassel&#13;&#10;        pygame.draw.line(surface, YELLOW, (cap_center_x + 40, cap_center_y), (cap_center_x + 60, cap_center_y + 30), 5)&#13;&#10;        pygame.draw.circle(surface, YELLOW, (cap_center_x + 60, cap_center_y + 40), 10)&#13;&#10;&#13;&#10;        # Draw top&#13;&#10;        pygame.draw.polygon(surface, BLACK, [&#13;&#10;            (cap_center_x - 50, cap_center_y - 10),&#13;&#10;            (cap_center_x + 50, cap_center_y - 10),&#13;&#10;            (cap_center_x, cap_center_y - 60)&#13;&#10;        ])&#13;&#10;&#13;&#10;        # Explanation text&#13;&#10;        text_lines = [&#13;&#10;            &quot;Congratulations! You've graduated from high school.&quot;,&#13;&#10;            &quot;It's time to make some important decisions about your future.&quot;,&#13;&#10;            &quot;&quot;,&#13;&#10;            &quot;You can go to college, which costs $20,000 per year for 4 years,&quot;,&#13;&#10;            &quot;but may lead to higher-paying jobs in the future.&quot;,&#13;&#10;            &quot;&quot;,&#13;&#10;            &quot;You can go to trade school, which costs $10,000 for 2 years,&quot;,&#13;&#10;            &quot;and can lead to specialized technical careers.&quot;,&#13;&#10;            &quot;&quot;,&#13;&#10;            &quot;Or you can start working full-time right away with your high school diploma.&quot;,&#13;&#10;            &quot;&quot;,&#13;&#10;            &quot;What would you like to do?&quot;&#13;&#10;        ]&#13;&#10;&#13;&#10;        for i, line in enumerate(text_lines):&#13;&#10;            text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 250 + i * 30))&#13;&#10;            surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;        # Draw buttons&#13;&#10;        for button in self.buttons:&#13;&#10;            button.draw(surface)&#13;&#10;&#13;&#10;        # Draw recurring bill popup if needed&#13;&#10;        if hasattr(self, 'show_recurring_bill') and self.show_recurring_bill:&#13;&#10;            pygame.draw.rect(surface, LIGHT_GRAY, (SCREEN_WIDTH // 2 - 200, SCREEN_HEIGHT // 2 - 100, 400, 200))&#13;&#10;            msg_surface = self.text_font.render(self.recurring_bill_message, True, BLACK)&#13;&#10;            msg_rect = msg_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))&#13;&#10;            surface.blit(msg_surface, msg_rect)&#13;&#10;            self.recurring_bill_btn.draw(surface)&#13;&#10;&#13;&#10;    def handle_events(self, events):&#13;&#10;        # ...existing code...&#13;&#10;        if hasattr(self, 'show_recurring_bill') and self.show_recurring_bill:&#13;&#10;            mouse_pos = pygame.mouse.get_pos()&#13;&#10;            mouse_click = False&#13;&#10;            for event in events:&#13;&#10;                if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:&#13;&#10;                    mouse_click = True&#13;&#10;            action = self.recurring_bill_btn.update(mouse_pos, mouse_click)&#13;&#10;            if callable(action):&#13;&#10;                action()&#13;&#10;                return&#13;&#10;        # ...existing code...&#13;&#10;&#13;&#10;class CollegeGraduationScreen(Screen):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Screen for college graduation event.&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    def __init__(self, game):&#13;&#10;        super().__init__(game)&#13;&#10;&#13;&#10;        # Title&#13;&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#13;&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#13;&#10;&#13;&#10;        # Buttons&#13;&#10;        continue_button = Button(&#13;&#10;            SCREEN_WIDTH // 2 - 100,&#13;&#10;            SCREEN_HEIGHT - 90,&#13;&#10;            200, 50,&#13;&#10;            &quot;Continue&quot;,&#13;&#10;            action=self.continue_to_job_search&#13;&#10;        )&#13;&#10;&#13;&#10;        self.buttons = [continue_button]&#13;&#10;&#13;&#10;    def continue_to_job_search(self):&#13;&#10;        &quot;&quot;&quot;Continue to job search after graduation.&quot;&quot;&quot;&#13;&#10;        # Update education status&#13;&#10;        self.game.player.education = &quot;College Graduate&quot;&#13;&#10;&#13;&#10;        # Boost credit score&#13;&#10;        self.game.player.credit_score += 20  # Education boosts credit score&#13;&#10;&#13;&#10;        # Go to job search screen&#13;&#10;        from moneySmartz.screens.financial_screens import JobSearchScreen&#13;&#10;        self.game.gui_manager.set_screen(JobSearchScreen(self.game))&#13;&#10;&#13;&#10;    def draw(self, surface):&#13;&#10;        &quot;&quot;&quot;Draw the college graduation screen.&quot;&quot;&quot;&#13;&#10;        # Background&#13;&#10;        surface.fill(WHITE)&#13;&#10;&#13;&#10;        # Title&#13;&#10;        title_surface = self.title_font.render(&quot;COLLEGE GRADUATION&quot;, True, BLUE)&#13;&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#13;&#10;        surface.blit(title_surface, title_rect)&#13;&#10;&#13;&#10;        # Graduation cap image (simple triangle and rectangle)&#13;&#10;        cap_center_x = SCREEN_WIDTH // 2&#13;&#10;        cap_center_y = 180&#13;&#10;&#13;&#10;        # Draw cap&#13;&#10;        pygame.draw.rect(surface, BLACK, (cap_center_x - 50, cap_center_y - 10, 100, 20))&#13;&#10;&#13;&#10;        # Draw tassel&#13;&#10;        pygame.draw.line(surface, YELLOW, (cap_center_x + 40, cap_center_y), (cap_center_x + 60, cap_center_y + 30), 5)&#13;&#10;        pygame.draw.circle(surface, YELLOW, (cap_center_x + 60, cap_center_y + 40), 10)&#13;&#10;&#13;&#10;        # Draw top&#13;&#10;        pygame.draw.polygon(surface, BLACK, [&#13;&#10;            (cap_center_x - 50, cap_center_y - 10),&#13;&#10;            (cap_center_x + 50, cap_center_y - 10),&#13;&#10;            (cap_center_x, cap_center_y - 60)&#13;&#10;        ])&#13;&#10;&#13;&#10;        # Explanation text&#13;&#10;        text_lines = [&#13;&#10;            &quot;Congratulations! You've graduated from college with a bachelor's degree.&quot;,&#13;&#10;            &quot;Your education will open up better job opportunities.&quot;,&#13;&#10;            &quot;&quot;,&#13;&#10;            &quot;Your credit score has increased due to your educational achievement.&quot;,&#13;&#10;            f&quot;Your credit score is now {self.game.player.credit_score}.&quot;,&#13;&#10;            &quot;&quot;,&#13;&#10;            &quot;With your new degree, you have access to better job opportunities.&quot;,&#13;&#10;            &quot;Let's look for a job that matches your qualifications!&quot;&#13;&#10;        ]&#13;&#10;&#13;&#10;        for i, line in enumerate(text_lines):&#13;&#10;            text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 250 + i * 30))&#13;&#10;            surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;        # Draw buttons&#13;&#10;        for button in self.buttons:&#13;&#10;            button.draw(surface)&#13;&#10;&#13;&#10;class CarPurchaseScreen(Screen):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Screen for car purchase opportunity.&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    def __init__(self, game):&#13;&#10;        super().__init__(game)&#13;&#10;&#13;&#10;        # Title&#13;&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#13;&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#13;&#10;&#13;&#10;        # Car options&#13;&#10;        self.car_options = [&#13;&#10;            {&quot;name&quot;: &quot;Used Economy Car&quot;, &quot;value&quot;: 5000},&#13;&#10;            {&quot;name&quot;: &quot;New Economy Car&quot;, &quot;value&quot;: 18000},&#13;&#10;            {&quot;name&quot;: &quot;Used Luxury Car&quot;, &quot;value&quot;: 15000},&#13;&#10;            {&quot;name&quot;: &quot;New Luxury Car&quot;, &quot;value&quot;: 35000},&#13;&#10;        ]&#13;&#10;&#13;&#10;        # Selected car&#13;&#10;        self.selected_car = None&#13;&#10;&#13;&#10;        # Payment method&#13;&#10;        self.payment_method = None&#13;&#10;&#13;&#10;        # State (0 = car selection, 1 = payment selection, 2 = confirmation)&#13;&#10;        self.state = 0&#13;&#10;&#13;&#10;        # Create car selection buttons&#13;&#10;        self.create_car_buttons()&#13;&#10;&#13;&#10;    def create_car_buttons(self):&#13;&#10;        &quot;&quot;&quot;Create buttons for car selection.&quot;&quot;&quot;&#13;&#10;        self.buttons = []&#13;&#10;&#13;&#10;        if self.state == 0:&#13;&#10;            # Car selection buttons&#13;&#10;            for i, car in enumerate(self.car_options):&#13;&#10;                car_button = Button(&#13;&#10;                    SCREEN_WIDTH // 2 - 150,&#13;&#10;                    250 + i * 60,&#13;&#10;                    300, 50,&#13;&#10;                    f&quot;{car['name']} - ${car['value']}&quot;,&#13;&#10;                    action=lambda c=car: self.select_car(c)&#13;&#10;                )&#13;&#10;                self.buttons.append(car_button)&#13;&#10;&#13;&#10;            # Skip button&#13;&#10;            skip_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 90,&#13;&#10;                200, 50,&#13;&#10;                &quot;Skip for Now&quot;,&#13;&#10;                action=self.skip_purchase&#13;&#10;            )&#13;&#10;            self.buttons.append(skip_button)&#13;&#10;&#13;&#10;        elif self.state == 1:&#13;&#10;            # Payment method buttons&#13;&#10;            payment_options = [&quot;Cash&quot;]&#13;&#10;&#13;&#10;            if self.game.player.bank_account and self.game.player.bank_account.balance &gt;= self.selected_car['value']:&#13;&#10;                payment_options.append(&quot;Bank Account&quot;)&#13;&#10;&#13;&#10;            payment_options.append(&quot;Auto Loan&quot;)&#13;&#10;&#13;&#10;            for i, method in enumerate(payment_options):&#13;&#10;                method_button = Button(&#13;&#10;                    SCREEN_WIDTH // 2 - 100,&#13;&#10;                    300 + i * 60,&#13;&#10;                    200, 50,&#13;&#10;                    method,&#13;&#10;                    action=lambda m=method: self.select_payment_method(m)&#13;&#10;                )&#13;&#10;                self.buttons.append(method_button)&#13;&#10;&#13;&#10;            # Back button&#13;&#10;            back_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 90,&#13;&#10;                200, 50,&#13;&#10;                &quot;Back&quot;,&#13;&#10;                action=self.go_back_to_car_selection&#13;&#10;            )&#13;&#10;            self.buttons.append(back_button)&#13;&#10;&#13;&#10;        elif self.state == 2:&#13;&#10;            # Confirmation button&#13;&#10;            confirm_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 90,&#13;&#10;                200, 50,&#13;&#10;                &quot;Continue&quot;,&#13;&#10;                action=self.confirm_purchase&#13;&#10;            )&#13;&#10;            self.buttons.append(confirm_button)&#13;&#10;&#13;&#10;    def select_car(self, car):&#13;&#10;        &quot;&quot;&quot;Select a car to purchase.&quot;&quot;&quot;&#13;&#10;        self.selected_car = car&#13;&#10;        self.state = 1&#13;&#10;        self.create_car_buttons()&#13;&#10;&#13;&#10;    def go_back_to_car_selection(self):&#13;&#10;        &quot;&quot;&quot;Go back to car selection.&quot;&quot;&quot;&#13;&#10;        self.state = 0&#13;&#10;        self.create_car_buttons()&#13;&#10;&#13;&#10;    def select_payment_method(self, method):&#13;&#10;        &quot;&quot;&quot;Select a payment method.&quot;&quot;&quot;&#13;&#10;        self.payment_method = method&#13;&#10;&#13;&#10;        # Process payment&#13;&#10;        if method == &quot;Cash&quot; and self.game.player.cash &gt;= self.selected_car['value']:&#13;&#10;            self.game.player.cash -= self.selected_car['value']&#13;&#10;        elif method == &quot;Bank Account&quot;:&#13;&#10;            self.game.player.bank_account.withdraw(self.selected_car['value'])&#13;&#10;        else:  # Auto Loan&#13;&#10;            # Determine loan terms based on credit score&#13;&#10;            if self.game.player.credit_score &gt;= 700:&#13;&#10;                interest_rate = 0.03  # 3%&#13;&#10;            elif self.game.player.credit_score &gt;= 650:&#13;&#10;                interest_rate = 0.05  # 5%&#13;&#10;            else:&#13;&#10;                interest_rate = 0.08  # 8%&#13;&#10;&#13;&#10;            loan = Loan(&quot;Auto&quot;, self.selected_car['value'], interest_rate, 5)  # 5-year auto loan&#13;&#10;            self.game.player.loans.append(loan)&#13;&#10;&#13;&#10;        # Add car to assets&#13;&#10;        self.game.player.assets.append(Asset(&quot;Car&quot;, self.selected_car['name'], self.selected_car['value']))&#13;&#10;&#13;&#10;        # Move to confirmation&#13;&#10;        self.state = 2&#13;&#10;        self.create_car_buttons()&#13;&#10;&#13;&#10;    def skip_purchase(self):&#13;&#10;        &quot;&quot;&quot;Skip car purchase.&quot;&quot;&quot;&#13;&#10;        from moneySmartz.screens.game_screen import GameScreen&#13;&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#13;&#10;&#13;&#10;    def confirm_purchase(self):&#13;&#10;        &quot;&quot;&quot;Confirm purchase and return to game.&quot;&quot;&quot;&#13;&#10;        from moneySmartz.screens.game_screen import GameScreen&#13;&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#13;&#10;&#13;&#10;    def draw(self, surface):&#13;&#10;        &quot;&quot;&quot;Draw the car purchase screen.&quot;&quot;&quot;&#13;&#10;        # Background&#13;&#10;        surface.fill(WHITE)&#13;&#10;&#13;&#10;        # Title&#13;&#10;        title_surface = self.title_font.render(&quot;CAR PURCHASE OPPORTUNITY&quot;, True, BLUE)&#13;&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#13;&#10;        surface.blit(title_surface, title_rect)&#13;&#10;&#13;&#10;        if self.state == 0:&#13;&#10;            # Car selection state&#13;&#10;            text_lines = [&#13;&#10;                &quot;You're now at an age where having your own car could be beneficial.&quot;,&#13;&#10;                &quot;Would you like to look at some car options?&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                &quot;Select a car to purchase:&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;        elif self.state == 1:&#13;&#10;            # Payment method selection state&#13;&#10;            text_lines = [&#13;&#10;                f&quot;You've selected the {self.selected_car['name']} for ${self.selected_car['value']}.&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                &quot;How would you like to pay?&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;        elif self.state == 2:&#13;&#10;            # Confirmation state&#13;&#10;            text_lines = [&#13;&#10;                f&quot;Congratulations on your new {self.selected_car['name']}!&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                f&quot;You paid using {self.payment_method}.&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            if self.payment_method == &quot;Auto Loan&quot;:&#13;&#10;                loan = self.game.player.loans[-1]  # The loan we just added&#13;&#10;                text_lines.extend([&#13;&#10;                    &quot;&quot;,&#13;&#10;                    f&quot;Your auto loan details:&quot;,&#13;&#10;                    f&quot;Amount: ${loan.original_amount:.2f}&quot;,&#13;&#10;                    f&quot;Interest Rate: {loan.interest_rate*100:.1f}%&quot;,&#13;&#10;                    f&quot;Monthly Payment: ${loan.monthly_payment:.2f}&quot;,&#13;&#10;                    f&quot;Term: {loan.term_years} years&quot;&#13;&#10;                ])&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;            # Draw car image (simple rectangle)&#13;&#10;            car_rect = pygame.Rect(SCREEN_WIDTH // 2 - 100, 350, 200, 100)&#13;&#10;            pygame.draw.rect(surface, BLUE, car_rect)&#13;&#10;            pygame.draw.rect(surface, BLACK, car_rect, 2)  # Border&#13;&#10;&#13;&#10;            # Draw wheels&#13;&#10;            pygame.draw.circle(surface, BLACK, (SCREEN_WIDTH // 2 - 60, 450), 20)&#13;&#10;            pygame.draw.circle(surface, BLACK, (SCREEN_WIDTH // 2 + 60, 450), 20)&#13;&#10;&#13;&#10;        # Draw buttons&#13;&#10;        for button in self.buttons:&#13;&#10;            button.draw(surface)&#13;&#10;&#13;&#10;class HousingScreen(Screen):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Screen for house purchase opportunity.&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    def __init__(self, game):&#13;&#10;        super().__init__(game)&#13;&#10;&#13;&#10;        # Title&#13;&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#13;&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#13;&#10;&#13;&#10;        # House options&#13;&#10;        self.house_options = [&#13;&#10;            {&quot;name&quot;: &quot;Small Starter Home&quot;, &quot;value&quot;: 150000},&#13;&#10;            {&quot;name&quot;: &quot;Mid-size Family Home&quot;, &quot;value&quot;: 250000},&#13;&#10;            {&quot;name&quot;: &quot;Large Luxury Home&quot;, &quot;value&quot;: 500000},&#13;&#10;            {&quot;name&quot;: &quot;Urban Condo&quot;, &quot;value&quot;: 200000},&#13;&#10;        ]&#13;&#10;&#13;&#10;        # Selected house&#13;&#10;        self.selected_house = None&#13;&#10;&#13;&#10;        # Payment method for down payment&#13;&#10;        self.payment_method = None&#13;&#10;&#13;&#10;        # State (0 = house selection, 1 = payment selection, 2 = confirmation)&#13;&#10;        self.state = 0&#13;&#10;&#13;&#10;        # Create house selection buttons&#13;&#10;        self.create_house_buttons()&#13;&#10;&#13;&#10;    def create_house_buttons(self):&#13;&#10;        &quot;&quot;&quot;Create buttons for house selection.&quot;&quot;&quot;&#13;&#10;        self.buttons = []&#13;&#10;&#13;&#10;        if self.state == 0:&#13;&#10;            # House selection buttons&#13;&#10;            for i, house in enumerate(self.house_options):&#13;&#10;                house_button = Button(&#13;&#10;                    SCREEN_WIDTH // 2 - 150,&#13;&#10;                    250 + i * 60,&#13;&#10;                    300, 50,&#13;&#10;                    f&quot;{house['name']} - ${house['value']}&quot;,&#13;&#10;                    action=lambda h=house: self.select_house(h)&#13;&#10;                )&#13;&#10;                self.buttons.append(house_button)&#13;&#10;&#13;&#10;            # Skip button&#13;&#10;            skip_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 90,&#13;&#10;                200, 50,&#13;&#10;                &quot;Skip for Now&quot;,&#13;&#10;                action=self.skip_purchase&#13;&#10;            )&#13;&#10;            self.buttons.append(skip_button)&#13;&#10;&#13;&#10;        elif self.state == 1:&#13;&#10;            # Payment method buttons for down payment&#13;&#10;            payment_options = []&#13;&#10;&#13;&#10;            down_payment = self.selected_house['value'] * 0.2&#13;&#10;&#13;&#10;            if self.game.player.cash &gt;= down_payment:&#13;&#10;                payment_options.append(&quot;Cash&quot;)&#13;&#10;&#13;&#10;            if self.game.player.bank_account and self.game.player.bank_account.balance &gt;= down_payment:&#13;&#10;                payment_options.append(&quot;Bank Account&quot;)&#13;&#10;&#13;&#10;            if not payment_options:&#13;&#10;                # Not enough money for down payment&#13;&#10;                self.state = 3  # Special state for not enough money&#13;&#10;                self.create_house_buttons()&#13;&#10;                return&#13;&#10;&#13;&#10;            for i, method in enumerate(payment_options):&#13;&#10;                method_button = Button(&#13;&#10;                    SCREEN_WIDTH // 2 - 100,&#13;&#10;                    300 + i * 60,&#13;&#10;                    200, 50,&#13;&#10;                    method,&#13;&#10;                    action=lambda m=method: self.select_payment_method(m)&#13;&#10;                )&#13;&#10;                self.buttons.append(method_button)&#13;&#10;&#13;&#10;            # Back button&#13;&#10;            back_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 90,&#13;&#10;                200, 50,&#13;&#10;                &quot;Back&quot;,&#13;&#10;                action=self.go_back_to_house_selection&#13;&#10;            )&#13;&#10;            self.buttons.append(back_button)&#13;&#10;&#13;&#10;        elif self.state == 2:&#13;&#10;            # Confirmation button&#13;&#10;            confirm_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 90,&#13;&#10;                200, 50,&#13;&#10;                &quot;Continue&quot;,&#13;&#10;                action=self.confirm_purchase&#13;&#10;            )&#13;&#10;            self.buttons.append(confirm_button)&#13;&#10;&#13;&#10;        elif self.state == 3:&#13;&#10;            # Not enough money state&#13;&#10;            back_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 90,&#13;&#10;                200, 50,&#13;&#10;                &quot;Back&quot;,&#13;&#10;                action=self.go_back_to_house_selection&#13;&#10;            )&#13;&#10;            self.buttons.append(back_button)&#13;&#10;&#13;&#10;            skip_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 150,&#13;&#10;                200, 50,&#13;&#10;                &quot;Skip for Now&quot;,&#13;&#10;                action=self.skip_purchase&#13;&#10;            )&#13;&#10;            self.buttons.append(skip_button)&#13;&#10;&#13;&#10;    def select_house(self, house):&#13;&#10;        &quot;&quot;&quot;Select a house to purchase.&quot;&quot;&quot;&#13;&#10;        self.selected_house = house&#13;&#10;        self.state = 1&#13;&#10;        self.create_house_buttons()&#13;&#10;&#13;&#10;    def go_back_to_house_selection(self):&#13;&#10;        &quot;&quot;&quot;Go back to house selection.&quot;&quot;&quot;&#13;&#10;        self.state = 0&#13;&#10;        self.create_house_buttons()&#13;&#10;&#13;&#10;    def select_payment_method(self, method):&#13;&#10;        &quot;&quot;&quot;Select a payment method for down payment.&quot;&quot;&quot;&#13;&#10;        self.payment_method = method&#13;&#10;&#13;&#10;        # Calculate down payment (20% is standard)&#13;&#10;        down_payment = self.selected_house['value'] * 0.2&#13;&#10;        loan_amount = self.selected_house['value'] - down_payment&#13;&#10;&#13;&#10;        # Process down payment&#13;&#10;        if method == &quot;Cash&quot;:&#13;&#10;            self.game.player.cash -= down_payment&#13;&#10;        else:  # Bank Account&#13;&#10;            self.game.player.bank_account.withdraw(down_payment)&#13;&#10;&#13;&#10;        # Create mortgage&#13;&#10;        if self.game.player.credit_score &gt;= 750:&#13;&#10;            interest_rate = 0.035  # 3.5%&#13;&#10;        elif self.game.player.credit_score &gt;= 700:&#13;&#10;            interest_rate = 0.04   # 4.0%&#13;&#10;        elif self.game.player.credit_score &gt;= 650:&#13;&#10;            interest_rate = 0.045  # 4.5%&#13;&#10;        else:&#13;&#10;            interest_rate = 0.055  # 5.5%&#13;&#10;&#13;&#10;        loan = Loan(&quot;Mortgage&quot;, loan_amount, interest_rate, 30)  # 30-year mortgage&#13;&#10;        self.game.player.loans.append(loan)&#13;&#10;&#13;&#10;        # Add house to assets&#13;&#10;        self.game.player.assets.append(Asset(&quot;House&quot;, self.selected_house['name'], self.selected_house['value']))&#13;&#10;&#13;&#10;        # Move to confirmation&#13;&#10;        self.state = 2&#13;&#10;        self.create_house_buttons()&#13;&#10;&#13;&#10;    def skip_purchase(self):&#13;&#10;        &quot;&quot;&quot;Skip house purchase.&quot;&quot;&quot;&#13;&#10;        from moneySmartz.screens.game_screen import GameScreen&#13;&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#13;&#10;&#13;&#10;    def confirm_purchase(self):&#13;&#10;        &quot;&quot;&quot;Confirm purchase and return to game.&quot;&quot;&quot;&#13;&#10;        from moneySmartz.screens.game_screen import GameScreen&#13;&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#13;&#10;&#13;&#10;    def draw(self, surface):&#13;&#10;        &quot;&quot;&quot;Draw the housing screen.&quot;&quot;&quot;&#13;&#10;        # Background&#13;&#10;        surface.fill(WHITE)&#13;&#10;&#13;&#10;        # Title&#13;&#10;        title_surface = self.title_font.render(&quot;HOUSE PURCHASE OPPORTUNITY&quot;, True, BLUE)&#13;&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#13;&#10;        surface.blit(title_surface, title_rect)&#13;&#10;&#13;&#10;        if self.state == 0:&#13;&#10;            # House selection state&#13;&#10;            text_lines = [&#13;&#10;                &quot;You're now at a stage in life where buying a house could be a good investment.&quot;,&#13;&#10;                &quot;Would you like to look at some housing options?&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                &quot;Select a house to purchase:&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;        elif self.state == 1:&#13;&#10;            # Payment method selection state&#13;&#10;            down_payment = self.selected_house['value'] * 0.2&#13;&#10;&#13;&#10;            text_lines = [&#13;&#10;                f&quot;You've selected the {self.selected_house['name']} for ${self.selected_house['value']}.&quot;,&#13;&#10;                f&quot;A standard mortgage requires a 20% down payment of ${down_payment:.2f}.&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                &quot;How would you like to pay the down payment?&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;        elif self.state == 2:&#13;&#10;            # Confirmation state&#13;&#10;            loan = self.game.player.loans[-1]  # The loan we just added&#13;&#10;            down_payment = self.selected_house['value'] * 0.2&#13;&#10;&#13;&#10;            text_lines = [&#13;&#10;                f&quot;Congratulations on your new {self.selected_house['name']}!&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                f&quot;You paid the down payment of ${down_payment:.2f} using {self.payment_method}.&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                f&quot;Your mortgage details:&quot;,&#13;&#10;                f&quot;Loan Amount: ${loan.original_amount:.2f}&quot;,&#13;&#10;                f&quot;Interest Rate: {loan.interest_rate*100:.1f}%&quot;,&#13;&#10;                f&quot;Monthly Payment: ${loan.monthly_payment:.2f}&quot;,&#13;&#10;                f&quot;Term: {loan.term_years} years&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;            # Draw house image (simple house shape)&#13;&#10;            house_rect = pygame.Rect(SCREEN_WIDTH // 2 - 75, 400, 150, 100)&#13;&#10;            pygame.draw.rect(surface, LIGHT_BLUE, house_rect)&#13;&#10;&#13;&#10;            # Draw roof&#13;&#10;            pygame.draw.polygon(surface, RED, [&#13;&#10;                (SCREEN_WIDTH // 2 - 85, 400),&#13;&#10;                (SCREEN_WIDTH // 2 + 85, 400),&#13;&#10;                (SCREEN_WIDTH // 2, 350)&#13;&#10;            ])&#13;&#10;&#13;&#10;            # Draw door&#13;&#10;            door_rect = pygame.Rect(SCREEN_WIDTH // 2 - 15, 450, 30, 50)&#13;&#10;            pygame.draw.rect(surface, BROWN, door_rect)&#13;&#10;&#13;&#10;            # Draw window&#13;&#10;            window_rect = pygame.Rect(SCREEN_WIDTH // 2 - 50, 420, 25, 25)&#13;&#10;            pygame.draw.rect(surface, WHITE, window_rect)&#13;&#10;            pygame.draw.rect(surface, BLACK, window_rect, 2)  # Border&#13;&#10;&#13;&#10;            window_rect2 = pygame.Rect(SCREEN_WIDTH // 2 + 25, 420, 25, 25)&#13;&#10;            pygame.draw.rect(surface, WHITE, window_rect2)&#13;&#10;            pygame.draw.rect(surface, BLACK, window_rect2, 2)  # Border&#13;&#10;&#13;&#10;        elif self.state == 3:&#13;&#10;            # Not enough money state&#13;&#10;            down_payment = self.selected_house['value'] * 0.2&#13;&#10;&#13;&#10;            text_lines = [&#13;&#10;                f&quot;You've selected the {self.selected_house['name']} for ${self.selected_house['value']}.&quot;,&#13;&#10;                f&quot;A standard mortgage requires a 20% down payment of ${down_payment:.2f}.&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                &quot;You don't have enough money for the down payment.&quot;,&#13;&#10;                &quot;You'll need to save up more money before buying a house.&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                &quot;Would you like to select a different house or skip for now?&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;        # Draw buttons&#13;&#10;        for button in self.buttons:&#13;&#10;            button.draw(surface)&#13;&#10;&#13;&#10;class FamilyPlanningScreen(Screen):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Screen for family planning opportunity.&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    def __init__(self, game):&#13;&#10;        super().__init__(game)&#13;&#10;&#13;&#10;        # Title&#13;&#10;        self.title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#13;&#10;        self.text_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#13;&#10;&#13;&#10;        # State (0 = initial, 1 = spouse added, 2 = children question, 3 = confirmation)&#13;&#10;        self.state = 0&#13;&#10;&#13;&#10;        # Spouse info&#13;&#10;        self.spouse_age = self.game.player.age - random.randint(-3, 3)  # Spouse age is close to player age&#13;&#10;        self.spouse_has_job = random.random() &lt; 0.7  # 70% chance of spouse having a job&#13;&#10;&#13;&#10;        if self.spouse_has_job:&#13;&#10;            self.spouse_income = int(self.game.player.salary * random.uniform(0.5, 1.5))  # Spouse income relative to player&#13;&#10;        else:&#13;&#10;            self.spouse_income = 0&#13;&#10;&#13;&#10;        # Children info&#13;&#10;        self.num_children = random.randint(1, 3)  # Random number of children&#13;&#10;&#13;&#10;        # Create buttons&#13;&#10;        self.create_buttons()&#13;&#10;&#13;&#10;    def create_buttons(self):&#13;&#10;        &quot;&quot;&quot;Create buttons based on current state.&quot;&quot;&quot;&#13;&#10;        self.buttons = []&#13;&#10;&#13;&#10;        if self.state == 0:&#13;&#10;            # Initial state - start family or skip&#13;&#10;            start_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 150,&#13;&#10;                200, 50,&#13;&#10;                &quot;Start a Family&quot;,&#13;&#10;                action=self.start_family&#13;&#10;            )&#13;&#10;&#13;&#10;            skip_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 90,&#13;&#10;                200, 50,&#13;&#10;                &quot;Not Now&quot;,&#13;&#10;                action=self.skip_family&#13;&#10;            )&#13;&#10;&#13;&#10;            self.buttons = [start_button, skip_button]&#13;&#10;&#13;&#10;        elif self.state == 1:&#13;&#10;            # Spouse added - have children or not&#13;&#10;            children_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 150,&#13;&#10;                200, 50,&#13;&#10;                &quot;Have Children&quot;,&#13;&#10;                action=self.have_children&#13;&#10;            )&#13;&#10;&#13;&#10;            no_children_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 90,&#13;&#10;                200, 50,&#13;&#10;                &quot;No Children&quot;,&#13;&#10;                action=self.no_children&#13;&#10;            )&#13;&#10;&#13;&#10;            self.buttons = [children_button, no_children_button]&#13;&#10;&#13;&#10;        elif self.state == 2 or self.state == 3:&#13;&#10;            # Confirmation&#13;&#10;            continue_button = Button(&#13;&#10;                SCREEN_WIDTH // 2 - 100,&#13;&#10;                SCREEN_HEIGHT - 90,&#13;&#10;                200, 50,&#13;&#10;                &quot;Continue&quot;,&#13;&#10;                action=self.continue_to_game&#13;&#10;            )&#13;&#10;&#13;&#10;            self.buttons = [continue_button]&#13;&#10;&#13;&#10;    def start_family(self):&#13;&#10;        &quot;&quot;&quot;Start a family by adding a spouse.&quot;&quot;&quot;&#13;&#10;        # Add spouse to family&#13;&#10;        self.game.player.family.append({&quot;relation&quot;: &quot;Spouse&quot;, &quot;age&quot;: self.spouse_age})&#13;&#10;&#13;&#10;        # Add spouse income if applicable&#13;&#10;        if self.spouse_has_job:&#13;&#10;            self.game.player.salary += self.spouse_income&#13;&#10;&#13;&#10;        # Move to next state&#13;&#10;        self.state = 1&#13;&#10;        self.create_buttons()&#13;&#10;&#13;&#10;    def have_children(self):&#13;&#10;        &quot;&quot;&quot;Have children.&quot;&quot;&quot;&#13;&#10;        # Add children to family&#13;&#10;        for i in range(self.num_children):&#13;&#10;            child_name = f&quot;Child {i+1}&quot;  # Placeholder name&#13;&#10;            child_age = 0  # Newborn&#13;&#10;            self.game.player.family.append({&quot;relation&quot;: &quot;Child&quot;, &quot;name&quot;: child_name, &quot;age&quot;: child_age})&#13;&#10;&#13;&#10;        # Move to confirmation state&#13;&#10;        self.state = 2&#13;&#10;        self.create_buttons()&#13;&#10;&#13;&#10;    def no_children(self):&#13;&#10;        &quot;&quot;&quot;Choose not to have children.&quot;&quot;&quot;&#13;&#10;        # Move to confirmation state&#13;&#10;        self.state = 3&#13;&#10;        self.create_buttons()&#13;&#10;&#13;&#10;    def skip_family(self):&#13;&#10;        &quot;&quot;&quot;Skip family planning for now.&quot;&quot;&quot;&#13;&#10;        from moneySmartz.screens.game_screen import GameScreen&#13;&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#13;&#10;&#13;&#10;    def continue_to_game(self):&#13;&#10;        &quot;&quot;&quot;Continue to game after family planning.&quot;&quot;&quot;&#13;&#10;        from moneySmartz.screens.game_screen import GameScreen&#13;&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#13;&#10;&#13;&#10;    def draw(self, surface):&#13;&#10;        &quot;&quot;&quot;Draw the family planning screen.&quot;&quot;&quot;&#13;&#10;        # Background&#13;&#10;        surface.fill(WHITE)&#13;&#10;&#13;&#10;        # Title&#13;&#10;        title_surface = self.title_font.render(&quot;FAMILY PLANNING&quot;, True, BLUE)&#13;&#10;        title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, 80))&#13;&#10;        surface.blit(title_surface, title_rect)&#13;&#10;&#13;&#10;        if self.state == 0:&#13;&#10;            # Initial state&#13;&#10;            text_lines = [&#13;&#10;                &quot;You've reached a stage in life where starting a family might be a consideration.&quot;,&#13;&#10;                &quot;Starting a family will increase your monthly expenses but can bring joy to your life.&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                &quot;Would you like to start a family?&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;            # Draw family image (simple stick figures)&#13;&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 - 50, 300, 40, is_male=True)&#13;&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 + 50, 300, 40, is_male=False)&#13;&#10;&#13;&#10;        elif self.state == 1:&#13;&#10;            # Spouse added state&#13;&#10;            text_lines = [&#13;&#10;                &quot;Congratulations! You've gotten married.&quot;,&#13;&#10;                f&quot;Your spouse is {self.spouse_age} years old.&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            if self.spouse_has_job:&#13;&#10;                text_lines.extend([&#13;&#10;                    f&quot;Your spouse has a job that adds ${self.spouse_income}/year to your family income.&quot;,&#13;&#10;                    f&quot;Your combined family income is now ${self.game.player.salary}/year.&quot;&#13;&#10;                ])&#13;&#10;            else:&#13;&#10;                text_lines.append(&quot;Your spouse doesn't currently have a job.&quot;)&#13;&#10;&#13;&#10;            text_lines.extend([&#13;&#10;                &quot;&quot;,&#13;&#10;                &quot;Would you like to have children?&quot;&#13;&#10;            ])&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;            # Draw family image (simple stick figures)&#13;&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 - 50, 300, 40, is_male=True)&#13;&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 + 50, 300, 40, is_male=False)&#13;&#10;&#13;&#10;        elif self.state == 2:&#13;&#10;            # Children added state&#13;&#10;            text_lines = [&#13;&#10;                f&quot;Congratulations! You now have {self.num_children} {'child' if self.num_children == 1 else 'children'}.&quot;,&#13;&#10;                &quot;Having children will increase your monthly expenses.&quot;,&#13;&#10;                &quot;&quot;,&#13;&#10;                &quot;Your monthly expenses have increased to account for your growing family.&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;            # Draw family image (simple stick figures)&#13;&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 - 100, 300, 40, is_male=True)&#13;&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 + 100, 300, 40, is_male=False)&#13;&#10;&#13;&#10;            # Draw children&#13;&#10;            child_positions = self.distribute_children(self.num_children, SCREEN_WIDTH // 2, 350, 150)&#13;&#10;            for pos in child_positions:&#13;&#10;                self.draw_stick_figure(surface, pos[0], pos[1], 25, is_child=True)&#13;&#10;&#13;&#10;        elif self.state == 3:&#13;&#10;            # No children state&#13;&#10;            text_lines = [&#13;&#10;                &quot;You've decided not to have children at this time.&quot;,&#13;&#10;                &quot;You can always reconsider this decision in the future.&quot;&#13;&#10;            ]&#13;&#10;&#13;&#10;            for i, line in enumerate(text_lines):&#13;&#10;                text_surface = self.text_font.render(line, True, BLACK)&#13;&#10;                text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, 150 + i * 30))&#13;&#10;                surface.blit(text_surface, text_rect)&#13;&#10;&#13;&#10;            # Draw family image (simple stick figures)&#13;&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 - 50, 300, 40, is_male=True)&#13;&#10;            self.draw_stick_figure(surface, SCREEN_WIDTH // 2 + 50, 300, 40, is_male=False)&#13;&#10;&#13;&#10;        # Draw buttons&#13;&#10;        for button in self.buttons:&#13;&#10;            button.draw(surface)&#13;&#10;&#13;&#10;    def draw_stick_figure(self, surface, x, y, size, is_male=True, is_child=False):&#13;&#10;        &quot;&quot;&quot;Draw a simple stick figure.&quot;&quot;&quot;&#13;&#10;        # Head&#13;&#10;        head_radius = size // 4&#13;&#10;        pygame.draw.circle(surface, BLACK, (x, y - size // 2 + head_radius), head_radius, 2)&#13;&#10;&#13;&#10;        # Body&#13;&#10;        body_length = size // 2&#13;&#10;        pygame.draw.line(surface, BLACK, (x, y - size // 2 + head_radius * 2), (x, y - size // 2 + head_radius * 2 + body_length), 2)&#13;&#10;&#13;&#10;        # Arms&#13;&#10;        arm_length = size // 3&#13;&#10;        pygame.draw.line(surface, BLACK, (x, y - size // 2 + head_radius * 2 + body_length // 3), &#13;&#10;                         (x - arm_length, y - size // 2 + head_radius * 2 + body_length // 3), 2)&#13;&#10;        pygame.draw.line(surface, BLACK, (x, y - size // 2 + head_radius * 2 + body_length // 3), &#13;&#10;                         (x + arm_length, y - size // 2 + head_radius * 2 + body_length // 3), 2)&#13;&#10;&#13;&#10;        # Legs&#13;&#10;        leg_length = size // 2&#13;&#10;        pygame.draw.line(surface, BLACK, (x, y - size // 2 + head_radius * 2 + body_length), &#13;&#10;                         (x - arm_length // 2, y - size // 2 + head_radius * 2 + body_length + leg_length), 2)&#13;&#10;        pygame.draw.line(surface, BLACK, (x, y - size // 2 + head_radius * 2 + body_length), &#13;&#10;                         (x + arm_length // 2, y - size // 2 + head_radius * 2 + body_length + leg_length), 2)&#13;&#10;&#13;&#10;        # Gender/age specific details&#13;&#10;        if is_child:&#13;&#10;            # Smaller figure already handled by size parameter&#13;&#10;            pass&#13;&#10;        elif is_male:&#13;&#10;            # Bow tie for male&#13;&#10;            pygame.draw.circle(surface, RED, (x, y - size // 2 + head_radius * 2 + body_length // 6), 3)&#13;&#10;        else:&#13;&#10;            # Skirt for female&#13;&#10;            pygame.draw.polygon(surface, PURPLE, [&#13;&#10;                (x, y - size // 2 + head_radius * 2 + body_length),&#13;&#10;                (x - arm_length, y - size // 2 + head_radius * 2 + body_length + leg_length // 2),&#13;&#10;                (x + arm_length, y - size // 2 + head_radius * 2 + body_length + leg_length // 2)&#13;&#10;            ], 2)&#13;&#10;&#13;&#10;    def distribute_children(self, num_children, center_x, y, width):&#13;&#10;        &quot;&quot;&quot;Calculate positions for children stick figures.&quot;&quot;&quot;&#13;&#10;        positions = []&#13;&#10;&#13;&#10;        if num_children == 1:&#13;&#10;            positions.append((center_x, y))&#13;&#10;        else:&#13;&#10;            spacing = width / (num_children - 1) if num_children &gt; 1 else 0&#13;&#10;            for i in range(num_children):&#13;&#10;                x = center_x - width // 2 + i * spacing&#13;&#10;                positions.append((x, y))&#13;&#10;&#13;&#10;        return positions&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/moneySmartz/screens/shop_screen.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/moneySmartz/screens/shop_screen.py" />
              <option name="originalContent" value="import pygame&#10;&#10;from moneySmartz.constants import *&#10;from moneySmartz.ui import Screen, Button&#10;&#10;# Define the shop items with prices and descriptions&#10;WHITE = (255, 255, 255)&#10;BLUE = (0, 0, 255)&#10;LIGHT_GRAY = (211, 211, 211)&#10;BLACK = (0, 0, 0)&#10;RED = (255, 0, 0)&#10;GREEN = (0, 255, 0)&#10;FONT_LARGE = 36&#10;FONT_MEDIUM = 24&#10;FONT_SMALL = 18&#10;&#10;&#10;SHOP_ITEMS = [&#10;    {&quot;name&quot;: &quot;Groceries&quot;, &quot;price&quot;: 50, &quot;desc&quot;: &quot;Weekly groceries for your family.&quot;},&#10;    {&quot;name&quot;: &quot;Clothes&quot;, &quot;price&quot;: 100, &quot;desc&quot;: &quot;A new set of clothes.&quot;},&#10;    {&quot;name&quot;: &quot;Smartphone&quot;, &quot;price&quot;: 600, &quot;desc&quot;: &quot;A modern smartphone.&quot;, &quot;recurring&quot;: {&quot;name&quot;: &quot;Phone Plan&quot;, &quot;amount&quot;: 30, &quot;source&quot;: &quot;bank_or_credit&quot;}},&#10;    {&quot;name&quot;: &quot;TV&quot;, &quot;price&quot;: 400, &quot;desc&quot;: &quot;A 50-inch smart TV.&quot;, &quot;recurring&quot;: {&quot;name&quot;: &quot;Streaming Service&quot;, &quot;amount&quot;: 15, &quot;source&quot;: &quot;bank_or_credit&quot;}},&#10;    {&quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 900, &quot;desc&quot;: &quot;A new laptop for work or school.&quot;, &quot;recurring&quot;: {&quot;name&quot;: &quot;Software Subscription&quot;, &quot;amount&quot;: 10, &quot;source&quot;: &quot;bank_or_credit&quot;}},&#10;    {&quot;name&quot;: &quot;Gift&quot;, &quot;price&quot;: 30, &quot;desc&quot;: &quot;A gift for a friend or family member.&quot;},&#10;    {&quot;name&quot;: &quot;Home&quot;, &quot;price&quot;: 5000, &quot;desc&quot;: &quot;A place to call your own. Unlocks a new chapter!&quot;},&#10;    {&quot;name&quot;: &quot;Vehicle&quot;, &quot;price&quot;: 1200, &quot;desc&quot;: &quot;Buy a new or used vehicle!&quot;},&#10;]&#10;&#10;class ShopScreen(Screen):&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.popup_back_btn = None&#10;        self.pay_credit_btn = None&#10;        self.pay_bank_btn = None&#10;        self.main_back_btn = None&#10;        self.pay_cash_btn = None&#10;        self.selected_item = None&#10;        self.message = &quot;&quot;&#10;        self.show_payment_popup = False&#10;        self.buttons = []&#10;        self.create_buttons()&#10;        self.create_payment_buttons()&#10;&#10;    def create_buttons(self):&#10;        self.buttons = []&#10;        y = 120&#10;        for idx, item in enumerate(SHOP_ITEMS):&#10;            btn = Button(60, y, 300, 50, f&quot;{item['name']} - ${item['price']}&quot;, action=lambda i=idx: self.select_item(i))&#10;            self.buttons.append(btn)&#10;            y += 60&#10;        self.main_back_btn = Button(60, 600, 180, 50, &quot;Back&quot;, self.go_back)&#10;&#10;    def create_payment_buttons(self):&#10;        popup_x = 300&#10;        popup_y = 250&#10;        self.pay_cash_btn = Button(popup_x + 40, popup_y + 60, 180, 40, &quot;Pay Cash&quot;, action=self.pay_cash)&#10;        self.pay_bank_btn = Button(popup_x + 40, popup_y + 110, 180, 40, &quot;Pay Bank&quot;, action=self.pay_bank)&#10;        self.pay_credit_btn = Button(popup_x + 40, popup_y + 160, 180, 40, &quot;Pay Credit&quot;, action=self.pay_credit)&#10;        self.popup_back_btn = Button(popup_x + 80, popup_y + 220, 120, 40, &quot;Back&quot;, action=self.close_popup)&#10;&#10;&#10;    def select_item(self, idx):&#10;        self.selected_item = SHOP_ITEMS[idx]&#10;        # Only show a payment popup for items that are not Home or Vehicle&#10;        if self.selected_item['name'] == &quot;Home&quot;:&#10;            from moneySmartz.screens.home_purchase_screen import HomePurchaseScreen&#10;            self.game.gui_manager.set_screen(HomePurchaseScreen(self.game))&#10;            self.selected_item = None&#10;            self.show_payment_popup = False&#10;            return&#10;        if self.selected_item['name'] == &quot;Vehicle&quot;:&#10;            from moneySmartz.screens.vehicle_purchase_screen import VehiclePurchaseScreen&#10;            self.game.gui_manager.set_screen(VehiclePurchaseScreen(self.game))&#10;            self.selected_item = None&#10;            self.show_payment_popup = False&#10;            return&#10;        self.message = f&quot;Selected: {self.selected_item['name']}&quot;&#10;        self.show_payment_popup = True&#10;&#10;    def close_popup(self):&#10;        self.show_payment_popup = False&#10;        self.selected_item = None&#10;        self.message = &quot;&quot;&#10;        # Redraw screen to ensure popup is gone&#10;        self.game.gui_manager.set_screen(ShopScreen(self.game))&#10;&#10;    def pay_cash(self):&#10;        if not self.selected_item:&#10;            self.message = &quot;Select an item first.&quot;&#10;            return&#10;        # Special logic for buying a home&#10;        if self.selected_item['name'] == &quot;Home&quot;:&#10;            if self.game.player.cash &gt;= self.selected_item['price']:&#10;                self.game.player.cash -= self.selected_item['price']&#10;                self.game.player.inventory.append(self.selected_item['name'])&#10;                self.game.player.has_home = True&#10;                self.message = &quot;Congratulations! You bought a home and unlocked a new chapter!&quot;&#10;            else:&#10;                self.message = &quot;Not enough cash to buy a home.&quot;&#10;            self.close_popup()&#10;            return&#10;        if self.game.player.cash &gt;= self.selected_item['price']:&#10;            self.game.player.cash -= self.selected_item['price']&#10;            self.game.player.inventory.append(self.selected_item['name'])&#10;            if 'recurring' in self.selected_item:&#10;                self.game.player.recurring_bills.append(self.selected_item['recurring'])&#10;            self.message = f&quot;Bought {self.selected_item['name']} with cash!&quot;&#10;        else:&#10;            self.message = &quot;Not enough cash.&quot;&#10;        self.close_popup()&#10;&#10;    def pay_bank(self):&#10;        if not self.selected_item:&#10;            self.message = &quot;Select an item first.&quot;&#10;            return&#10;        if self.selected_item['name'] == &quot;Home&quot;:&#10;            acct = self.game.player.bank_account&#10;            if acct and acct.balance &gt;= self.selected_item['price']:&#10;                acct.withdraw(self.selected_item['price'])&#10;                self.game.player.inventory.append(self.selected_item['name'])&#10;                self.game.player.has_home = True&#10;                self.message = &quot;Congratulations! You bought a home and unlocked a new chapter!&quot;&#10;            else:&#10;                self.message = &quot;Not enough in bank account to buy a home.&quot;&#10;            self.close_popup()&#10;            return&#10;        acct = self.game.player.bank_account&#10;        if acct and acct.balance &gt;= self.selected_item['price']:&#10;            acct.withdraw(self.selected_item['price'])&#10;            self.game.player.inventory.append(self.selected_item['name'])&#10;            if 'recurring' in self.selected_item:&#10;                self.game.player.recurring_bills.append(self.selected_item['recurring'])&#10;            self.message = f&quot;Bought {self.selected_item['name']} from bank!&quot;&#10;        else:&#10;            self.message = &quot;Not enough in bank account.&quot;&#10;        self.close_popup()&#10;&#10;    def pay_credit(self):&#10;        if not self.selected_item:&#10;            self.message = &quot;Select an item first.&quot;&#10;            return&#10;        if self.selected_item['name'] == &quot;Home&quot;:&#10;            card = self.game.player.credit_card&#10;            if card and card.charge(self.selected_item['price']):&#10;                self.game.player.inventory.append(self.selected_item['name'])&#10;                self.game.player.has_home = True&#10;                self.message = &quot;Congratulations! You bought a home and unlocked a new chapter!&quot;&#10;            else:&#10;                self.message = &quot;Not enough credit or no card to buy a home.&quot;&#10;            self.close_popup()&#10;            return&#10;        card = self.game.player.credit_card&#10;        if card and card.charge(self.selected_item['price']):&#10;            self.game.player.inventory.append(self.selected_item['name'])&#10;            if 'recurring' in self.selected_item:&#10;                self.game.player.recurring_bills.append(self.selected_item['recurring'])&#10;            self.message = f&quot;Bought {self.selected_item['name']} on credit!&quot;&#10;        else:&#10;            self.message = &quot;Not enough credit or no card.&quot;&#10;        self.close_popup()&#10;&#10;    def go_back(self):&#10;        from moneySmartz.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;        self.selected_item = None&#10;        self.show_payment_popup = False&#10;        self.message = &quot;&quot;&#10;&#10;    def handle_events(self, events):&#10;        mouse_pos = pygame.mouse.get_pos()&#10;        mouse_click = False&#10;        for event in events:&#10;            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:&#10;                mouse_click = True&#10;        if self.show_payment_popup:&#10;            # Only handle payment popup buttons&#10;            for btn in [self.pay_cash_btn, self.pay_bank_btn, self.pay_credit_btn, self.popup_back_btn]:&#10;                action = btn.update(mouse_pos, mouse_click)&#10;                if callable(action):&#10;                    action()&#10;                    return  # Prevent further event handling&#10;            for event in events:&#10;                if event.type == pygame.KEYDOWN:&#10;                    if event.key in [pygame.K_ESCAPE, pygame.K_BACKSPACE]:&#10;                        self.close_popup()&#10;            return  # Prevent main buttons from being handled&#10;        else:&#10;            # Handle item selection buttons&#10;            for btn in self.buttons:&#10;                action = btn.update(mouse_pos, mouse_click)&#10;                if callable(action):&#10;                    action()&#10;                    return&#10;            # Handle the main Back button&#10;            action = self.main_back_btn.update(mouse_pos, mouse_click)&#10;            if callable(action):&#10;                action()&#10;                return&#10;            for event in events:&#10;                if event.type == pygame.KEYDOWN:&#10;                    if event.key in [pygame.K_ESCAPE, pygame.K_BACKSPACE]:&#10;                        self.go_back()&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        title = font.render(&quot;Shop&quot;, True, BLUE)&#10;        surface.blit(title, (60, 40))&#10;        font_small = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        y = 120&#10;        for idx, item in enumerate(SHOP_ITEMS):&#10;            desc = font_small.render(item['desc'], True, BLACK)&#10;            surface.blit(desc, (380, y+10))&#10;            y += 60&#10;        for btn in self.buttons:&#10;            if btn:&#10;                btn.draw(surface)&#10;        # Draw the main Back button (not popup)&#10;        if self.main_back_btn:&#10;            self.main_back_btn.draw(surface)&#10;        msg_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        msg = msg_font.render(self.message, True, RED if &quot;Not&quot; in self.message else GREEN)&#10;        surface.blit(msg, (60, 680))&#10;        if self.selected_item:&#10;            sel_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;            sel_msg = sel_font.render(f&quot;Selected: {self.selected_item['name']}&quot;, True, BLACK)&#10;            surface.blit(sel_msg, (60, 620))&#10;        # Draw the payment popup if needed&#10;        if self.show_payment_popup and self.selected_item:&#10;            popup_x = 300&#10;            popup_y = 250&#10;            pygame.draw.rect(surface, LIGHT_GRAY, (popup_x, popup_y, 260, 300))&#10;            pygame.draw.rect(surface, BLACK, (popup_x, popup_y, 260, 300), 3)&#10;            popup_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;            popup_title = popup_font.render(&quot;Choose Payment&quot;, True, BLUE)&#10;            surface.blit(popup_title, (popup_x + 30, popup_y + 10))&#10;            for btn in [self.pay_cash_btn, self.pay_bank_btn, self.pay_credit_btn, self.popup_back_btn]:&#10;                if btn:&#10;                    btn.draw(surface)&#10;" />
              <option name="updatedContent" value="import pygame&#10;&#10;from moneySmartz.constants import *&#10;from moneySmartz.ui import Screen, Button&#10;&#10;# Define the shop items with prices and descriptions&#10;WHITE = (255, 255, 255)&#10;BLUE = (0, 0, 255)&#10;LIGHT_GRAY = (211, 211, 211)&#10;BLACK = (0, 0, 0)&#10;RED = (255, 0, 0)&#10;GREEN = (0, 255, 0)&#10;FONT_LARGE = 36&#10;FONT_MEDIUM = 24&#10;FONT_SMALL = 18&#10;&#10;&#10;SHOP_ITEMS = [&#10;    {&quot;name&quot;: &quot;Groceries&quot;, &quot;price&quot;: 50, &quot;desc&quot;: &quot;Weekly groceries for your family.&quot;},&#10;    {&quot;name&quot;: &quot;Clothes&quot;, &quot;price&quot;: 100, &quot;desc&quot;: &quot;A new set of clothes.&quot;},&#10;    {&quot;name&quot;: &quot;Smartphone&quot;, &quot;price&quot;: 600, &quot;desc&quot;: &quot;A modern smartphone.&quot;, &quot;recurring&quot;: {&quot;name&quot;: &quot;Phone Plan&quot;, &quot;amount&quot;: 30, &quot;source&quot;: &quot;bank_or_credit&quot;}},&#10;    {&quot;name&quot;: &quot;TV&quot;, &quot;price&quot;: 400, &quot;desc&quot;: &quot;A 50-inch smart TV.&quot;, &quot;recurring&quot;: {&quot;name&quot;: &quot;Streaming Service&quot;, &quot;amount&quot;: 15, &quot;source&quot;: &quot;bank_or_credit&quot;}},&#10;    {&quot;name&quot;: &quot;Laptop&quot;, &quot;price&quot;: 900, &quot;desc&quot;: &quot;A new laptop for work or school.&quot;, &quot;recurring&quot;: {&quot;name&quot;: &quot;Software Subscription&quot;, &quot;amount&quot;: 10, &quot;source&quot;: &quot;bank_or_credit&quot;}},&#10;    {&quot;name&quot;: &quot;Gift&quot;, &quot;price&quot;: 30, &quot;desc&quot;: &quot;A gift for a friend or family member.&quot;},&#10;    {&quot;name&quot;: &quot;Home&quot;, &quot;price&quot;: 5000, &quot;desc&quot;: &quot;A place to call your own. Unlocks a new chapter!&quot;},&#10;    {&quot;name&quot;: &quot;Vehicle&quot;, &quot;price&quot;: 1200, &quot;desc&quot;: &quot;Buy a new or used vehicle!&quot;},&#10;]&#10;&#10;class ShopScreen(Screen):&#10;    def __init__(self, game):&#10;        super().__init__(game)&#10;        self.popup_back_btn = None&#10;        self.pay_credit_btn = None&#10;        self.pay_bank_btn = None&#10;        self.main_back_btn = None&#10;        self.pay_cash_btn = None&#10;        self.selected_item = None&#10;        self.message = &quot;&quot;&#10;        self.show_payment_popup = False&#10;        self.buttons = []&#10;        self.create_buttons()&#10;        self.create_payment_buttons()&#10;&#10;    def create_buttons(self):&#10;        self.buttons = []&#10;        y = 120&#10;        for idx, item in enumerate(SHOP_ITEMS):&#10;            btn = Button(60, y, 300, 50, f&quot;{item['name']} - ${item['price']}&quot;, action=lambda i=idx: self.select_item(i))&#10;            self.buttons.append(btn)&#10;            y += 60&#10;        self.main_back_btn = Button(60, 600, 180, 50, &quot;Back&quot;, self.go_back)&#10;        # Add inventory button&#10;        inventory_btn = Button(&#10;            SCREEN_WIDTH - 220, 20, 200, 50, &quot;View Inventory&quot;, action=self.show_inventory_popup&#10;        )&#10;        self.buttons.append(inventory_btn)&#10;&#10;    def create_payment_buttons(self):&#10;        popup_x = 300&#10;        popup_y = 250&#10;        self.pay_cash_btn = Button(popup_x + 40, popup_y + 60, 180, 40, &quot;Pay Cash&quot;, action=self.pay_cash)&#10;        self.pay_bank_btn = Button(popup_x + 40, popup_y + 110, 180, 40, &quot;Pay Bank&quot;, action=self.pay_bank)&#10;        self.pay_credit_btn = Button(popup_x + 40, popup_y + 160, 180, 40, &quot;Pay Credit&quot;, action=self.pay_credit)&#10;        self.popup_back_btn = Button(popup_x + 80, popup_y + 220, 120, 40, &quot;Back&quot;, action=self.close_popup)&#10;&#10;&#10;    def select_item(self, idx):&#10;        self.selected_item = SHOP_ITEMS[idx]&#10;        # Only show a payment popup for items that are not Home or Vehicle&#10;        if self.selected_item['name'] == &quot;Home&quot;:&#10;            from moneySmartz.screens.home_purchase_screen import HomePurchaseScreen&#10;            self.game.gui_manager.set_screen(HomePurchaseScreen(self.game))&#10;            self.selected_item = None&#10;            self.show_payment_popup = False&#10;            return&#10;        if self.selected_item['name'] == &quot;Vehicle&quot;:&#10;            from moneySmartz.screens.vehicle_purchase_screen import VehiclePurchaseScreen&#10;            self.game.gui_manager.set_screen(VehiclePurchaseScreen(self.game))&#10;            self.selected_item = None&#10;            self.show_payment_popup = False&#10;            return&#10;        self.message = f&quot;Selected: {self.selected_item['name']}&quot;&#10;        self.show_payment_popup = True&#10;&#10;    def close_popup(self):&#10;        self.show_payment_popup = False&#10;        self.selected_item = None&#10;        self.message = &quot;&quot;&#10;        # Redraw screen to ensure popup is gone&#10;        self.game.gui_manager.set_screen(ShopScreen(self.game))&#10;&#10;    def pay_cash(self):&#10;        if not self.selected_item:&#10;            self.message = &quot;Select an item first.&quot;&#10;            return&#10;        # Special logic for buying a home&#10;        if self.selected_item['name'] == &quot;Home&quot;:&#10;            if self.game.player.cash &gt;= self.selected_item['price']:&#10;                self.game.player.cash -= self.selected_item['price']&#10;                self.game.player.inventory.append(self.selected_item['name'])&#10;                self.game.player.has_home = True&#10;                self.message = &quot;Congratulations! You bought a home and unlocked a new chapter!&quot;&#10;            else:&#10;                self.message = &quot;Not enough cash to buy a home.&quot;&#10;            self.close_popup()&#10;            return&#10;        if self.game.player.cash &gt;= self.selected_item['price']:&#10;            self.game.player.cash -= self.selected_item['price']&#10;            self.game.player.inventory.append(self.selected_item['name'])&#10;            if 'recurring' in self.selected_item:&#10;                self.game.player.recurring_bills.append(self.selected_item['recurring'])&#10;            self.message = f&quot;Bought {self.selected_item['name']} with cash!&quot;&#10;        else:&#10;            self.message = &quot;Not enough cash.&quot;&#10;        self.close_popup()&#10;&#10;    def pay_bank(self):&#10;        if not self.selected_item:&#10;            self.message = &quot;Select an item first.&quot;&#10;            return&#10;        if self.selected_item['name'] == &quot;Home&quot;:&#10;            acct = self.game.player.bank_account&#10;            if acct and acct.balance &gt;= self.selected_item['price']:&#10;                acct.withdraw(self.selected_item['price'])&#10;                self.game.player.inventory.append(self.selected_item['name'])&#10;                self.game.player.has_home = True&#10;                self.message = &quot;Congratulations! You bought a home and unlocked a new chapter!&quot;&#10;            else:&#10;                self.message = &quot;Not enough in bank account to buy a home.&quot;&#10;            self.close_popup()&#10;            return&#10;        acct = self.game.player.bank_account&#10;        if acct and acct.balance &gt;= self.selected_item['price']:&#10;            acct.withdraw(self.selected_item['price'])&#10;            self.game.player.inventory.append(self.selected_item['name'])&#10;            if 'recurring' in self.selected_item:&#10;                self.game.player.recurring_bills.append(self.selected_item['recurring'])&#10;            self.message = f&quot;Bought {self.selected_item['name']} from bank!&quot;&#10;        else:&#10;            self.message = &quot;Not enough in bank account.&quot;&#10;        self.close_popup()&#10;&#10;    def pay_credit(self):&#10;        if not self.selected_item:&#10;            self.message = &quot;Select an item first.&quot;&#10;            return&#10;        if self.selected_item['name'] == &quot;Home&quot;:&#10;            card = self.game.player.credit_card&#10;            if card and card.charge(self.selected_item['price']):&#10;                self.game.player.inventory.append(self.selected_item['name'])&#10;                self.game.player.has_home = True&#10;                self.message = &quot;Congratulations! You bought a home and unlocked a new chapter!&quot;&#10;            else:&#10;                self.message = &quot;Not enough credit or no card to buy a home.&quot;&#10;            self.close_popup()&#10;            return&#10;        card = self.game.player.credit_card&#10;        if card and card.charge(self.selected_item['price']):&#10;            self.game.player.inventory.append(self.selected_item['name'])&#10;            if 'recurring' in self.selected_item:&#10;                self.game.player.recurring_bills.append(self.selected_item['recurring'])&#10;            self.message = f&quot;Bought {self.selected_item['name']} on credit!&quot;&#10;        else:&#10;            self.message = &quot;Not enough credit or no card.&quot;&#10;        self.close_popup()&#10;&#10;    def go_back(self):&#10;        from moneySmartz.screens.game_screen import GameScreen&#10;        self.game.gui_manager.set_screen(GameScreen(self.game))&#10;        self.selected_item = None&#10;        self.show_payment_popup = False&#10;        self.message = &quot;&quot;&#10;&#10;    def show_inventory_popup(self):&#10;        self.show_inventory = True&#10;        self.inventory_popup_btn = Button(&#10;            SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 + 80, 200, 50, &quot;Close&quot;, action=self.close_inventory_popup&#10;        )&#10;&#10;    def close_inventory_popup(self):&#10;        self.show_inventory = False&#10;        self.inventory_popup_btn = None&#10;&#10;    def handle_events(self, events):&#10;        mouse_pos = pygame.mouse.get_pos()&#10;        mouse_click = False&#10;        for event in events:&#10;            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:&#10;                mouse_click = True&#10;        if self.show_payment_popup:&#10;            # Only handle payment popup buttons&#10;            for btn in [self.pay_cash_btn, self.pay_bank_btn, self.pay_credit_btn, self.popup_back_btn]:&#10;                action = btn.update(mouse_pos, mouse_click)&#10;                if callable(action):&#10;                    action()&#10;                    return  # Prevent further event handling&#10;            for event in events:&#10;                if event.type == pygame.KEYDOWN:&#10;                    if event.key in [pygame.K_ESCAPE, pygame.K_BACKSPACE]:&#10;                        self.close_popup()&#10;            return  # Prevent main buttons from being handled&#10;        elif hasattr(self, 'show_inventory') and self.show_inventory:&#10;            mouse_pos = pygame.mouse.get_pos()&#10;            mouse_click = False&#10;            for event in events:&#10;                if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:&#10;                    mouse_click = True&#10;            action = self.inventory_popup_btn.update(mouse_pos, mouse_click)&#10;            if callable(action):&#10;                action()&#10;                return&#10;        else:&#10;            # Handle item selection buttons&#10;            for btn in self.buttons:&#10;                action = btn.update(mouse_pos, mouse_click)&#10;                if callable(action):&#10;                    action()&#10;                    return&#10;            # Handle the main Back button&#10;            action = self.main_back_btn.update(mouse_pos, mouse_click)&#10;            if callable(action):&#10;                action()&#10;                return&#10;            for event in events:&#10;                if event.type == pygame.KEYDOWN:&#10;                    if event.key in [pygame.K_ESCAPE, pygame.K_BACKSPACE]:&#10;                        self.go_back()&#10;&#10;    def draw(self, surface):&#10;        surface.fill(WHITE)&#10;        font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;        title = font.render(&quot;Shop&quot;, True, BLUE)&#10;        surface.blit(title, (60, 40))&#10;        font_small = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        y = 120&#10;        for idx, item in enumerate(SHOP_ITEMS):&#10;            desc = font_small.render(item['desc'], True, BLACK)&#10;            surface.blit(desc, (380, y+10))&#10;            y += 60&#10;        for btn in self.buttons:&#10;            if btn:&#10;                btn.draw(surface)&#10;        # Draw the main Back button (not popup)&#10;        if self.main_back_btn:&#10;            self.main_back_btn.draw(surface)&#10;        msg_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;        msg = msg_font.render(self.message, True, RED if &quot;Not&quot; in self.message else GREEN)&#10;        surface.blit(msg, (60, 680))&#10;        if self.selected_item:&#10;            sel_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;            sel_msg = sel_font.render(f&quot;Selected: {self.selected_item['name']}&quot;, True, BLACK)&#10;            surface.blit(sel_msg, (60, 620))&#10;        # Draw the payment popup if needed&#10;        if self.show_payment_popup and self.selected_item:&#10;            popup_x = 300&#10;            popup_y = 250&#10;            pygame.draw.rect(surface, LIGHT_GRAY, (popup_x, popup_y, 260, 300))&#10;            pygame.draw.rect(surface, BLACK, (popup_x, popup_y, 260, 300), 3)&#10;            popup_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;            popup_title = popup_font.render(&quot;Choose Payment&quot;, True, BLUE)&#10;            surface.blit(popup_title, (popup_x + 30, popup_y + 10))&#10;            for btn in [self.pay_cash_btn, self.pay_bank_btn, self.pay_credit_btn, self.popup_back_btn]:&#10;                if btn:&#10;                    btn.draw(surface)&#10;        # Draw inventory popup if needed&#10;        if hasattr(self, 'show_inventory') and self.show_inventory:&#10;            pygame.draw.rect(surface, LIGHT_GRAY, (SCREEN_WIDTH // 2 - 200, SCREEN_HEIGHT // 2 - 150, 400, 300))&#10;            title_font = pygame.font.SysFont('Arial', FONT_LARGE)&#10;            title_surface = title_font.render(&quot;Inventory&quot;, True, BLACK)&#10;            title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 - 120))&#10;            surface.blit(title_surface, title_rect)&#10;            # List items&#10;            items = self.game.player.inventory if hasattr(self.game.player, 'inventory') else []&#10;            item_font = pygame.font.SysFont('Arial', FONT_MEDIUM)&#10;            for i, item in enumerate(items):&#10;                item_surface = item_font.render(f&quot;- {item}&quot;, True, BLACK)&#10;                item_rect = item_surface.get_rect(left=SCREEN_WIDTH // 2 - 180, top=SCREEN_HEIGHT // 2 - 80 + i * 30)&#10;                surface.blit(item_surface, item_rect)&#10;            self.inventory_popup_btn.draw(surface)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>